[{"data":1,"prerenderedAt":925},["Reactive",2],{"content-query-nydz0E8puB":3},[4,68,128,321,523,604,626,711],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":13,"body":14,"_type":63,"_id":64,"_source":65,"_file":66,"_extension":67},"/posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0","posts",false,"","javascript this","자신이 속한 객체 또는 자신이 생성할 인스턴스를 가르키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.",[12],"javascript","2024-01-23T00:00:00.000Z",{"type":15,"children":16,"toc":60},"root",[17,24,29,34,46,51],{"type":18,"tag":19,"props":20,"children":21},"element","p",{},[22],{"type":23,"value":10},"text",{"type":18,"tag":19,"props":25,"children":26},{},[27],{"type":23,"value":28},"\\n",{"type":18,"tag":19,"props":30,"children":31},{},[32],{"type":23,"value":33},"this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.",{"type":18,"tag":35,"props":36,"children":40},"pre",{"className":37,"code":39,"language":12,"meta":8},[38],"language-javascript","// 객체 리터럴\nconst circle = {\n    redius: 5,\n    getDiameter() {\n        // this는 메서드를 호출한 객체를 가리킨다.\n        return 2 * this.radius\n    }\n}\nconsole.log(circle.getDiameter()); // 10\n\n\n// 생성자 함수\nfunction Circle(radius) {\n    // this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    this.radius = radius;\n}\nCircle.prototype.getDiameter = function() {\n    //this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    return 2 * this.radius;\n}\n\n\n// 인스턴스 생성\nconst circle = new Circe(5);\nconsole.log(circle.getDiameter());\n",[41],{"type":18,"tag":42,"props":43,"children":44},"code",{"__ignoreMap":8},[45],{"type":23,"value":39},{"type":18,"tag":19,"props":47,"children":48},{},[49],{"type":23,"value":50},"클래스 기반 언어에서는 this는 언제나 클래스가 생성하는 인스턴스를 가리킨다. 하지만 자바스크립트의 this는 함수가 호출되는 방식에 따라 동적으로 결정된다.",{"type":18,"tag":35,"props":52,"children":55},{"className":53,"code":54,"language":12,"meta":8},[38],"// this는 함수 호출 방식에 따라 동적으로 결정 됨.\nconst foo = function() {\n    console.log(this);\n}\n\n// 1. 일반 함수 호출\nfoo() // window\n\n\n// 2. 메서드 호출\nconst obj = { foo };\nobj.foo(); // obj\n\n// 3. 생성자 함수 호출\nnew foo(); // foo {}\n\n// 4. apply/call/bind 메서드에 의한 간접 호출\nconst bar = {name: 'bar'};\nfoo.call(bar); // bar\nfoo.apply(bar); //bar\nfoo.bind(bar)(); //bar\n",[56],{"type":18,"tag":42,"props":57,"children":58},{"__ignoreMap":8},[59],{"type":23,"value":54},{"title":8,"searchDepth":61,"depth":61,"links":62},2,[],"markdown","content:posts:79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md","content","posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md","md",{"_path":69,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":70,"description":71,"tags":72,"date":75,"body":76,"_type":63,"_id":126,"_source":65,"_file":127,"_extension":67},"/posts/38527f39-69f6-4663-ba58-351831ed48b4","nuxt3 $fetch","nuxt3에서는 $fetch는 ofetch라는 라이브러리를 사용하고 있다. (ofetch는 node, browser 환경 두군데서 같이 사용할 수 있다.)",[73,74],"nuxt","axios","2024-01-22T00:00:00.000Z",{"type":15,"children":77,"toc":123},[78,82,86,91,100,106],{"type":18,"tag":19,"props":79,"children":80},{},[81],{"type":23,"value":71},{"type":18,"tag":19,"props":83,"children":84},{},[85],{"type":23,"value":28},{"type":18,"tag":19,"props":87,"children":88},{},[89],{"type":23,"value":90},"그래서 기존 axios로 설정된 코드들을 뜯어 고쳤다.",{"type":18,"tag":35,"props":92,"children":95},{"className":93,"code":94,"language":12,"meta":8},[38],"// 기존\nimport axios from 'axios';\nimport type { AxiosInstance } from 'axios';\nimport {useAuthStore} from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const authStore = useAuthStore();\n    const axiosInstance: AxiosInstance = axios.create({\n        baseURL: config.BASE_URL,\n    });\n\n    axiosInstance.interceptors.request.use((config) => {\n        if (authStore.isAuthenticated) {\n            config.headers.Authorization = `Bearer ${authStore.token}`;\n        } else {\n            config.headers.Authorization = `Basic ${btoaClientInfo}`;\n        }\n        return config;\n    });\n\n    nuxtApp.provide('axios', axiosInstance);\n});\n\n// 수정\nimport { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const apiFetch = $fetch.create({\n        baseURL: config.BASE_URL,\n        onRequest({ options }) {\n            const authStore = useAuthStore();\n            if (authStore.isAuthenticated) {\n                options.headers = {\n                    Authorization: `Bearer ${authStore.token}`\n                };\n            } else {\n                options.headers = {\n                    Authorization: `Basic ${btoaClientInfo}`\n                };\n            }\n        }\n    })\n    \n    nuxtApp.provide('apiFetch', apiFetch);\n});\n",[96],{"type":18,"tag":42,"props":97,"children":98},{"__ignoreMap":8},[99],{"type":23,"value":94},{"type":18,"tag":101,"props":102,"children":104},"h2",{"id":103},"참고",[105],{"type":23,"value":103},{"type":18,"tag":107,"props":108,"children":109},"ul",{},[110],{"type":18,"tag":111,"props":112,"children":113},"li",{},[114],{"type":18,"tag":115,"props":116,"children":120},"a",{"href":117,"rel":118},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-%EC%9D%98-%EC%B0%A8%EC%9D%B4",[119],"nofollow",[121],{"type":23,"value":122},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-의-차이",{"title":8,"searchDepth":61,"depth":61,"links":124},[125],{"id":103,"depth":61,"text":103},"content:posts:38527f39-69f6-4663-ba58-351831ed48b4.md","posts/38527f39-69f6-4663-ba58-351831ed48b4.md",{"_path":129,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":130,"description":131,"tags":132,"date":134,"body":135,"_type":63,"_id":319,"_source":65,"_file":320,"_extension":67},"/posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c","formData 전송 방법","axios를 $fetch로 변경하면서 로그인시 문제가 발생하였다.",[74,133],"$fetch","2024-01-18T00:00:00.000Z",{"type":15,"children":136,"toc":309},[137,141,145,150,159,164,169,173,178,187,191,196,202,217,226,240,245,254,258,263,267,292,296],{"type":18,"tag":19,"props":138,"children":139},{},[140],{"type":23,"value":131},{"type":18,"tag":19,"props":142,"children":143},{},[144],{"type":23,"value":28},{"type":18,"tag":19,"props":146,"children":147},{},[148],{"type":23,"value":149},"기존에 axios를 사용할때는 아래와 같이 사용중이고",{"type":18,"tag":35,"props":151,"children":154},{"className":152,"code":153,"language":12,"meta":8},[38],"await axios.post(url, qs.stringfy(payload));\n",[155],{"type":18,"tag":42,"props":156,"children":157},{"__ignoreMap":8},[158],{"type":23,"value":153},{"type":18,"tag":19,"props":160,"children":161},{},[162],{"type":23,"value":163},"전달된 형태를 보니 Form Data로 전송이 되고 있다.",{"type":18,"tag":165,"props":166,"children":168},"img",{"src":167},"/blog/images/402a8ea7-222b-448c-a03b-9d5fc37ba9a9.png",[],{"type":18,"tag":19,"props":170,"children":171},{},[172],{"type":23,"value":28},{"type":18,"tag":19,"props":174,"children":175},{},[176],{"type":23,"value":177},"$fetch는 아래와 같이 사용을 했는데",{"type":18,"tag":35,"props":179,"children":182},{"className":180,"code":181,"language":12,"meta":8},[38],"await apiFetch(url, {\n    method: 'POST',\n    body: qs.stringfy(payload)\n});\n",[183],{"type":18,"tag":42,"props":184,"children":185},{"__ignoreMap":8},[186],{"type":23,"value":181},{"type":18,"tag":165,"props":188,"children":190},{"src":189},"/blog/images/ede659c1-c026-407f-8559-fea02df9ff20.png",[],{"type":18,"tag":19,"props":192,"children":193},{},[194],{"type":23,"value":195},"이렇게 전달이 돼서 로그인이 안되는것이다.",{"type":18,"tag":101,"props":197,"children":199},{"id":198},"_2가지-해결법",[200],{"type":23,"value":201},"2가지 해결법",{"type":18,"tag":203,"props":204,"children":206},"h3",{"id":205},"_1-header에-content-type-applicationx-www-form-urlencoded-넣어주기",[207,209,215],{"type":23,"value":208},"1. header에 ",{"type":18,"tag":42,"props":210,"children":212},{"className":211},[],[213],{"type":23,"value":214},"'Content-Type': 'application/x-www-form-urlencoded'",{"type":23,"value":216},"  넣어주기",{"type":18,"tag":35,"props":218,"children":221},{"className":219,"code":220,"language":12,"meta":8},[38],"$fetch(url, {\n    method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n    body: qs.stringfy(payload)\n})\n",[222],{"type":18,"tag":42,"props":223,"children":224},{"__ignoreMap":8},[225],{"type":23,"value":220},{"type":18,"tag":203,"props":227,"children":229},{"id":228},"_2-new-urlsearchparams-사용",[230,232,238],{"type":23,"value":231},"2. ",{"type":18,"tag":42,"props":233,"children":235},{"className":234},[],[236],{"type":23,"value":237},"new URLSearchParams",{"type":23,"value":239}," 사용",{"type":18,"tag":19,"props":241,"children":242},{},[243],{"type":23,"value":244},"원래는 new FormData 만들어서 일일히 append 해줘야하는데 위 함수로 간편하게 만들어준다.",{"type":18,"tag":35,"props":246,"children":249},{"className":247,"code":248,"language":12,"meta":8},[38],"$fetch(url, {\n    method: 'POST',\n    body: new URLSearchParams(qs.stringfy(payload))\n});\n",[250],{"type":18,"tag":42,"props":251,"children":252},{"__ignoreMap":8},[253],{"type":23,"value":248},{"type":18,"tag":19,"props":255,"children":256},{},[257],{"type":23,"value":28},{"type":18,"tag":19,"props":259,"children":260},{},[261],{"type":23,"value":262},"나는 그냥 1번으로 사용하였다.",{"type":18,"tag":19,"props":264,"children":265},{},[266],{"type":23,"value":28},{"type":18,"tag":268,"props":269,"children":270},"blockquote",{},[271],{"type":18,"tag":19,"props":272,"children":273},{},[274,276,282,284,290],{"type":23,"value":275},"Axios를 사용할 때 별도의 설정이 없으면, ",{"type":18,"tag":42,"props":277,"children":279},{"className":278},[],[280],{"type":23,"value":281},"qs.stringify",{"type":23,"value":283},"를 사용하여 변환된 데이터는 ",{"type":18,"tag":42,"props":285,"children":287},{"className":286},[],[288],{"type":23,"value":289},"application/x-www-form-urlencoded",{"type":23,"value":291}," 형식으로 전송된다.",{"type":18,"tag":203,"props":293,"children":294},{"id":103},[295],{"type":23,"value":103},{"type":18,"tag":107,"props":297,"children":298},{},[299],{"type":18,"tag":111,"props":300,"children":301},{},[302],{"type":18,"tag":115,"props":303,"children":306},{"href":304,"rel":305},"https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-FormData-%EC%A0%95%EB%A6%AC-fetch-api",[119],[307],{"type":23,"value":308},"https://inpa.tistory.com/entry/JS-📚-FormData-정리-fetch-api",{"title":8,"searchDepth":61,"depth":61,"links":310},[311],{"id":198,"depth":61,"text":201,"children":312},[313,316,318],{"id":205,"depth":314,"text":315},3,"1. header에 'Content-Type': 'application/x-www-form-urlencoded'  넣어주기",{"id":228,"depth":314,"text":317},"2. new URLSearchParams 사용",{"id":103,"depth":314,"text":103},"content:posts:e9a8a610-ff29-4403-bbb0-55a5438aad7c.md","posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c.md",{"_path":322,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":323,"description":324,"tags":325,"date":328,"body":329,"_type":63,"_id":521,"_source":65,"_file":522,"_extension":67},"/posts/9ecb10c2-fa24-449c-ac39-8553ee942084","nuxt에서 localstorage 이슈","기존에 cookie에 auth 정보를 저장했을때는 미들웨어가 잘 동작을 했는데, 테스트상 localstorage에 저장을 해보니 미들웨어가 제대로 동작을 안한다.",[73,326,327],"ssr","middleware","2024-01-16T00:00:00.000Z",{"type":15,"children":330,"toc":518},[331,335,339,348,353,357,362,367,371,377,473,477,506,510,514],{"type":18,"tag":19,"props":332,"children":333},{},[334],{"type":23,"value":324},{"type":18,"tag":19,"props":336,"children":337},{},[338],{"type":23,"value":28},{"type":18,"tag":35,"props":340,"children":343},{"className":341,"code":342,"language":12,"meta":8},[38],"import { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtRouteMiddleware((to, from) => {\n\n    const authStore = useAuthStore();\n    const nonAuthPages = ['index', 'login'];\n    if (authStore.isAuthenticated) {\n        if (nonAuthPages.includes(to.name)) {\n            return navigateTo('/dashboard');\n        }\n    } else {\n        if (!nonAuthPages.includes(to.name)) {\n            return navigateTo('/login');\n        }\n    }\n}\n",[344],{"type":18,"tag":42,"props":345,"children":346},{"__ignoreMap":8},[347],{"type":23,"value":342},{"type":18,"tag":19,"props":349,"children":350},{},[351],{"type":23,"value":352},"위 코드를 보면 로그인하면 index, login 페이지 접근 못하게, 로그인 안하면 index, login을 제외한 나머지 페이지 접근 못하게 코드를 짰다.",{"type":18,"tag":19,"props":354,"children":355},{},[356],{"type":23,"value":28},{"type":18,"tag":19,"props":358,"children":359},{},[360],{"type":23,"value":361},"로그인한 상태에서는 organization으로 접근을 해야하는데 login 페이지를 거쳐서 dashboard로 이동을 한다.",{"type":18,"tag":19,"props":363,"children":364},{},[365],{"type":23,"value":366},"원인을 살펴보니 ssr에서 localStorage에 접근을 못하여 예상하지 못한 로직으로 흐름이 발생한거였다. (server-side에서는 cookie에만 접근이 가능하다.)",{"type":18,"tag":19,"props":368,"children":369},{},[370],{"type":23,"value":28},{"type":18,"tag":101,"props":372,"children":374},{"id":373},"localstorage에-auth정보-저장-시-흐름-isauthenticated는-true",[375],{"type":23,"value":376},"localStorage에 auth정보 저장 시 흐름 (isAuthenticated는 true)",{"type":18,"tag":378,"props":379,"children":380},"ol",{},[381,407,432,437,468],{"type":18,"tag":111,"props":382,"children":383},{},[384,386],{"type":23,"value":385},"organization 페이지에 접근\n",{"type":18,"tag":378,"props":387,"children":388},{},[389],{"type":18,"tag":111,"props":390,"children":391},{},[392,394],{"type":23,"value":393},"server-side에서 middleware 동작\n",{"type":18,"tag":378,"props":395,"children":396},{},[397,402],{"type":18,"tag":111,"props":398,"children":399},{},[400],{"type":23,"value":401},"이때 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":18,"tag":111,"props":403,"children":404},{},[405],{"type":23,"value":406},"navigateTo(’/login’)이 실행된다.",{"type":18,"tag":111,"props":408,"children":409},{},[410,412],{"type":23,"value":411},"login 페이지 접근\n",{"type":18,"tag":378,"props":413,"children":414},{},[415],{"type":18,"tag":111,"props":416,"children":417},{},[418,420],{"type":23,"value":419},"server-side에서 middleware가 동작\n",{"type":18,"tag":378,"props":421,"children":422},{},[423,428],{"type":18,"tag":111,"props":424,"children":425},{},[426],{"type":23,"value":427},"마찬가지로 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":18,"tag":111,"props":429,"children":430},{},[431],{"type":23,"value":406},{"type":18,"tag":111,"props":433,"children":434},{},[435],{"type":23,"value":436},"같은 페이지로 리다이렉트 됐기 때문에 더이상 ssr은 실행되지 않고 csr이 실행된다.",{"type":18,"tag":111,"props":438,"children":439},{},[440,442],{"type":23,"value":441},"login 화면이 렌더링\n",{"type":18,"tag":378,"props":443,"children":444},{},[445],{"type":18,"tag":111,"props":446,"children":447},{},[448,450],{"type":23,"value":449},"client-side에서 middleware 동작\n",{"type":18,"tag":378,"props":451,"children":452},{},[453,458,463],{"type":18,"tag":111,"props":454,"children":455},{},[456],{"type":23,"value":457},"csr에서는 localstorage에 접근이 가능하기 때문에 authStore 정보를 얻어옴",{"type":18,"tag":111,"props":459,"children":460},{},[461],{"type":23,"value":462},"nonAuthPages에 포함됨",{"type":18,"tag":111,"props":464,"children":465},{},[466],{"type":23,"value":467},"navigateTo(’dashboard’)이 실행된다.",{"type":18,"tag":111,"props":469,"children":470},{},[471],{"type":23,"value":472},"dashboard 화면이 렌더링 (client-side에서 middleware 동작은 생략)",{"type":18,"tag":19,"props":474,"children":475},{},[476],{"type":23,"value":28},{"type":18,"tag":268,"props":478,"children":479},{},[480],{"type":18,"tag":19,"props":481,"children":482},{},[483,485,491,493,497,499,504],{"type":23,"value":484},"SSR 환경에서의 ",{"type":18,"tag":42,"props":486,"children":488},{"className":487},[],[489],{"type":23,"value":490},"navigateTo",{"type":23,"value":492},"는 먼저 서버 측에서 처리되고 그 후 클라이언트 측에서 렌더링된다.",{"type":18,"tag":494,"props":495,"children":496},"br",{},[],{"type":23,"value":498},"\n반면, CSR 환경에서의 ",{"type":18,"tag":42,"props":500,"children":502},{"className":501},[],[503],{"type":23,"value":490},{"type":23,"value":505},"는 클라이언트 측에서만 처리되며, 서버 측 처리는 발생하지 않는다.",{"type":18,"tag":19,"props":507,"children":508},{},[509],{"type":23,"value":28},{"type":18,"tag":165,"props":511,"children":513},{"src":512},"/blog/images/c73e1e77-f6f7-4c3c-a6c5-fb2273be0980.png",[],{"type":18,"tag":515,"props":516,"children":517},"hr",{},[],{"title":8,"searchDepth":61,"depth":61,"links":519},[520],{"id":373,"depth":61,"text":376},"content:posts:9ecb10c2-fa24-449c-ac39-8553ee942084.md","posts/9ecb10c2-fa24-449c-ac39-8553ee942084.md",{"_path":524,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":525,"description":526,"tags":527,"date":528,"body":529,"_type":63,"_id":602,"_source":65,"_file":603,"_extension":67},"/posts/7516dc85-4ccc-4f99-afc1-22f8115737df","Call, Apply, Bind","Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 명시적으로 바인딩 시키는 메소드이다.",[12],"2024-01-15T00:00:00.000Z",{"type":15,"children":530,"toc":598},[531,544,550,559,564,568,573,579,584,589],{"type":18,"tag":19,"props":532,"children":533},{},[534,536,542],{"type":23,"value":535},"Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 ",{"type":18,"tag":42,"props":537,"children":539},{"className":538},[],[540],{"type":23,"value":541},"명시적으로 바인딩",{"type":23,"value":543}," 시키는 메소드이다.",{"type":18,"tag":203,"props":545,"children":547},{"id":546},"먼저-call-apply를-코드로-살펴-보자",[548],{"type":23,"value":549},"먼저 Call, Apply를 코드로 살펴 보자",{"type":18,"tag":35,"props":551,"children":554},{"className":552,"code":553,"language":12,"meta":8},[38],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\ngreeting('seoul', 'listening to music'); // Hello my name is , I live in seoul. my hobby is listening to music.\ngreeting.apply(seungyoon, ['seoul', 'listening to music']); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music.\ngreeting.call(seungyoon, 'seoul', 'listening to music'); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music\n\n",[555],{"type":18,"tag":42,"props":556,"children":557},{"__ignoreMap":8},[558],{"type":23,"value":553},{"type":18,"tag":19,"props":560,"children":561},{},[562],{"type":23,"value":563},"이렇게 this 특정 객체에 명시적으로 바인딩 시키고 싶을 때 call, apply를 사용하면 된다.",{"type":18,"tag":165,"props":565,"children":567},{"src":566},"/blog/images/27937112-f0a1-4c3a-bc11-0c82e3f40f8a.png",[],{"type":18,"tag":19,"props":569,"children":570},{},[571],{"type":23,"value":572},"(여기서 call과 apply는 기능은 같지만 넘겨받는 인자의 형식만 다르다. call과 다르게 apply는 인자를 배열 형태로 받는다.)",{"type":18,"tag":203,"props":574,"children":576},{"id":575},"나머지-bind-함수를-살펴보자",[577],{"type":23,"value":578},"나머지 bind 함수를 살펴보자.",{"type":18,"tag":19,"props":580,"children":581},{},[582],{"type":23,"value":583},"이 함수는 call apply와 다르게 함수를 즉시 실행하지 않는다.",{"type":18,"tag":19,"props":585,"children":586},{},[587],{"type":23,"value":588},"아래 코드와 같이 변수에 담아 호출 할 수가 있다.",{"type":18,"tag":35,"props":590,"children":593},{"className":591,"code":592,"language":12,"meta":8},[38],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\nconst seungyoonGreeting = greeting.bind(seungyoon);\nseungyoonGreeting('seuol', 'listening to music'); // Hello my name is seungyoon, I live in seuol. my hobby is listening to music.\n\n",[594],{"type":18,"tag":42,"props":595,"children":596},{"__ignoreMap":8},[597],{"type":23,"value":592},{"title":8,"searchDepth":61,"depth":61,"links":599},[600,601],{"id":546,"depth":314,"text":549},{"id":575,"depth":314,"text":578},"content:posts:7516dc85-4ccc-4f99-afc1-22f8115737df.md","posts/7516dc85-4ccc-4f99-afc1-22f8115737df.md",{"_path":605,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":606,"description":8,"tags":607,"date":608,"body":609,"_type":63,"_id":624,"_source":65,"_file":625,"_extension":67},"/posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9","Property \"query\" was accessed during render but is not defined on instance",[73],"2024-01-05T00:00:00.000Z",{"type":15,"children":610,"toc":622},[611],{"type":18,"tag":35,"props":612,"children":617},{"className":613,"code":615,"language":616,"meta":8},[614],"language-css","// AS-IS\nconst { query } = defineProps();\n\n// TO-BE\nconst { query } = defineProps(['query']);\n\n","css",[618],{"type":18,"tag":42,"props":619,"children":620},{"__ignoreMap":8},[621],{"type":23,"value":615},{"title":8,"searchDepth":61,"depth":61,"links":623},[],"content:posts:ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md","posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md",{"_path":627,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":628,"description":629,"tags":630,"date":631,"body":632,"_type":63,"_id":709,"_source":65,"_file":710,"_extension":67},"/posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd","nuxt3 정적 사이트 github page에서 js파일들 404에러 날때","githubpage에 generage해서 올렸는데 자꾸 에러가 나는거다… 이유를 몰라서 밤새 검색했는데도 답이 안나오고",[73],"2024-01-03T00:00:00.000Z",{"type":15,"children":633,"toc":707},[634,638,642,646,651,660,664,669,680,684,689,694,698,703],{"type":18,"tag":19,"props":635,"children":636},{},[637],{"type":23,"value":629},{"type":18,"tag":165,"props":639,"children":641},{"src":640},"/blog/images/48101ebe-81b6-44ca-b848-fbd2eade3796.png",[],{"type":18,"tag":19,"props":643,"children":644},{},[645],{"type":23,"value":28},{"type":18,"tag":19,"props":647,"children":648},{},[649],{"type":23,"value":650},"결국 nuxt github issue에서 찾았다 ㅠㅠ",{"type":18,"tag":19,"props":652,"children":653},{},[654],{"type":18,"tag":115,"props":655,"children":658},{"href":656,"rel":657},"https://github.com/nuxt/nuxt/issues/10113",[119],[659],{"type":23,"value":656},{"type":18,"tag":19,"props":661,"children":662},{},[663],{"type":23,"value":28},{"type":18,"tag":19,"props":665,"children":666},{},[667],{"type":23,"value":668},".nojeklly",{"type":18,"tag":35,"props":670,"children":675},{"className":671,"code":673,"language":674,"meta":8},[672],"language-json","\"deploy\": \"nuxt generate && touch .output/public/.nojekyll && gh-pages --dotfiles -d .output/public”\n","json",[676],{"type":18,"tag":42,"props":677,"children":678},{"__ignoreMap":8},[679],{"type":23,"value":673},{"type":18,"tag":19,"props":681,"children":682},{},[683],{"type":23,"value":28},{"type":18,"tag":19,"props":685,"children":686},{},[687],{"type":23,"value":688},"결론은 generate하고 프로젝트 폴더안에 .nojekyll 파일이 있어야 되는거였다. (github page는 기본적으로 jekyll이라는 정적 사이트 생성기를 사용함)",{"type":18,"tag":19,"props":690,"children":691},{},[692],{"type":23,"value":693},".nojekyll 파일이 있으면 github 페이지는 jekyll 처리를 건너뜀.",{"type":18,"tag":19,"props":695,"children":696},{},[697],{"type":23,"value":28},{"type":18,"tag":19,"props":699,"children":700},{},[701],{"type":23,"value":702},"오늘의 개발 교훈: github issue를 잘 찾아보자!",{"type":18,"tag":19,"props":704,"children":705},{},[706],{"type":23,"value":28},{"title":8,"searchDepth":61,"depth":61,"links":708},[],"content:posts:d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md","posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md",{"_path":712,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":713,"description":714,"tags":715,"date":717,"body":718,"_type":63,"_id":923,"_source":65,"_file":924,"_extension":67},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[716],"ES6","2023-12-28T00:00:00.000Z",{"type":15,"children":719,"toc":914},[720,724,730,735,748,753,766,771,780,796,802,808,813,822,827,833,838,847,853,858,867,870,874,910],{"type":18,"tag":19,"props":721,"children":722},{},[723],{"type":23,"value":714},{"type":18,"tag":203,"props":725,"children":727},{"id":726},"클래스와-인스턴스객체",[728],{"type":23,"value":729},"클래스와 인스턴스(객체)",{"type":18,"tag":19,"props":731,"children":732},{},[733],{"type":23,"value":734},"클래스는 일종의 설계도이고 인스턴스는 클래스를 사용하여 생성한 실제 물건이다.",{"type":18,"tag":107,"props":736,"children":737},{},[738,743],{"type":18,"tag":111,"props":739,"children":740},{},[741],{"type":23,"value":742},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":18,"tag":111,"props":744,"children":745},{},[746],{"type":23,"value":747},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":18,"tag":19,"props":749,"children":750},{},[751],{"type":23,"value":752},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":18,"tag":107,"props":754,"children":755},{},[756,761],{"type":18,"tag":111,"props":757,"children":758},{},[759],{"type":23,"value":760},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":18,"tag":111,"props":762,"children":763},{},[764],{"type":23,"value":765},"이동수단(클래스) - 자동차(인스턴스)",{"type":18,"tag":19,"props":767,"children":768},{},[769],{"type":23,"value":770},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":18,"tag":35,"props":772,"children":775},{"className":773,"code":774,"language":12,"meta":8},[38],"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n",[776],{"type":18,"tag":42,"props":777,"children":778},{"__ignoreMap":8},[779],{"type":23,"value":774},{"type":18,"tag":268,"props":781,"children":782},{},[783],{"type":18,"tag":19,"props":784,"children":785},{},[786,788,794],{"type":23,"value":787},"+ 이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 추상화(Abstarction)라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 ",{"type":18,"tag":789,"props":790,"children":791},"em",{},[792],{"type":23,"value":793},"포착하는",{"type":23,"value":795}," 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":18,"tag":101,"props":797,"children":799},{"id":798},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[800],{"type":23,"value":801},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":18,"tag":203,"props":803,"children":805},{"id":804},"상속inheritance",[806],{"type":23,"value":807},"상속(inheritance)",{"type":18,"tag":19,"props":809,"children":810},{},[811],{"type":23,"value":812},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":18,"tag":35,"props":814,"children":817},{"className":815,"code":816,"language":12,"meta":8},[38],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[818],{"type":18,"tag":42,"props":819,"children":820},{"__ignoreMap":8},[821],{"type":23,"value":816},{"type":18,"tag":19,"props":823,"children":824},{},[825],{"type":23,"value":826},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":18,"tag":203,"props":828,"children":830},{"id":829},"다형성polymorphism",[831],{"type":23,"value":832},"다형성(Polymorphism)",{"type":18,"tag":19,"props":834,"children":835},{},[836],{"type":23,"value":837},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":18,"tag":35,"props":839,"children":842},{"className":840,"code":841,"language":12,"meta":8},[38],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[843],{"type":18,"tag":42,"props":844,"children":845},{"__ignoreMap":8},[846],{"type":23,"value":841},{"type":18,"tag":203,"props":848,"children":850},{"id":849},"캡슐화encapsulation",[851],{"type":23,"value":852},"캡슐화(Encapsulation)",{"type":18,"tag":19,"props":854,"children":855},{},[856],{"type":23,"value":857},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":18,"tag":35,"props":859,"children":862},{"className":860,"code":861,"language":12,"meta":8},[38],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[863],{"type":18,"tag":42,"props":864,"children":865},{"__ignoreMap":8},[866],{"type":23,"value":861},{"type":18,"tag":515,"props":868,"children":869},{},[],{"type":18,"tag":203,"props":871,"children":872},{"id":103},[873],{"type":23,"value":103},{"type":18,"tag":107,"props":875,"children":876},{},[877,882,891,901],{"type":18,"tag":111,"props":878,"children":879},{},[880],{"type":23,"value":881},"인사이드 자바스크립트",{"type":18,"tag":111,"props":883,"children":884},{},[885],{"type":18,"tag":115,"props":886,"children":889},{"href":887,"rel":888},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[119],[890],{"type":23,"value":887},{"type":18,"tag":111,"props":892,"children":893},{},[894],{"type":18,"tag":115,"props":895,"children":898},{"href":896,"rel":897},"http://www.opentutorials.org/module/2495/14037",[119],[899],{"type":23,"value":900},"www.opentutorials.org/module/2495/14037",{"type":18,"tag":111,"props":902,"children":903},{},[904],{"type":18,"tag":115,"props":905,"children":908},{"href":906,"rel":907},"https://victorydntmd.tistory.com/117",[119],[909],{"type":23,"value":906},{"type":18,"tag":19,"props":911,"children":912},{},[913],{"type":23,"value":28},{"title":8,"searchDepth":61,"depth":61,"links":915},[916,917],{"id":726,"depth":314,"text":729},{"id":798,"depth":61,"text":801,"children":918},[919,920,921,922],{"id":804,"depth":314,"text":807},{"id":829,"depth":314,"text":832},{"id":849,"depth":314,"text":852},{"id":103,"depth":314,"text":103},"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md",1707211007663]