[{"data":1,"prerenderedAt":877},["Reactive",2],{"content-query-nydz0E8puB":3},[4,80,273,475,556,578,663],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":14,"body":15,"_type":75,"_id":76,"_source":77,"_file":78,"_extension":79},"/posts/38527f39-69f6-4663-ba58-351831ed48b4","posts",false,"","nuxt3 $fetch","nuxt3에서는 $fetch는 ofetch라는 라이브러리를 사용하고 있다. (ofetch는 node, browser 환경 두군데서 같이 사용할 수 있다.)",[12,13],"nuxt","axios","2024-01-22T00:00:00.000Z",{"type":16,"children":17,"toc":71},"root",[18,25,30,35,48,54],{"type":19,"tag":20,"props":21,"children":22},"element","p",{},[23],{"type":24,"value":10},"text",{"type":19,"tag":20,"props":26,"children":27},{},[28],{"type":24,"value":29},"\\n",{"type":19,"tag":20,"props":31,"children":32},{},[33],{"type":24,"value":34},"그래서 기존 axios로 설정된 코드들을 뜯어 고쳤다.",{"type":19,"tag":36,"props":37,"children":42},"pre",{"className":38,"code":40,"language":41,"meta":8},[39],"language-javascript","// 기존\nimport axios from 'axios';\nimport type { AxiosInstance } from 'axios';\nimport {useAuthStore} from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const authStore = useAuthStore();\n    const axiosInstance: AxiosInstance = axios.create({\n        baseURL: config.BASE_URL,\n    });\n\n    axiosInstance.interceptors.request.use((config) => {\n        if (authStore.isAuthenticated) {\n            config.headers.Authorization = `Bearer ${authStore.token}`;\n        } else {\n            config.headers.Authorization = `Basic ${btoaClientInfo}`;\n        }\n        return config;\n    });\n\n    nuxtApp.provide('axios', axiosInstance);\n});\n\n// 수정\nimport { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const apiFetch = $fetch.create({\n        baseURL: config.BASE_URL,\n        onRequest({ options }) {\n            const authStore = useAuthStore();\n            if (authStore.isAuthenticated) {\n                options.headers = {\n                    Authorization: `Bearer ${authStore.token}`\n                };\n            } else {\n                options.headers = {\n                    Authorization: `Basic ${btoaClientInfo}`\n                };\n            }\n        }\n    })\n    \n    nuxtApp.provide('apiFetch', apiFetch);\n});\n","javascript",[43],{"type":19,"tag":44,"props":45,"children":46},"code",{"__ignoreMap":8},[47],{"type":24,"value":40},{"type":19,"tag":49,"props":50,"children":52},"h2",{"id":51},"참고",[53],{"type":24,"value":51},{"type":19,"tag":55,"props":56,"children":57},"ul",{},[58],{"type":19,"tag":59,"props":60,"children":61},"li",{},[62],{"type":19,"tag":63,"props":64,"children":68},"a",{"href":65,"rel":66},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-%EC%9D%98-%EC%B0%A8%EC%9D%B4",[67],"nofollow",[69],{"type":24,"value":70},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-의-차이",{"title":8,"searchDepth":72,"depth":72,"links":73},2,[74],{"id":51,"depth":72,"text":51},"markdown","content:posts:38527f39-69f6-4663-ba58-351831ed48b4.md","content","posts/38527f39-69f6-4663-ba58-351831ed48b4.md","md",{"_path":81,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":82,"description":83,"tags":84,"date":86,"body":87,"_type":75,"_id":271,"_source":77,"_file":272,"_extension":79},"/posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c","formData 전송 방법","axios를 $fetch로 변경하면서 로그인시 문제가 발생하였다.",[13,85],"$fetch","2024-01-18T00:00:00.000Z",{"type":16,"children":88,"toc":261},[89,93,97,102,111,116,121,125,130,139,143,148,154,169,178,192,197,206,210,215,219,244,248],{"type":19,"tag":20,"props":90,"children":91},{},[92],{"type":24,"value":83},{"type":19,"tag":20,"props":94,"children":95},{},[96],{"type":24,"value":29},{"type":19,"tag":20,"props":98,"children":99},{},[100],{"type":24,"value":101},"기존에 axios를 사용할때는 아래와 같이 사용중이고",{"type":19,"tag":36,"props":103,"children":106},{"className":104,"code":105,"language":41,"meta":8},[39],"await axios.post(url, qs.stringfy(payload));\n",[107],{"type":19,"tag":44,"props":108,"children":109},{"__ignoreMap":8},[110],{"type":24,"value":105},{"type":19,"tag":20,"props":112,"children":113},{},[114],{"type":24,"value":115},"전달된 형태를 보니 Form Data로 전송이 되고 있다.",{"type":19,"tag":117,"props":118,"children":120},"img",{"src":119},"/blog/images/04cb0105-dad5-4f5a-bba9-f688c20b3208.png",[],{"type":19,"tag":20,"props":122,"children":123},{},[124],{"type":24,"value":29},{"type":19,"tag":20,"props":126,"children":127},{},[128],{"type":24,"value":129},"$fetch는 아래와 같이 사용을 했는데",{"type":19,"tag":36,"props":131,"children":134},{"className":132,"code":133,"language":41,"meta":8},[39],"await apiFetch(url, {\n    method: 'POST',\n    body: qs.stringfy(payload)\n});\n",[135],{"type":19,"tag":44,"props":136,"children":137},{"__ignoreMap":8},[138],{"type":24,"value":133},{"type":19,"tag":117,"props":140,"children":142},{"src":141},"/blog/images/b63c01a1-58dd-4b89-b0e9-05096ceccb92.png",[],{"type":19,"tag":20,"props":144,"children":145},{},[146],{"type":24,"value":147},"이렇게 전달이 돼서 로그인이 안되는것이다.",{"type":19,"tag":49,"props":149,"children":151},{"id":150},"_2가지-해결법",[152],{"type":24,"value":153},"2가지 해결법",{"type":19,"tag":155,"props":156,"children":158},"h3",{"id":157},"_1-header에-content-type-applicationx-www-form-urlencoded-넣어주기",[159,161,167],{"type":24,"value":160},"1. header에 ",{"type":19,"tag":44,"props":162,"children":164},{"className":163},[],[165],{"type":24,"value":166},"'Content-Type': 'application/x-www-form-urlencoded'",{"type":24,"value":168},"  넣어주기",{"type":19,"tag":36,"props":170,"children":173},{"className":171,"code":172,"language":41,"meta":8},[39],"$fetch(url, {\n    method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n    body: qs.stringfy(payload)\n})\n",[174],{"type":19,"tag":44,"props":175,"children":176},{"__ignoreMap":8},[177],{"type":24,"value":172},{"type":19,"tag":155,"props":179,"children":181},{"id":180},"_2-new-urlsearchparams-사용",[182,184,190],{"type":24,"value":183},"2. ",{"type":19,"tag":44,"props":185,"children":187},{"className":186},[],[188],{"type":24,"value":189},"new URLSearchParams",{"type":24,"value":191}," 사용",{"type":19,"tag":20,"props":193,"children":194},{},[195],{"type":24,"value":196},"원래는 new FormData 만들어서 일일히 append 해줘야하는데 위 함수로 간편하게 만들어준다.",{"type":19,"tag":36,"props":198,"children":201},{"className":199,"code":200,"language":41,"meta":8},[39],"$fetch(url, {\n    method: 'POST',\n    body: new URLSearchParams(qs.stringfy(payload))\n});\n",[202],{"type":19,"tag":44,"props":203,"children":204},{"__ignoreMap":8},[205],{"type":24,"value":200},{"type":19,"tag":20,"props":207,"children":208},{},[209],{"type":24,"value":29},{"type":19,"tag":20,"props":211,"children":212},{},[213],{"type":24,"value":214},"나는 그냥 1번으로 사용하였다.",{"type":19,"tag":20,"props":216,"children":217},{},[218],{"type":24,"value":29},{"type":19,"tag":220,"props":221,"children":222},"blockquote",{},[223],{"type":19,"tag":20,"props":224,"children":225},{},[226,228,234,236,242],{"type":24,"value":227},"Axios를 사용할 때 별도의 설정이 없으면, ",{"type":19,"tag":44,"props":229,"children":231},{"className":230},[],[232],{"type":24,"value":233},"qs.stringify",{"type":24,"value":235},"를 사용하여 변환된 데이터는 ",{"type":19,"tag":44,"props":237,"children":239},{"className":238},[],[240],{"type":24,"value":241},"application/x-www-form-urlencoded",{"type":24,"value":243}," 형식으로 전송된다.",{"type":19,"tag":155,"props":245,"children":246},{"id":51},[247],{"type":24,"value":51},{"type":19,"tag":55,"props":249,"children":250},{},[251],{"type":19,"tag":59,"props":252,"children":253},{},[254],{"type":19,"tag":63,"props":255,"children":258},{"href":256,"rel":257},"https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-FormData-%EC%A0%95%EB%A6%AC-fetch-api",[67],[259],{"type":24,"value":260},"https://inpa.tistory.com/entry/JS-📚-FormData-정리-fetch-api",{"title":8,"searchDepth":72,"depth":72,"links":262},[263],{"id":150,"depth":72,"text":153,"children":264},[265,268,270],{"id":157,"depth":266,"text":267},3,"1. header에 'Content-Type': 'application/x-www-form-urlencoded'  넣어주기",{"id":180,"depth":266,"text":269},"2. new URLSearchParams 사용",{"id":51,"depth":266,"text":51},"content:posts:e9a8a610-ff29-4403-bbb0-55a5438aad7c.md","posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c.md",{"_path":274,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":275,"description":276,"tags":277,"date":280,"body":281,"_type":75,"_id":473,"_source":77,"_file":474,"_extension":79},"/posts/9ecb10c2-fa24-449c-ac39-8553ee942084","nuxt에서 localstorage 이슈","기존에 cookie에 auth 정보를 저장했을때는 미들웨어가 잘 동작을 했는데, 테스트상 localstorage에 저장을 해보니 미들웨어가 제대로 동작을 안한다.",[12,278,279],"ssr","middleware","2024-01-16T00:00:00.000Z",{"type":16,"children":282,"toc":470},[283,287,291,300,305,309,314,319,323,329,425,429,458,462,466],{"type":19,"tag":20,"props":284,"children":285},{},[286],{"type":24,"value":276},{"type":19,"tag":20,"props":288,"children":289},{},[290],{"type":24,"value":29},{"type":19,"tag":36,"props":292,"children":295},{"className":293,"code":294,"language":41,"meta":8},[39],"import { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtRouteMiddleware((to, from) => {\n\n    const authStore = useAuthStore();\n    const nonAuthPages = ['index', 'login'];\n    if (authStore.isAuthenticated) {\n        if (nonAuthPages.includes(to.name)) {\n            return navigateTo('/dashboard');\n        }\n    } else {\n        if (!nonAuthPages.includes(to.name)) {\n            return navigateTo('/login');\n        }\n    }\n}\n",[296],{"type":19,"tag":44,"props":297,"children":298},{"__ignoreMap":8},[299],{"type":24,"value":294},{"type":19,"tag":20,"props":301,"children":302},{},[303],{"type":24,"value":304},"위 코드를 보면 로그인하면 index, login 페이지 접근 못하게, 로그인 안하면 index, login을 제외한 나머지 페이지 접근 못하게 코드를 짰다.",{"type":19,"tag":20,"props":306,"children":307},{},[308],{"type":24,"value":29},{"type":19,"tag":20,"props":310,"children":311},{},[312],{"type":24,"value":313},"로그인한 상태에서는 organization으로 접근을 해야하는데 login 페이지를 거쳐서 dashboard로 이동을 한다.",{"type":19,"tag":20,"props":315,"children":316},{},[317],{"type":24,"value":318},"원인을 살펴보니 ssr에서 localStorage에 접근을 못하여 예상하지 못한 로직으로 흐름이 발생한거였다. (server-side에서는 cookie에만 접근이 가능하다.)",{"type":19,"tag":20,"props":320,"children":321},{},[322],{"type":24,"value":29},{"type":19,"tag":49,"props":324,"children":326},{"id":325},"localstorage에-auth정보-저장-시-흐름-isauthenticated는-true",[327],{"type":24,"value":328},"localStorage에 auth정보 저장 시 흐름 (isAuthenticated는 true)",{"type":19,"tag":330,"props":331,"children":332},"ol",{},[333,359,384,389,420],{"type":19,"tag":59,"props":334,"children":335},{},[336,338],{"type":24,"value":337},"organization 페이지에 접근\n",{"type":19,"tag":330,"props":339,"children":340},{},[341],{"type":19,"tag":59,"props":342,"children":343},{},[344,346],{"type":24,"value":345},"server-side에서 middleware 동작\n",{"type":19,"tag":330,"props":347,"children":348},{},[349,354],{"type":19,"tag":59,"props":350,"children":351},{},[352],{"type":24,"value":353},"이때 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":19,"tag":59,"props":355,"children":356},{},[357],{"type":24,"value":358},"navigateTo(’/login’)이 실행된다.",{"type":19,"tag":59,"props":360,"children":361},{},[362,364],{"type":24,"value":363},"login 페이지 접근\n",{"type":19,"tag":330,"props":365,"children":366},{},[367],{"type":19,"tag":59,"props":368,"children":369},{},[370,372],{"type":24,"value":371},"server-side에서 middleware가 동작\n",{"type":19,"tag":330,"props":373,"children":374},{},[375,380],{"type":19,"tag":59,"props":376,"children":377},{},[378],{"type":24,"value":379},"마찬가지로 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":19,"tag":59,"props":381,"children":382},{},[383],{"type":24,"value":358},{"type":19,"tag":59,"props":385,"children":386},{},[387],{"type":24,"value":388},"같은 페이지로 리다이렉트 됐기 때문에 더이상 ssr은 실행되지 않고 csr이 실행된다.",{"type":19,"tag":59,"props":390,"children":391},{},[392,394],{"type":24,"value":393},"login 화면이 렌더링\n",{"type":19,"tag":330,"props":395,"children":396},{},[397],{"type":19,"tag":59,"props":398,"children":399},{},[400,402],{"type":24,"value":401},"client-side에서 middleware 동작\n",{"type":19,"tag":330,"props":403,"children":404},{},[405,410,415],{"type":19,"tag":59,"props":406,"children":407},{},[408],{"type":24,"value":409},"csr에서는 localstorage에 접근이 가능하기 때문에 authStore 정보를 얻어옴",{"type":19,"tag":59,"props":411,"children":412},{},[413],{"type":24,"value":414},"nonAuthPages에 포함됨",{"type":19,"tag":59,"props":416,"children":417},{},[418],{"type":24,"value":419},"navigateTo(’dashboard’)이 실행된다.",{"type":19,"tag":59,"props":421,"children":422},{},[423],{"type":24,"value":424},"dashboard 화면이 렌더링 (client-side에서 middleware 동작은 생략)",{"type":19,"tag":20,"props":426,"children":427},{},[428],{"type":24,"value":29},{"type":19,"tag":220,"props":430,"children":431},{},[432],{"type":19,"tag":20,"props":433,"children":434},{},[435,437,443,445,449,451,456],{"type":24,"value":436},"SSR 환경에서의 ",{"type":19,"tag":44,"props":438,"children":440},{"className":439},[],[441],{"type":24,"value":442},"navigateTo",{"type":24,"value":444},"는 먼저 서버 측에서 처리되고 그 후 클라이언트 측에서 렌더링된다.",{"type":19,"tag":446,"props":447,"children":448},"br",{},[],{"type":24,"value":450},"\n반면, CSR 환경에서의 ",{"type":19,"tag":44,"props":452,"children":454},{"className":453},[],[455],{"type":24,"value":442},{"type":24,"value":457},"는 클라이언트 측에서만 처리되며, 서버 측 처리는 발생하지 않는다.",{"type":19,"tag":20,"props":459,"children":460},{},[461],{"type":24,"value":29},{"type":19,"tag":117,"props":463,"children":465},{"src":464},"/blog/images/19bcff6d-69fd-4f39-939b-94d737bf5b7f.png",[],{"type":19,"tag":467,"props":468,"children":469},"hr",{},[],{"title":8,"searchDepth":72,"depth":72,"links":471},[472],{"id":325,"depth":72,"text":328},"content:posts:9ecb10c2-fa24-449c-ac39-8553ee942084.md","posts/9ecb10c2-fa24-449c-ac39-8553ee942084.md",{"_path":476,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":477,"description":478,"tags":479,"date":480,"body":481,"_type":75,"_id":554,"_source":77,"_file":555,"_extension":79},"/posts/7516dc85-4ccc-4f99-afc1-22f8115737df","Call, Apply, Bind","Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 명시적으로 바인딩 시키는 메소드이다.",[41],"2024-01-15T00:00:00.000Z",{"type":16,"children":482,"toc":550},[483,496,502,511,516,520,525,531,536,541],{"type":19,"tag":20,"props":484,"children":485},{},[486,488,494],{"type":24,"value":487},"Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 ",{"type":19,"tag":44,"props":489,"children":491},{"className":490},[],[492],{"type":24,"value":493},"명시적으로 바인딩",{"type":24,"value":495}," 시키는 메소드이다.",{"type":19,"tag":155,"props":497,"children":499},{"id":498},"먼저-call-apply를-코드로-살펴-보자",[500],{"type":24,"value":501},"먼저 Call, Apply를 코드로 살펴 보자",{"type":19,"tag":36,"props":503,"children":506},{"className":504,"code":505,"language":41,"meta":8},[39],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\ngreeting('seoul', 'listening to music'); // Hello my name is , I live in seoul. my hobby is listening to music.\ngreeting.apply(seungyoon, ['seoul', 'listening to music']); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music.\ngreeting.call(seungyoon, 'seoul', 'listening to music'); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music\n\n",[507],{"type":19,"tag":44,"props":508,"children":509},{"__ignoreMap":8},[510],{"type":24,"value":505},{"type":19,"tag":20,"props":512,"children":513},{},[514],{"type":24,"value":515},"이렇게 this 특정 객체에 명시적으로 바인딩 시키고 싶을 때 call, apply를 사용하면 된다.",{"type":19,"tag":117,"props":517,"children":519},{"src":518},"/blog/images/c28e2489-ed77-40ff-95f2-c13708e23db7.png",[],{"type":19,"tag":20,"props":521,"children":522},{},[523],{"type":24,"value":524},"(여기서 call과 apply는 기능은 같지만 넘겨받는 인자의 형식만 다르다. call과 다르게 apply는 인자를 배열 형태로 받는다.)",{"type":19,"tag":155,"props":526,"children":528},{"id":527},"나머지-bind-함수를-살펴보자",[529],{"type":24,"value":530},"나머지 bind 함수를 살펴보자.",{"type":19,"tag":20,"props":532,"children":533},{},[534],{"type":24,"value":535},"이 함수는 call apply와 다르게 함수를 즉시 실행하지 않는다.",{"type":19,"tag":20,"props":537,"children":538},{},[539],{"type":24,"value":540},"아래 코드와 같이 변수에 담아 호출 할 수가 있다.",{"type":19,"tag":36,"props":542,"children":545},{"className":543,"code":544,"language":41,"meta":8},[39],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\nconst seungyoonGreeting = greeting.bind(seungyoon);\nseungyoonGreeting('seuol', 'listening to music'); // Hello my name is seungyoon, I live in seuol. my hobby is listening to music.\n\n",[546],{"type":19,"tag":44,"props":547,"children":548},{"__ignoreMap":8},[549],{"type":24,"value":544},{"title":8,"searchDepth":72,"depth":72,"links":551},[552,553],{"id":498,"depth":266,"text":501},{"id":527,"depth":266,"text":530},"content:posts:7516dc85-4ccc-4f99-afc1-22f8115737df.md","posts/7516dc85-4ccc-4f99-afc1-22f8115737df.md",{"_path":557,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":558,"description":8,"tags":559,"date":560,"body":561,"_type":75,"_id":576,"_source":77,"_file":577,"_extension":79},"/posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9","Property \"query\" was accessed during render but is not defined on instance",[12],"2024-01-05T00:00:00.000Z",{"type":16,"children":562,"toc":574},[563],{"type":19,"tag":36,"props":564,"children":569},{"className":565,"code":567,"language":568,"meta":8},[566],"language-css","// AS-IS\nconst { query } = defineProps();\n\n// TO-BE\nconst { query } = defineProps(['query']);\n\n","css",[570],{"type":19,"tag":44,"props":571,"children":572},{"__ignoreMap":8},[573],{"type":24,"value":567},{"title":8,"searchDepth":72,"depth":72,"links":575},[],"content:posts:ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md","posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md",{"_path":579,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":580,"description":581,"tags":582,"date":583,"body":584,"_type":75,"_id":661,"_source":77,"_file":662,"_extension":79},"/posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd","nuxt3 정적 사이트 github page에서 js파일들 404에러 날때","githubpage에 generage해서 올렸는데 자꾸 에러가 나는거다… 이유를 몰라서 밤새 검색했는데도 답이 안나오고",[12],"2024-01-03T00:00:00.000Z",{"type":16,"children":585,"toc":659},[586,590,594,598,603,612,616,621,632,636,641,646,650,655],{"type":19,"tag":20,"props":587,"children":588},{},[589],{"type":24,"value":581},{"type":19,"tag":117,"props":591,"children":593},{"src":592},"/blog/images/4c8bf05d-0425-4f07-afe4-95f0765eed5a.png",[],{"type":19,"tag":20,"props":595,"children":596},{},[597],{"type":24,"value":29},{"type":19,"tag":20,"props":599,"children":600},{},[601],{"type":24,"value":602},"결국 nuxt github issue에서 찾았다 ㅠㅠ",{"type":19,"tag":20,"props":604,"children":605},{},[606],{"type":19,"tag":63,"props":607,"children":610},{"href":608,"rel":609},"https://github.com/nuxt/nuxt/issues/10113",[67],[611],{"type":24,"value":608},{"type":19,"tag":20,"props":613,"children":614},{},[615],{"type":24,"value":29},{"type":19,"tag":20,"props":617,"children":618},{},[619],{"type":24,"value":620},".nojeklly",{"type":19,"tag":36,"props":622,"children":627},{"className":623,"code":625,"language":626,"meta":8},[624],"language-json","\"deploy\": \"nuxt generate && touch .output/public/.nojekyll && gh-pages --dotfiles -d .output/public”\n","json",[628],{"type":19,"tag":44,"props":629,"children":630},{"__ignoreMap":8},[631],{"type":24,"value":625},{"type":19,"tag":20,"props":633,"children":634},{},[635],{"type":24,"value":29},{"type":19,"tag":20,"props":637,"children":638},{},[639],{"type":24,"value":640},"결론은 generate하고 프로젝트 폴더안에 .nojekyll 파일이 있어야 되는거였다. (github page는 기본적으로 jekyll이라는 정적 사이트 생성기를 사용함)",{"type":19,"tag":20,"props":642,"children":643},{},[644],{"type":24,"value":645},".nojekyll 파일이 있으면 github 페이지는 jekyll 처리를 건너뜀.",{"type":19,"tag":20,"props":647,"children":648},{},[649],{"type":24,"value":29},{"type":19,"tag":20,"props":651,"children":652},{},[653],{"type":24,"value":654},"오늘의 개발 교훈: github issue를 잘 찾아보자!",{"type":19,"tag":20,"props":656,"children":657},{},[658],{"type":24,"value":29},{"title":8,"searchDepth":72,"depth":72,"links":660},[],"content:posts:d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md","posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md",{"_path":664,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":665,"description":666,"tags":667,"date":669,"body":670,"_type":75,"_id":875,"_source":77,"_file":876,"_extension":79},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[668],"ES6","2023-12-28T00:00:00.000Z",{"type":16,"children":671,"toc":866},[672,676,682,687,700,705,718,723,732,748,754,760,765,774,779,785,790,799,805,810,819,822,826,862],{"type":19,"tag":20,"props":673,"children":674},{},[675],{"type":24,"value":666},{"type":19,"tag":155,"props":677,"children":679},{"id":678},"클래스와-인스턴스객체",[680],{"type":24,"value":681},"클래스와 인스턴스(객체)",{"type":19,"tag":20,"props":683,"children":684},{},[685],{"type":24,"value":686},"클래스는 일종의 설계도이고 인스턴스는 클래스를 사용하여 생성한 실제 물건이다.",{"type":19,"tag":55,"props":688,"children":689},{},[690,695],{"type":19,"tag":59,"props":691,"children":692},{},[693],{"type":24,"value":694},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":19,"tag":59,"props":696,"children":697},{},[698],{"type":24,"value":699},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":19,"tag":20,"props":701,"children":702},{},[703],{"type":24,"value":704},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":19,"tag":55,"props":706,"children":707},{},[708,713],{"type":19,"tag":59,"props":709,"children":710},{},[711],{"type":24,"value":712},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":19,"tag":59,"props":714,"children":715},{},[716],{"type":24,"value":717},"이동수단(클래스) - 자동차(인스턴스)",{"type":19,"tag":20,"props":719,"children":720},{},[721],{"type":24,"value":722},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":19,"tag":36,"props":724,"children":727},{"className":725,"code":726,"language":41,"meta":8},[39],"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n",[728],{"type":19,"tag":44,"props":729,"children":730},{"__ignoreMap":8},[731],{"type":24,"value":726},{"type":19,"tag":220,"props":733,"children":734},{},[735],{"type":19,"tag":20,"props":736,"children":737},{},[738,740,746],{"type":24,"value":739},"+ 이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 추상화(Abstarction)라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 ",{"type":19,"tag":741,"props":742,"children":743},"em",{},[744],{"type":24,"value":745},"포착하는",{"type":24,"value":747}," 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":19,"tag":49,"props":749,"children":751},{"id":750},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[752],{"type":24,"value":753},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":19,"tag":155,"props":755,"children":757},{"id":756},"상속inheritance",[758],{"type":24,"value":759},"상속(inheritance)",{"type":19,"tag":20,"props":761,"children":762},{},[763],{"type":24,"value":764},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":19,"tag":36,"props":766,"children":769},{"className":767,"code":768,"language":41,"meta":8},[39],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[770],{"type":19,"tag":44,"props":771,"children":772},{"__ignoreMap":8},[773],{"type":24,"value":768},{"type":19,"tag":20,"props":775,"children":776},{},[777],{"type":24,"value":778},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":19,"tag":155,"props":780,"children":782},{"id":781},"다형성polymorphism",[783],{"type":24,"value":784},"다형성(Polymorphism)",{"type":19,"tag":20,"props":786,"children":787},{},[788],{"type":24,"value":789},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":19,"tag":36,"props":791,"children":794},{"className":792,"code":793,"language":41,"meta":8},[39],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[795],{"type":19,"tag":44,"props":796,"children":797},{"__ignoreMap":8},[798],{"type":24,"value":793},{"type":19,"tag":155,"props":800,"children":802},{"id":801},"캡슐화encapsulation",[803],{"type":24,"value":804},"캡슐화(Encapsulation)",{"type":19,"tag":20,"props":806,"children":807},{},[808],{"type":24,"value":809},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":19,"tag":36,"props":811,"children":814},{"className":812,"code":813,"language":41,"meta":8},[39],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[815],{"type":19,"tag":44,"props":816,"children":817},{"__ignoreMap":8},[818],{"type":24,"value":813},{"type":19,"tag":467,"props":820,"children":821},{},[],{"type":19,"tag":155,"props":823,"children":824},{"id":51},[825],{"type":24,"value":51},{"type":19,"tag":55,"props":827,"children":828},{},[829,834,843,853],{"type":19,"tag":59,"props":830,"children":831},{},[832],{"type":24,"value":833},"인사이드 자바스크립트",{"type":19,"tag":59,"props":835,"children":836},{},[837],{"type":19,"tag":63,"props":838,"children":841},{"href":839,"rel":840},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[67],[842],{"type":24,"value":839},{"type":19,"tag":59,"props":844,"children":845},{},[846],{"type":19,"tag":63,"props":847,"children":850},{"href":848,"rel":849},"http://www.opentutorials.org/module/2495/14037",[67],[851],{"type":24,"value":852},"www.opentutorials.org/module/2495/14037",{"type":19,"tag":59,"props":854,"children":855},{},[856],{"type":19,"tag":63,"props":857,"children":860},{"href":858,"rel":859},"https://victorydntmd.tistory.com/117",[67],[861],{"type":24,"value":858},{"type":19,"tag":20,"props":863,"children":864},{},[865],{"type":24,"value":29},{"title":8,"searchDepth":72,"depth":72,"links":867},[868,869],{"id":678,"depth":266,"text":681},{"id":750,"depth":72,"text":753,"children":870},[871,872,873,874],{"id":756,"depth":266,"text":759},{"id":781,"depth":266,"text":784},{"id":801,"depth":266,"text":804},{"id":51,"depth":266,"text":51},"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md",1710325995944]