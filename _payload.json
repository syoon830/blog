[{"data":1,"prerenderedAt":1208},["Reactive",2],{"content-query-nydz0E8puB":3},[4,80,273,475,556,874,896,981],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":14,"body":15,"_type":75,"_id":76,"_source":77,"_file":78,"_extension":79},"/posts/38527f39-69f6-4663-ba58-351831ed48b4","posts",false,"","nuxt3 $fetch","nuxt3에서는 $fetch는 ofetch라는 라이브러리를 사용하고 있다. (ofetch는 node, browser 환경 두군데서 같이 사용할 수 있다.)",[12,13],"nuxt","axios","2024-01-22T00:00:00.000Z",{"type":16,"children":17,"toc":71},"root",[18,25,30,35,48,54],{"type":19,"tag":20,"props":21,"children":22},"element","p",{},[23],{"type":24,"value":10},"text",{"type":19,"tag":20,"props":26,"children":27},{},[28],{"type":24,"value":29},"\\n",{"type":19,"tag":20,"props":31,"children":32},{},[33],{"type":24,"value":34},"그래서 기존 axios로 설정된 코드들을 뜯어 고쳤다.",{"type":19,"tag":36,"props":37,"children":42},"pre",{"className":38,"code":40,"language":41,"meta":8},[39],"language-javascript","// 기존\nimport axios from 'axios';\nimport type { AxiosInstance } from 'axios';\nimport {useAuthStore} from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const authStore = useAuthStore();\n    const axiosInstance: AxiosInstance = axios.create({\n        baseURL: config.BASE_URL,\n    });\n\n    axiosInstance.interceptors.request.use((config) => {\n        if (authStore.isAuthenticated) {\n            config.headers.Authorization = `Bearer ${authStore.token}`;\n        } else {\n            config.headers.Authorization = `Basic ${btoaClientInfo}`;\n        }\n        return config;\n    });\n\n    nuxtApp.provide('axios', axiosInstance);\n});\n\n// 수정\nimport { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const apiFetch = $fetch.create({\n        baseURL: config.BASE_URL,\n        onRequest({ options }) {\n            const authStore = useAuthStore();\n            if (authStore.isAuthenticated) {\n                options.headers = {\n                    Authorization: `Bearer ${authStore.token}`\n                };\n            } else {\n                options.headers = {\n                    Authorization: `Basic ${btoaClientInfo}`\n                };\n            }\n        }\n    })\n    \n    nuxtApp.provide('apiFetch', apiFetch);\n});\n","javascript",[43],{"type":19,"tag":44,"props":45,"children":46},"code",{"__ignoreMap":8},[47],{"type":24,"value":40},{"type":19,"tag":49,"props":50,"children":52},"h2",{"id":51},"참고",[53],{"type":24,"value":51},{"type":19,"tag":55,"props":56,"children":57},"ul",{},[58],{"type":19,"tag":59,"props":60,"children":61},"li",{},[62],{"type":19,"tag":63,"props":64,"children":68},"a",{"href":65,"rel":66},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-%EC%9D%98-%EC%B0%A8%EC%9D%B4",[67],"nofollow",[69],{"type":24,"value":70},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-의-차이",{"title":8,"searchDepth":72,"depth":72,"links":73},2,[74],{"id":51,"depth":72,"text":51},"markdown","content:posts:38527f39-69f6-4663-ba58-351831ed48b4.md","content","posts/38527f39-69f6-4663-ba58-351831ed48b4.md","md",{"_path":81,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":82,"description":83,"tags":84,"date":86,"body":87,"_type":75,"_id":271,"_source":77,"_file":272,"_extension":79},"/posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c","formData 전송 방법","axios를 $fetch로 변경하면서 로그인시 문제가 발생하였다.",[13,85],"$fetch","2024-01-18T00:00:00.000Z",{"type":16,"children":88,"toc":261},[89,93,97,102,111,116,121,125,130,139,143,148,154,169,178,192,197,206,210,215,219,244,248],{"type":19,"tag":20,"props":90,"children":91},{},[92],{"type":24,"value":83},{"type":19,"tag":20,"props":94,"children":95},{},[96],{"type":24,"value":29},{"type":19,"tag":20,"props":98,"children":99},{},[100],{"type":24,"value":101},"기존에 axios를 사용할때는 아래와 같이 사용중이고",{"type":19,"tag":36,"props":103,"children":106},{"className":104,"code":105,"language":41,"meta":8},[39],"await axios.post(url, qs.stringfy(payload));\n",[107],{"type":19,"tag":44,"props":108,"children":109},{"__ignoreMap":8},[110],{"type":24,"value":105},{"type":19,"tag":20,"props":112,"children":113},{},[114],{"type":24,"value":115},"전달된 형태를 보니 Form Data로 전송이 되고 있다.",{"type":19,"tag":117,"props":118,"children":120},"img",{"src":119},"https://prod-files-secure.s3.us-west-2.amazonaws.com/122c4317-821b-493a-85a2-3b119a538ecc/9dafbaca-364e-44e5-a781-a09ea600235f/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240122%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240122T081102Z&X-Amz-Expires=3600&X-Amz-Signature=55e60c1d56581e762fddc03051f2695acb9cc1c3de637c1c69d4367317a53867&X-Amz-SignedHeaders=host&x-id=GetObject",[],{"type":19,"tag":20,"props":122,"children":123},{},[124],{"type":24,"value":29},{"type":19,"tag":20,"props":126,"children":127},{},[128],{"type":24,"value":129},"$fetch는 아래와 같이 사용을 했는데",{"type":19,"tag":36,"props":131,"children":134},{"className":132,"code":133,"language":41,"meta":8},[39],"await apiFetch(url, {\n    method: 'POST',\n    body: qs.stringfy(payload)\n});\n",[135],{"type":19,"tag":44,"props":136,"children":137},{"__ignoreMap":8},[138],{"type":24,"value":133},{"type":19,"tag":117,"props":140,"children":142},{"src":141},"https://prod-files-secure.s3.us-west-2.amazonaws.com/122c4317-821b-493a-85a2-3b119a538ecc/4668e01f-3943-43c8-a597-0451918ee3ed/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240122%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240122T081102Z&X-Amz-Expires=3600&X-Amz-Signature=9e5849419f7e44fbb23a4e1cc2243df7de5345a18ac7d7a68473055edf85e31c&X-Amz-SignedHeaders=host&x-id=GetObject",[],{"type":19,"tag":20,"props":144,"children":145},{},[146],{"type":24,"value":147},"이렇게 전달이 돼서 로그인이 안되는것이다.",{"type":19,"tag":49,"props":149,"children":151},{"id":150},"_2가지-해결법",[152],{"type":24,"value":153},"2가지 해결법",{"type":19,"tag":155,"props":156,"children":158},"h3",{"id":157},"_1-header에-content-type-applicationx-www-form-urlencoded-넣어주기",[159,161,167],{"type":24,"value":160},"1. header에 ",{"type":19,"tag":44,"props":162,"children":164},{"className":163},[],[165],{"type":24,"value":166},"'Content-Type': 'application/x-www-form-urlencoded'",{"type":24,"value":168},"  넣어주기",{"type":19,"tag":36,"props":170,"children":173},{"className":171,"code":172,"language":41,"meta":8},[39],"$fetch(url, {\n    method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n    body: qs.stringfy(payload)\n})\n",[174],{"type":19,"tag":44,"props":175,"children":176},{"__ignoreMap":8},[177],{"type":24,"value":172},{"type":19,"tag":155,"props":179,"children":181},{"id":180},"_2-new-urlsearchparams-사용",[182,184,190],{"type":24,"value":183},"2. ",{"type":19,"tag":44,"props":185,"children":187},{"className":186},[],[188],{"type":24,"value":189},"new URLSearchParams",{"type":24,"value":191}," 사용",{"type":19,"tag":20,"props":193,"children":194},{},[195],{"type":24,"value":196},"원래는 new FormData 만들어서 일일히 append 해줘야하는데 위 함수로 간편하게 만들어준다.",{"type":19,"tag":36,"props":198,"children":201},{"className":199,"code":200,"language":41,"meta":8},[39],"$fetch(url, {\n    method: 'POST',\n    body: new URLSearchParams(qs.stringfy(payload))\n});\n",[202],{"type":19,"tag":44,"props":203,"children":204},{"__ignoreMap":8},[205],{"type":24,"value":200},{"type":19,"tag":20,"props":207,"children":208},{},[209],{"type":24,"value":29},{"type":19,"tag":20,"props":211,"children":212},{},[213],{"type":24,"value":214},"나는 그냥 1번으로 사용하였다.",{"type":19,"tag":20,"props":216,"children":217},{},[218],{"type":24,"value":29},{"type":19,"tag":220,"props":221,"children":222},"blockquote",{},[223],{"type":19,"tag":20,"props":224,"children":225},{},[226,228,234,236,242],{"type":24,"value":227},"Axios를 사용할 때 별도의 설정이 없으면, ",{"type":19,"tag":44,"props":229,"children":231},{"className":230},[],[232],{"type":24,"value":233},"qs.stringify",{"type":24,"value":235},"를 사용하여 변환된 데이터는 ",{"type":19,"tag":44,"props":237,"children":239},{"className":238},[],[240],{"type":24,"value":241},"application/x-www-form-urlencoded",{"type":24,"value":243}," 형식으로 전송된다.",{"type":19,"tag":155,"props":245,"children":246},{"id":51},[247],{"type":24,"value":51},{"type":19,"tag":55,"props":249,"children":250},{},[251],{"type":19,"tag":59,"props":252,"children":253},{},[254],{"type":19,"tag":63,"props":255,"children":258},{"href":256,"rel":257},"https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-FormData-%EC%A0%95%EB%A6%AC-fetch-api",[67],[259],{"type":24,"value":260},"https://inpa.tistory.com/entry/JS-📚-FormData-정리-fetch-api",{"title":8,"searchDepth":72,"depth":72,"links":262},[263],{"id":150,"depth":72,"text":153,"children":264},[265,268,270],{"id":157,"depth":266,"text":267},3,"1. header에 'Content-Type': 'application/x-www-form-urlencoded'  넣어주기",{"id":180,"depth":266,"text":269},"2. new URLSearchParams 사용",{"id":51,"depth":266,"text":51},"content:posts:e9a8a610-ff29-4403-bbb0-55a5438aad7c.md","posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c.md",{"_path":274,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":275,"description":276,"tags":277,"date":280,"body":281,"_type":75,"_id":473,"_source":77,"_file":474,"_extension":79},"/posts/9ecb10c2-fa24-449c-ac39-8553ee942084","nuxt에서 localstorage 이슈","기존에 cookie에 auth 정보를 저장했을때는 미들웨어가 잘 동작을 했는데, 테스트상 localstorage에 저장을 해보니 미들웨어가 제대로 동작을 안한다.",[12,278,279],"ssr","middleware","2024-01-16T00:00:00.000Z",{"type":16,"children":282,"toc":470},[283,287,291,300,305,309,314,319,323,329,425,429,458,462,466],{"type":19,"tag":20,"props":284,"children":285},{},[286],{"type":24,"value":276},{"type":19,"tag":20,"props":288,"children":289},{},[290],{"type":24,"value":29},{"type":19,"tag":36,"props":292,"children":295},{"className":293,"code":294,"language":41,"meta":8},[39],"import { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtRouteMiddleware((to, from) => {\n\n    const authStore = useAuthStore();\n    const nonAuthPages = ['index', 'login'];\n    if (authStore.isAuthenticated) {\n        if (nonAuthPages.includes(to.name)) {\n            return navigateTo('/dashboard');\n        }\n    } else {\n        if (!nonAuthPages.includes(to.name)) {\n            return navigateTo('/login');\n        }\n    }\n}\n",[296],{"type":19,"tag":44,"props":297,"children":298},{"__ignoreMap":8},[299],{"type":24,"value":294},{"type":19,"tag":20,"props":301,"children":302},{},[303],{"type":24,"value":304},"위 코드를 보면 로그인하면 index, login 페이지 접근 못하게, 로그인 안하면 index, login을 제외한 나머지 페이지 접근 못하게 코드를 짰다.",{"type":19,"tag":20,"props":306,"children":307},{},[308],{"type":24,"value":29},{"type":19,"tag":20,"props":310,"children":311},{},[312],{"type":24,"value":313},"로그인한 상태에서는 organization으로 접근을 해야하는데 login 페이지를 거쳐서 dashboard로 이동을 한다.",{"type":19,"tag":20,"props":315,"children":316},{},[317],{"type":24,"value":318},"원인을 살펴보니 ssr에서 localStorage에 접근을 못하여 예상하지 못한 로직으로 흐름이 발생한거였다. (server-side에서는 cookie에만 접근이 가능하다.)",{"type":19,"tag":20,"props":320,"children":321},{},[322],{"type":24,"value":29},{"type":19,"tag":49,"props":324,"children":326},{"id":325},"localstorage에-auth정보-저장-시-흐름-isauthenticated는-true",[327],{"type":24,"value":328},"localStorage에 auth정보 저장 시 흐름 (isAuthenticated는 true)",{"type":19,"tag":330,"props":331,"children":332},"ol",{},[333,359,384,389,420],{"type":19,"tag":59,"props":334,"children":335},{},[336,338],{"type":24,"value":337},"organization 페이지에 접근\n",{"type":19,"tag":330,"props":339,"children":340},{},[341],{"type":19,"tag":59,"props":342,"children":343},{},[344,346],{"type":24,"value":345},"server-side에서 middleware 동작\n",{"type":19,"tag":330,"props":347,"children":348},{},[349,354],{"type":19,"tag":59,"props":350,"children":351},{},[352],{"type":24,"value":353},"이때 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":19,"tag":59,"props":355,"children":356},{},[357],{"type":24,"value":358},"navigateTo(’/login’)이 실행된다.",{"type":19,"tag":59,"props":360,"children":361},{},[362,364],{"type":24,"value":363},"login 페이지 접근\n",{"type":19,"tag":330,"props":365,"children":366},{},[367],{"type":19,"tag":59,"props":368,"children":369},{},[370,372],{"type":24,"value":371},"server-side에서 middleware가 동작\n",{"type":19,"tag":330,"props":373,"children":374},{},[375,380],{"type":19,"tag":59,"props":376,"children":377},{},[378],{"type":24,"value":379},"마찬가지로 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":19,"tag":59,"props":381,"children":382},{},[383],{"type":24,"value":358},{"type":19,"tag":59,"props":385,"children":386},{},[387],{"type":24,"value":388},"같은 페이지로 리다이렉트 됐기 때문에 더이상 ssr은 실행되지 않고 csr이 실행된다.",{"type":19,"tag":59,"props":390,"children":391},{},[392,394],{"type":24,"value":393},"login 화면이 렌더링\n",{"type":19,"tag":330,"props":395,"children":396},{},[397],{"type":19,"tag":59,"props":398,"children":399},{},[400,402],{"type":24,"value":401},"client-side에서 middleware 동작\n",{"type":19,"tag":330,"props":403,"children":404},{},[405,410,415],{"type":19,"tag":59,"props":406,"children":407},{},[408],{"type":24,"value":409},"csr에서는 localstorage에 접근이 가능하기 때문에 authStore 정보를 얻어옴",{"type":19,"tag":59,"props":411,"children":412},{},[413],{"type":24,"value":414},"nonAuthPages에 포함됨",{"type":19,"tag":59,"props":416,"children":417},{},[418],{"type":24,"value":419},"navigateTo(’dashboard’)이 실행된다.",{"type":19,"tag":59,"props":421,"children":422},{},[423],{"type":24,"value":424},"dashboard 화면이 렌더링 (client-side에서 middleware 동작은 생략)",{"type":19,"tag":20,"props":426,"children":427},{},[428],{"type":24,"value":29},{"type":19,"tag":220,"props":430,"children":431},{},[432],{"type":19,"tag":20,"props":433,"children":434},{},[435,437,443,445,449,451,456],{"type":24,"value":436},"SSR 환경에서의 ",{"type":19,"tag":44,"props":438,"children":440},{"className":439},[],[441],{"type":24,"value":442},"navigateTo",{"type":24,"value":444},"는 먼저 서버 측에서 처리되고 그 후 클라이언트 측에서 렌더링된다.",{"type":19,"tag":446,"props":447,"children":448},"br",{},[],{"type":24,"value":450},"\n반면, CSR 환경에서의 ",{"type":19,"tag":44,"props":452,"children":454},{"className":453},[],[455],{"type":24,"value":442},{"type":24,"value":457},"는 클라이언트 측에서만 처리되며, 서버 측 처리는 발생하지 않는다.",{"type":19,"tag":20,"props":459,"children":460},{},[461],{"type":24,"value":29},{"type":19,"tag":117,"props":463,"children":465},{"src":464},"https://prod-files-secure.s3.us-west-2.amazonaws.com/122c4317-821b-493a-85a2-3b119a538ecc/c53bc20f-b01a-4db9-b0c9-1d69b53e1108/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240122%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240122T081104Z&X-Amz-Expires=3600&X-Amz-Signature=7f68d3e8550d64e437dcd5a9e2c3ae1cd2ea810f596670b3c4da36e08f893da2&X-Amz-SignedHeaders=host&x-id=GetObject",[],{"type":19,"tag":467,"props":468,"children":469},"hr",{},[],{"title":8,"searchDepth":72,"depth":72,"links":471},[472],{"id":325,"depth":72,"text":328},"content:posts:9ecb10c2-fa24-449c-ac39-8553ee942084.md","posts/9ecb10c2-fa24-449c-ac39-8553ee942084.md",{"_path":476,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":477,"description":478,"tags":479,"date":480,"body":481,"_type":75,"_id":554,"_source":77,"_file":555,"_extension":79},"/posts/7516dc85-4ccc-4f99-afc1-22f8115737df","Call, Apply, Bind","Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 명시적으로 바인딩 시키는 메소드이다.",[41],"2024-01-15T00:00:00.000Z",{"type":16,"children":482,"toc":550},[483,496,502,511,516,520,525,531,536,541],{"type":19,"tag":20,"props":484,"children":485},{},[486,488,494],{"type":24,"value":487},"Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 ",{"type":19,"tag":44,"props":489,"children":491},{"className":490},[],[492],{"type":24,"value":493},"명시적으로 바인딩",{"type":24,"value":495}," 시키는 메소드이다.",{"type":19,"tag":155,"props":497,"children":499},{"id":498},"먼저-call-apply를-코드로-살펴-보자",[500],{"type":24,"value":501},"먼저 Call, Apply를 코드로 살펴 보자",{"type":19,"tag":36,"props":503,"children":506},{"className":504,"code":505,"language":41,"meta":8},[39],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\ngreeting('seoul', 'listening to music'); // Hello my name is , I live in seoul. my hobby is listening to music.\ngreeting.apply(seungyoon, ['seoul', 'listening to music']); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music.\ngreeting.call(seungyoon, 'seoul', 'listening to music'); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music\n\n",[507],{"type":19,"tag":44,"props":508,"children":509},{"__ignoreMap":8},[510],{"type":24,"value":505},{"type":19,"tag":20,"props":512,"children":513},{},[514],{"type":24,"value":515},"이렇게 this 특정 객체에 명시적으로 바인딩 시키고 싶을 때 call, apply를 사용하면 된다.",{"type":19,"tag":117,"props":517,"children":519},{"src":518},"https://prod-files-secure.s3.us-west-2.amazonaws.com/122c4317-821b-493a-85a2-3b119a538ecc/2346c1d6-7e79-4eb9-9485-7aad2a343415/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240122%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240122T081108Z&X-Amz-Expires=3600&X-Amz-Signature=819c2a9ee92e0eb465a2eb5e7f7e8cc0b766410d39b04c3e0c82cf2f60d505c0&X-Amz-SignedHeaders=host&x-id=GetObject",[],{"type":19,"tag":20,"props":521,"children":522},{},[523],{"type":24,"value":524},"(여기서 call과 apply는 기능은 같지만 넘겨받는 인자의 형식만 다르다. call과 다르게 apply는 인자를 배열 형태로 받는다.)",{"type":19,"tag":155,"props":526,"children":528},{"id":527},"나머지-bind-함수를-살펴보자",[529],{"type":24,"value":530},"나머지 bind 함수를 살펴보자.",{"type":19,"tag":20,"props":532,"children":533},{},[534],{"type":24,"value":535},"이 함수는 call apply와 다르게 함수를 즉시 실행하지 않는다.",{"type":19,"tag":20,"props":537,"children":538},{},[539],{"type":24,"value":540},"아래 코드와 같이 변수에 담아 호출 할 수가 있다.",{"type":19,"tag":36,"props":542,"children":545},{"className":543,"code":544,"language":41,"meta":8},[39],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\nconst seungyoonGreeting = greeting.bind(seungyoon);\nseungyoonGreeting('seuol', 'listening to music'); // Hello my name is seungyoon, I live in seuol. my hobby is listening to music.\n\n",[546],{"type":19,"tag":44,"props":547,"children":548},{"__ignoreMap":8},[549],{"type":24,"value":544},{"title":8,"searchDepth":72,"depth":72,"links":551},[552,553],{"id":498,"depth":266,"text":501},{"id":527,"depth":266,"text":530},"content:posts:7516dc85-4ccc-4f99-afc1-22f8115737df.md","posts/7516dc85-4ccc-4f99-afc1-22f8115737df.md",{"_path":557,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":558,"description":559,"tags":560,"date":562,"body":563,"_type":75,"_id":872,"_source":77,"_file":873,"_extension":79},"/posts/f8128924-3314-4bbc-9acd-4e7fcab8969a","화살표 함수(=>)","function 키워드 대신 화살표(=>)를 사용하는 방식의 함수",[561],"ES6","2024-01-14T00:00:00.000Z",{"type":16,"children":564,"toc":858},[565,569,578,583,588,597,603,608,614,623,628,636,641,650,655,661,667,679,688,699,708,719,728,734,744,753,763,771,777,786,792,802,811,821,830,834,837,842,854],{"type":19,"tag":20,"props":566,"children":567},{},[568],{"type":24,"value":559},{"type":19,"tag":36,"props":570,"children":573},{"className":571,"code":572,"language":41,"meta":8},[39],"// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n",[574],{"type":19,"tag":44,"props":575,"children":576},{"__ignoreMap":8},[577],{"type":24,"value":572},{"type":19,"tag":20,"props":579,"children":580},{},[581],{"type":24,"value":582},"※ 그렇다고 모든 경우에 화살표 함수를 사용하면 안 됨 (아래에서 확인)",{"type":19,"tag":49,"props":584,"children":586},{"id":585},"문법",[587],{"type":24,"value":585},{"type":19,"tag":36,"props":589,"children":592},{"className":590,"code":591,"language":41,"meta":8},[39],"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n",[593],{"type":19,"tag":44,"props":594,"children":595},{"__ignoreMap":8},[596],{"type":24,"value":591},{"type":19,"tag":49,"props":598,"children":600},{"id":599},"일반-함수funciton와-화살표-함수-차이점",[601],{"type":24,"value":602},"일반 함수(funciton)와 화살표 함수(=>) 차이점",{"type":19,"tag":20,"props":604,"children":605},{},[606],{"type":24,"value":607},"가장 큰 차이점은 this인데 코드를 보며 확인해 보자.",{"type":19,"tag":155,"props":609,"children":611},{"id":610},"일반-함수function",[612],{"type":24,"value":613},"일반 함수(function)",{"type":19,"tag":36,"props":615,"children":618},{"className":616,"code":617,"language":41,"meta":8},[39],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n",[619],{"type":19,"tag":44,"props":620,"children":621},{"__ignoreMap":8},[622],{"type":24,"value":617},{"type":19,"tag":20,"props":624,"children":625},{},[626],{"type":24,"value":627},"위 코드를 보게 되면 map 안에 this를 찍어보면 Window를 가르키고 있다. 기본적으로 내부 함수 this는 Window를 가르킨다.",{"type":19,"tag":55,"props":629,"children":630},{},[631],{"type":19,"tag":59,"props":632,"children":633},{},[634],{"type":24,"value":635},"생성자 함수와 객체의 메소드를 제외한 모든 함수(내부 함수, 콜백 함수 포함) 내부의 this는 전역 객체(Window)를 가르키기 때문이다.",{"type":19,"tag":155,"props":637,"children":639},{"id":638},"화살표-함수",[640],{"type":24,"value":558},{"type":19,"tag":36,"props":642,"children":645},{"className":643,"code":644,"language":41,"meta":8},[39],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n",[646],{"type":19,"tag":44,"props":647,"children":648},{"__ignoreMap":8},[649],{"type":24,"value":644},{"type":19,"tag":20,"props":651,"children":652},{},[653],{"type":24,"value":654},"위 코드와 다르게 map 안에 this는 Prexier를 가르킨다. 이는 화살표 함수의 this는 언제나 상위 스코프의 this를 가르키기 때문이다.",{"type":19,"tag":49,"props":656,"children":658},{"id":657},"화살표-함수를-사용해서는-안되는-경우",[659],{"type":24,"value":660},"화살표 함수를 사용해서는 안되는 경우",{"type":19,"tag":155,"props":662,"children":664},{"id":663},"_1-메소드",[665],{"type":24,"value":666},"1. 메소드",{"type":19,"tag":220,"props":668,"children":669},{},[670],{"type":19,"tag":20,"props":671,"children":672},{},[673],{"type":19,"tag":674,"props":675,"children":676},"strong",{},[677],{"type":24,"value":678},"bad",{"type":19,"tag":36,"props":680,"children":683},{"className":681,"code":682,"language":41,"meta":8},[39],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n",[684],{"type":19,"tag":44,"props":685,"children":686},{"__ignoreMap":8},[687],{"type":24,"value":682},{"type":19,"tag":220,"props":689,"children":690},{},[691],{"type":19,"tag":20,"props":692,"children":693},{},[694],{"type":19,"tag":674,"props":695,"children":696},{},[697],{"type":24,"value":698},"good",{"type":19,"tag":36,"props":700,"children":703},{"className":701,"code":702,"language":41,"meta":8},[39],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[704],{"type":19,"tag":44,"props":705,"children":706},{"__ignoreMap":8},[707],{"type":24,"value":702},{"type":19,"tag":220,"props":709,"children":710},{},[711],{"type":19,"tag":20,"props":712,"children":713},{},[714],{"type":19,"tag":674,"props":715,"children":716},{},[717],{"type":24,"value":718},"best",{"type":19,"tag":36,"props":720,"children":723},{"className":721,"code":722,"language":41,"meta":8},[39],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[724],{"type":19,"tag":44,"props":725,"children":726},{"__ignoreMap":8},[727],{"type":24,"value":722},{"type":19,"tag":155,"props":729,"children":731},{"id":730},"_2-prototype",[732],{"type":24,"value":733},"2. prototype",{"type":19,"tag":220,"props":735,"children":736},{},[737],{"type":19,"tag":20,"props":738,"children":739},{},[740],{"type":19,"tag":674,"props":741,"children":742},{},[743],{"type":24,"value":678},{"type":19,"tag":36,"props":745,"children":748},{"className":746,"code":747,"language":41,"meta":8},[39],"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n",[749],{"type":19,"tag":44,"props":750,"children":751},{"__ignoreMap":8},[752],{"type":24,"value":747},{"type":19,"tag":220,"props":754,"children":755},{},[756],{"type":19,"tag":20,"props":757,"children":758},{},[759],{"type":19,"tag":674,"props":760,"children":761},{},[762],{"type":24,"value":698},{"type":19,"tag":36,"props":764,"children":766},{"className":765,"code":747,"language":41,"meta":8},[39],[767],{"type":19,"tag":44,"props":768,"children":769},{"__ignoreMap":8},[770],{"type":24,"value":747},{"type":19,"tag":155,"props":772,"children":774},{"id":773},"_3-생성자-함수",[775],{"type":24,"value":776},"3. 생성자 함수",{"type":19,"tag":36,"props":778,"children":781},{"className":779,"code":780,"language":41,"meta":8},[39],"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n",[782],{"type":19,"tag":44,"props":783,"children":784},{"__ignoreMap":8},[785],{"type":24,"value":780},{"type":19,"tag":155,"props":787,"children":789},{"id":788},"_4-addeventlistener-함수의-콜백-함수",[790],{"type":24,"value":791},"4. addEventListener 함수의 콜백 함수",{"type":19,"tag":220,"props":793,"children":794},{},[795],{"type":19,"tag":20,"props":796,"children":797},{},[798],{"type":19,"tag":674,"props":799,"children":800},{},[801],{"type":24,"value":678},{"type":19,"tag":36,"props":803,"children":806},{"className":804,"code":805,"language":41,"meta":8},[39],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n",[807],{"type":19,"tag":44,"props":808,"children":809},{"__ignoreMap":8},[810],{"type":24,"value":805},{"type":19,"tag":220,"props":812,"children":813},{},[814],{"type":19,"tag":20,"props":815,"children":816},{},[817],{"type":19,"tag":674,"props":818,"children":819},{},[820],{"type":24,"value":698},{"type":19,"tag":36,"props":822,"children":825},{"className":823,"code":824,"language":41,"meta":8},[39],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n",[826],{"type":19,"tag":44,"props":827,"children":828},{"__ignoreMap":8},[829],{"type":24,"value":824},{"type":19,"tag":20,"props":831,"children":832},{},[833],{"type":24,"value":29},{"type":19,"tag":467,"props":835,"children":836},{},[],{"type":19,"tag":155,"props":838,"children":839},{"id":51},[840],{"type":24,"value":841},"참고:",{"type":19,"tag":55,"props":843,"children":844},{},[845],{"type":19,"tag":59,"props":846,"children":847},{},[848],{"type":19,"tag":63,"props":849,"children":852},{"href":850,"rel":851},"https://poiemaweb.com/es6-arrow-function",[67],[853],{"type":24,"value":850},{"type":19,"tag":20,"props":855,"children":856},{},[857],{"type":24,"value":29},{"title":8,"searchDepth":72,"depth":72,"links":859},[860,861,865],{"id":585,"depth":72,"text":585},{"id":599,"depth":72,"text":602,"children":862},[863,864],{"id":610,"depth":266,"text":613},{"id":638,"depth":266,"text":558},{"id":657,"depth":72,"text":660,"children":866},[867,868,869,870,871],{"id":663,"depth":266,"text":666},{"id":730,"depth":266,"text":733},{"id":773,"depth":266,"text":776},{"id":788,"depth":266,"text":791},{"id":51,"depth":266,"text":841},"content:posts:f8128924-3314-4bbc-9acd-4e7fcab8969a.md","posts/f8128924-3314-4bbc-9acd-4e7fcab8969a.md",{"_path":875,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":876,"description":8,"tags":877,"date":878,"body":879,"_type":75,"_id":894,"_source":77,"_file":895,"_extension":79},"/posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9","Property \"query\" was accessed during render but is not defined on instance",[12],"2024-01-05T00:00:00.000Z",{"type":16,"children":880,"toc":892},[881],{"type":19,"tag":36,"props":882,"children":887},{"className":883,"code":885,"language":886,"meta":8},[884],"language-css","// AS-IS\nconst { query } = defineProps();\n\n// TO-BE\nconst { query } = defineProps(['query']);\n\n","css",[888],{"type":19,"tag":44,"props":889,"children":890},{"__ignoreMap":8},[891],{"type":24,"value":885},{"title":8,"searchDepth":72,"depth":72,"links":893},[],"content:posts:ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md","posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md",{"_path":897,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":898,"description":899,"tags":900,"date":901,"body":902,"_type":75,"_id":979,"_source":77,"_file":980,"_extension":79},"/posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd","nuxt3 정적 사이트 github page에서 js파일들 404에러 날때","githubpage에 generage해서 올렸는데 자꾸 에러가 나는거다… 이유를 몰라서 밤새 검색했는데도 답이 안나오고",[12],"2024-01-03T00:00:00.000Z",{"type":16,"children":903,"toc":977},[904,908,912,916,921,930,934,939,950,954,959,964,968,973],{"type":19,"tag":20,"props":905,"children":906},{},[907],{"type":24,"value":899},{"type":19,"tag":117,"props":909,"children":911},{"src":910},"https://prod-files-secure.s3.us-west-2.amazonaws.com/122c4317-821b-493a-85a2-3b119a538ecc/fe6c9a49-b3bc-4656-b606-896c26f1f958/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240122%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240122T081107Z&X-Amz-Expires=3600&X-Amz-Signature=567074655c1b78ef4a89345cf91501e256f5ed4519597a6638721367bfd571b5&X-Amz-SignedHeaders=host&x-id=GetObject",[],{"type":19,"tag":20,"props":913,"children":914},{},[915],{"type":24,"value":29},{"type":19,"tag":20,"props":917,"children":918},{},[919],{"type":24,"value":920},"결국 nuxt github issue에서 찾았다 ㅠㅠ",{"type":19,"tag":20,"props":922,"children":923},{},[924],{"type":19,"tag":63,"props":925,"children":928},{"href":926,"rel":927},"https://github.com/nuxt/nuxt/issues/10113",[67],[929],{"type":24,"value":926},{"type":19,"tag":20,"props":931,"children":932},{},[933],{"type":24,"value":29},{"type":19,"tag":20,"props":935,"children":936},{},[937],{"type":24,"value":938},".nojeklly",{"type":19,"tag":36,"props":940,"children":945},{"className":941,"code":943,"language":944,"meta":8},[942],"language-json","\"deploy\": \"nuxt generate && touch .output/public/.nojekyll && gh-pages --dotfiles -d .output/public”\n","json",[946],{"type":19,"tag":44,"props":947,"children":948},{"__ignoreMap":8},[949],{"type":24,"value":943},{"type":19,"tag":20,"props":951,"children":952},{},[953],{"type":24,"value":29},{"type":19,"tag":20,"props":955,"children":956},{},[957],{"type":24,"value":958},"결론은 generate하고 프로젝트 폴더안에 .nojekyll 파일이 있어야 되는거였다. (github page는 기본적으로 jekyll이라는 정적 사이트 생성기를 사용함)",{"type":19,"tag":20,"props":960,"children":961},{},[962],{"type":24,"value":963},".nojekyll 파일이 있으면 github 페이지는 jekyll 처리를 건너뜀.",{"type":19,"tag":20,"props":965,"children":966},{},[967],{"type":24,"value":29},{"type":19,"tag":20,"props":969,"children":970},{},[971],{"type":24,"value":972},"오늘의 개발 교훈: github issue를 잘 찾아보자!",{"type":19,"tag":20,"props":974,"children":975},{},[976],{"type":24,"value":29},{"title":8,"searchDepth":72,"depth":72,"links":978},[],"content:posts:d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md","posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md",{"_path":982,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":983,"description":984,"tags":985,"date":986,"body":987,"_type":75,"_id":1206,"_source":77,"_file":1207,"_extension":79},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[561],"2023-12-28T00:00:00.000Z",{"type":16,"children":988,"toc":1197},[989,993,999,1011,1024,1029,1042,1047,1056,1079,1085,1091,1096,1105,1110,1116,1121,1130,1136,1141,1150,1153,1157,1193],{"type":19,"tag":20,"props":990,"children":991},{},[992],{"type":24,"value":984},{"type":19,"tag":155,"props":994,"children":996},{"id":995},"클래스와-인스턴스객체",[997],{"type":24,"value":998},"클래스와 인스턴스(객체)",{"type":19,"tag":20,"props":1000,"children":1001},{},[1002,1004,1009],{"type":24,"value":1003},"클래스는 일종의 설계도이고 ",{"type":19,"tag":674,"props":1005,"children":1006},{},[1007],{"type":24,"value":1008},"인스턴스는",{"type":24,"value":1010}," 클래스를 사용하여 생성한 실제 물건이다.",{"type":19,"tag":55,"props":1012,"children":1013},{},[1014,1019],{"type":19,"tag":59,"props":1015,"children":1016},{},[1017],{"type":24,"value":1018},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":19,"tag":59,"props":1020,"children":1021},{},[1022],{"type":24,"value":1023},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":19,"tag":20,"props":1025,"children":1026},{},[1027],{"type":24,"value":1028},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":19,"tag":55,"props":1030,"children":1031},{},[1032,1037],{"type":19,"tag":59,"props":1033,"children":1034},{},[1035],{"type":24,"value":1036},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":19,"tag":59,"props":1038,"children":1039},{},[1040],{"type":24,"value":1041},"이동수단(클래스) - 자동차(인스턴스)",{"type":19,"tag":20,"props":1043,"children":1044},{},[1045],{"type":24,"value":1046},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":19,"tag":36,"props":1048,"children":1051},{"className":1049,"code":1050,"language":41,"meta":8},[39],"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n",[1052],{"type":19,"tag":44,"props":1053,"children":1054},{"__ignoreMap":8},[1055],{"type":24,"value":1050},{"type":19,"tag":220,"props":1057,"children":1058},{},[1059],{"type":19,"tag":20,"props":1060,"children":1061},{},[1062,1064,1070,1072,1077],{"type":24,"value":1063},"+ 이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 추상화(Abstarction)라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 ",{"type":19,"tag":1065,"props":1066,"children":1067},"em",{},[1068],{"type":24,"value":1069},"가려내어",{"type":24,"value":1071}," ",{"type":19,"tag":1065,"props":1073,"children":1074},{},[1075],{"type":24,"value":1076},"포착하는",{"type":24,"value":1078}," 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":19,"tag":49,"props":1080,"children":1082},{"id":1081},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[1083],{"type":24,"value":1084},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":19,"tag":155,"props":1086,"children":1088},{"id":1087},"상속inheritance",[1089],{"type":24,"value":1090},"상속(inheritance)",{"type":19,"tag":20,"props":1092,"children":1093},{},[1094],{"type":24,"value":1095},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":19,"tag":36,"props":1097,"children":1100},{"className":1098,"code":1099,"language":41,"meta":8},[39],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[1101],{"type":19,"tag":44,"props":1102,"children":1103},{"__ignoreMap":8},[1104],{"type":24,"value":1099},{"type":19,"tag":20,"props":1106,"children":1107},{},[1108],{"type":24,"value":1109},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":19,"tag":155,"props":1111,"children":1113},{"id":1112},"다형성polymorphism",[1114],{"type":24,"value":1115},"다형성(Polymorphism)",{"type":19,"tag":20,"props":1117,"children":1118},{},[1119],{"type":24,"value":1120},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":19,"tag":36,"props":1122,"children":1125},{"className":1123,"code":1124,"language":41,"meta":8},[39],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[1126],{"type":19,"tag":44,"props":1127,"children":1128},{"__ignoreMap":8},[1129],{"type":24,"value":1124},{"type":19,"tag":155,"props":1131,"children":1133},{"id":1132},"캡슐화encapsulation",[1134],{"type":24,"value":1135},"캡슐화(Encapsulation)",{"type":19,"tag":20,"props":1137,"children":1138},{},[1139],{"type":24,"value":1140},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":19,"tag":36,"props":1142,"children":1145},{"className":1143,"code":1144,"language":41,"meta":8},[39],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[1146],{"type":19,"tag":44,"props":1147,"children":1148},{"__ignoreMap":8},[1149],{"type":24,"value":1144},{"type":19,"tag":467,"props":1151,"children":1152},{},[],{"type":19,"tag":155,"props":1154,"children":1155},{"id":51},[1156],{"type":24,"value":51},{"type":19,"tag":55,"props":1158,"children":1159},{},[1160,1165,1174,1184],{"type":19,"tag":59,"props":1161,"children":1162},{},[1163],{"type":24,"value":1164},"인사이드 자바스크립트",{"type":19,"tag":59,"props":1166,"children":1167},{},[1168],{"type":19,"tag":63,"props":1169,"children":1172},{"href":1170,"rel":1171},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[67],[1173],{"type":24,"value":1170},{"type":19,"tag":59,"props":1175,"children":1176},{},[1177],{"type":19,"tag":63,"props":1178,"children":1181},{"href":1179,"rel":1180},"http://www.opentutorials.org/module/2495/14037",[67],[1182],{"type":24,"value":1183},"www.opentutorials.org/module/2495/14037",{"type":19,"tag":59,"props":1185,"children":1186},{},[1187],{"type":19,"tag":63,"props":1188,"children":1191},{"href":1189,"rel":1190},"https://victorydntmd.tistory.com/117",[67],[1192],{"type":24,"value":1189},{"type":19,"tag":20,"props":1194,"children":1195},{},[1196],{"type":24,"value":29},{"title":8,"searchDepth":72,"depth":72,"links":1198},[1199,1200],{"id":995,"depth":266,"text":998},{"id":1081,"depth":72,"text":1084,"children":1201},[1202,1203,1204,1205],{"id":1087,"depth":266,"text":1090},{"id":1112,"depth":266,"text":1115},{"id":1132,"depth":266,"text":1135},{"id":51,"depth":266,"text":51},"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md",1705911073737]