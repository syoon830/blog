[{"data":1,"prerenderedAt":1242},["Reactive",2],{"content-query-nydz0E8puB":3},[4,68,128,321,523,604,922,944,1029],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":13,"body":14,"_type":63,"_id":64,"_source":65,"_file":66,"_extension":67},"/posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0","posts",false,"","javascript this","자신이 속한 객체 또는 자신이 생성할 인스턴스를 가르키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.",[12],"javascript","2024-01-23T00:00:00.000Z",{"type":15,"children":16,"toc":60},"root",[17,24,29,34,46,51],{"type":18,"tag":19,"props":20,"children":21},"element","p",{},[22],{"type":23,"value":10},"text",{"type":18,"tag":19,"props":25,"children":26},{},[27],{"type":23,"value":28},"\\n",{"type":18,"tag":19,"props":30,"children":31},{},[32],{"type":23,"value":33},"this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.",{"type":18,"tag":35,"props":36,"children":40},"pre",{"className":37,"code":39,"language":12,"meta":8},[38],"language-javascript","// 객체 리터럴\nconst circle = {\n    redius: 5,\n    getDiameter() {\n        // this는 메서드를 호출한 객체를 가리킨다.\n        return 2 * this.radius\n    }\n}\nconsole.log(circle.getDiameter()); // 10\n\n\n// 생성자 함수\nfunction Circle(radius) {\n    // this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    this.radius = radius;\n}\nCircle.prototype.getDiameter = function() {\n    //this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    return 2 * this.radius;\n}\n\n\n// 인스턴스 생성\nconst circle = new Circe(5);\nconsole.log(circle.getDiameter());\n",[41],{"type":18,"tag":42,"props":43,"children":44},"code",{"__ignoreMap":8},[45],{"type":23,"value":39},{"type":18,"tag":19,"props":47,"children":48},{},[49],{"type":23,"value":50},"클래스 기반 언어에서는 this는 언제나 클래스가 생성하는 인스턴스를 가리킨다. 하지만 자바스크립트의 this는 함수가 호출되는 방식에 따라 동적으로 결정된다.",{"type":18,"tag":35,"props":52,"children":55},{"className":53,"code":54,"language":12,"meta":8},[38],"// this는 함수 호출 방식에 따라 동적으로 결정 됨.\nconst foo = function() {\n    console.log(this);\n}\n\n// 1. 일반 함수 호출\nfoo() // window\n\n\n// 2. 메서드 호출\nconst obj = { foo };\nobj.foo(); // obj\n\n// 3. 생성자 함수 호출\nnew foo(); // foo {}\n\n// 4. apply/call/bind 메서드에 의한 간접 호출\nconst bar = {name: 'bar'};\nfoo.call(bar); // bar\nfoo.apply(bar); //bar\nfoo.bind(bar)(); //bar\n",[56],{"type":18,"tag":42,"props":57,"children":58},{"__ignoreMap":8},[59],{"type":23,"value":54},{"title":8,"searchDepth":61,"depth":61,"links":62},2,[],"markdown","content:posts:79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md","content","posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md","md",{"_path":69,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":70,"description":71,"tags":72,"date":75,"body":76,"_type":63,"_id":126,"_source":65,"_file":127,"_extension":67},"/posts/38527f39-69f6-4663-ba58-351831ed48b4","nuxt3 $fetch","nuxt3에서는 $fetch는 ofetch라는 라이브러리를 사용하고 있다. (ofetch는 node, browser 환경 두군데서 같이 사용할 수 있다.)",[73,74],"nuxt","axios","2024-01-22T00:00:00.000Z",{"type":15,"children":77,"toc":123},[78,82,86,91,100,106],{"type":18,"tag":19,"props":79,"children":80},{},[81],{"type":23,"value":71},{"type":18,"tag":19,"props":83,"children":84},{},[85],{"type":23,"value":28},{"type":18,"tag":19,"props":87,"children":88},{},[89],{"type":23,"value":90},"그래서 기존 axios로 설정된 코드들을 뜯어 고쳤다.",{"type":18,"tag":35,"props":92,"children":95},{"className":93,"code":94,"language":12,"meta":8},[38],"// 기존\nimport axios from 'axios';\nimport type { AxiosInstance } from 'axios';\nimport {useAuthStore} from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const authStore = useAuthStore();\n    const axiosInstance: AxiosInstance = axios.create({\n        baseURL: config.BASE_URL,\n    });\n\n    axiosInstance.interceptors.request.use((config) => {\n        if (authStore.isAuthenticated) {\n            config.headers.Authorization = `Bearer ${authStore.token}`;\n        } else {\n            config.headers.Authorization = `Basic ${btoaClientInfo}`;\n        }\n        return config;\n    });\n\n    nuxtApp.provide('axios', axiosInstance);\n});\n\n// 수정\nimport { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const apiFetch = $fetch.create({\n        baseURL: config.BASE_URL,\n        onRequest({ options }) {\n            const authStore = useAuthStore();\n            if (authStore.isAuthenticated) {\n                options.headers = {\n                    Authorization: `Bearer ${authStore.token}`\n                };\n            } else {\n                options.headers = {\n                    Authorization: `Basic ${btoaClientInfo}`\n                };\n            }\n        }\n    })\n    \n    nuxtApp.provide('apiFetch', apiFetch);\n});\n",[96],{"type":18,"tag":42,"props":97,"children":98},{"__ignoreMap":8},[99],{"type":23,"value":94},{"type":18,"tag":101,"props":102,"children":104},"h2",{"id":103},"참고",[105],{"type":23,"value":103},{"type":18,"tag":107,"props":108,"children":109},"ul",{},[110],{"type":18,"tag":111,"props":112,"children":113},"li",{},[114],{"type":18,"tag":115,"props":116,"children":120},"a",{"href":117,"rel":118},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-%EC%9D%98-%EC%B0%A8%EC%9D%B4",[119],"nofollow",[121],{"type":23,"value":122},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-의-차이",{"title":8,"searchDepth":61,"depth":61,"links":124},[125],{"id":103,"depth":61,"text":103},"content:posts:38527f39-69f6-4663-ba58-351831ed48b4.md","posts/38527f39-69f6-4663-ba58-351831ed48b4.md",{"_path":129,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":130,"description":131,"tags":132,"date":134,"body":135,"_type":63,"_id":319,"_source":65,"_file":320,"_extension":67},"/posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c","formData 전송 방법","axios를 $fetch로 변경하면서 로그인시 문제가 발생하였다.",[74,133],"$fetch","2024-01-18T00:00:00.000Z",{"type":15,"children":136,"toc":309},[137,141,145,150,159,164,169,173,178,187,191,196,202,217,226,240,245,254,258,263,267,292,296],{"type":18,"tag":19,"props":138,"children":139},{},[140],{"type":23,"value":131},{"type":18,"tag":19,"props":142,"children":143},{},[144],{"type":23,"value":28},{"type":18,"tag":19,"props":146,"children":147},{},[148],{"type":23,"value":149},"기존에 axios를 사용할때는 아래와 같이 사용중이고",{"type":18,"tag":35,"props":151,"children":154},{"className":152,"code":153,"language":12,"meta":8},[38],"await axios.post(url, qs.stringfy(payload));\n",[155],{"type":18,"tag":42,"props":156,"children":157},{"__ignoreMap":8},[158],{"type":23,"value":153},{"type":18,"tag":19,"props":160,"children":161},{},[162],{"type":23,"value":163},"전달된 형태를 보니 Form Data로 전송이 되고 있다.",{"type":18,"tag":165,"props":166,"children":168},"img",{"src":167},"../images/44c7da66-0554-46d8-b521-ada9065455d4.png",[],{"type":18,"tag":19,"props":170,"children":171},{},[172],{"type":23,"value":28},{"type":18,"tag":19,"props":174,"children":175},{},[176],{"type":23,"value":177},"$fetch는 아래와 같이 사용을 했는데",{"type":18,"tag":35,"props":179,"children":182},{"className":180,"code":181,"language":12,"meta":8},[38],"await apiFetch(url, {\n    method: 'POST',\n    body: qs.stringfy(payload)\n});\n",[183],{"type":18,"tag":42,"props":184,"children":185},{"__ignoreMap":8},[186],{"type":23,"value":181},{"type":18,"tag":165,"props":188,"children":190},{"src":189},"../images/22603713-9604-4847-bea8-35d3b9969e5e.png",[],{"type":18,"tag":19,"props":192,"children":193},{},[194],{"type":23,"value":195},"이렇게 전달이 돼서 로그인이 안되는것이다.",{"type":18,"tag":101,"props":197,"children":199},{"id":198},"_2가지-해결법",[200],{"type":23,"value":201},"2가지 해결법",{"type":18,"tag":203,"props":204,"children":206},"h3",{"id":205},"_1-header에-content-type-applicationx-www-form-urlencoded-넣어주기",[207,209,215],{"type":23,"value":208},"1. header에 ",{"type":18,"tag":42,"props":210,"children":212},{"className":211},[],[213],{"type":23,"value":214},"'Content-Type': 'application/x-www-form-urlencoded'",{"type":23,"value":216},"  넣어주기",{"type":18,"tag":35,"props":218,"children":221},{"className":219,"code":220,"language":12,"meta":8},[38],"$fetch(url, {\n    method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n    body: qs.stringfy(payload)\n})\n",[222],{"type":18,"tag":42,"props":223,"children":224},{"__ignoreMap":8},[225],{"type":23,"value":220},{"type":18,"tag":203,"props":227,"children":229},{"id":228},"_2-new-urlsearchparams-사용",[230,232,238],{"type":23,"value":231},"2. ",{"type":18,"tag":42,"props":233,"children":235},{"className":234},[],[236],{"type":23,"value":237},"new URLSearchParams",{"type":23,"value":239}," 사용",{"type":18,"tag":19,"props":241,"children":242},{},[243],{"type":23,"value":244},"원래는 new FormData 만들어서 일일히 append 해줘야하는데 위 함수로 간편하게 만들어준다.",{"type":18,"tag":35,"props":246,"children":249},{"className":247,"code":248,"language":12,"meta":8},[38],"$fetch(url, {\n    method: 'POST',\n    body: new URLSearchParams(qs.stringfy(payload))\n});\n",[250],{"type":18,"tag":42,"props":251,"children":252},{"__ignoreMap":8},[253],{"type":23,"value":248},{"type":18,"tag":19,"props":255,"children":256},{},[257],{"type":23,"value":28},{"type":18,"tag":19,"props":259,"children":260},{},[261],{"type":23,"value":262},"나는 그냥 1번으로 사용하였다.",{"type":18,"tag":19,"props":264,"children":265},{},[266],{"type":23,"value":28},{"type":18,"tag":268,"props":269,"children":270},"blockquote",{},[271],{"type":18,"tag":19,"props":272,"children":273},{},[274,276,282,284,290],{"type":23,"value":275},"Axios를 사용할 때 별도의 설정이 없으면, ",{"type":18,"tag":42,"props":277,"children":279},{"className":278},[],[280],{"type":23,"value":281},"qs.stringify",{"type":23,"value":283},"를 사용하여 변환된 데이터는 ",{"type":18,"tag":42,"props":285,"children":287},{"className":286},[],[288],{"type":23,"value":289},"application/x-www-form-urlencoded",{"type":23,"value":291}," 형식으로 전송된다.",{"type":18,"tag":203,"props":293,"children":294},{"id":103},[295],{"type":23,"value":103},{"type":18,"tag":107,"props":297,"children":298},{},[299],{"type":18,"tag":111,"props":300,"children":301},{},[302],{"type":18,"tag":115,"props":303,"children":306},{"href":304,"rel":305},"https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-FormData-%EC%A0%95%EB%A6%AC-fetch-api",[119],[307],{"type":23,"value":308},"https://inpa.tistory.com/entry/JS-📚-FormData-정리-fetch-api",{"title":8,"searchDepth":61,"depth":61,"links":310},[311],{"id":198,"depth":61,"text":201,"children":312},[313,316,318],{"id":205,"depth":314,"text":315},3,"1. header에 'Content-Type': 'application/x-www-form-urlencoded'  넣어주기",{"id":228,"depth":314,"text":317},"2. new URLSearchParams 사용",{"id":103,"depth":314,"text":103},"content:posts:e9a8a610-ff29-4403-bbb0-55a5438aad7c.md","posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c.md",{"_path":322,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":323,"description":324,"tags":325,"date":328,"body":329,"_type":63,"_id":521,"_source":65,"_file":522,"_extension":67},"/posts/9ecb10c2-fa24-449c-ac39-8553ee942084","nuxt에서 localstorage 이슈","기존에 cookie에 auth 정보를 저장했을때는 미들웨어가 잘 동작을 했는데, 테스트상 localstorage에 저장을 해보니 미들웨어가 제대로 동작을 안한다.",[73,326,327],"ssr","middleware","2024-01-16T00:00:00.000Z",{"type":15,"children":330,"toc":518},[331,335,339,348,353,357,362,367,371,377,473,477,506,510,514],{"type":18,"tag":19,"props":332,"children":333},{},[334],{"type":23,"value":324},{"type":18,"tag":19,"props":336,"children":337},{},[338],{"type":23,"value":28},{"type":18,"tag":35,"props":340,"children":343},{"className":341,"code":342,"language":12,"meta":8},[38],"import { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtRouteMiddleware((to, from) => {\n\n    const authStore = useAuthStore();\n    const nonAuthPages = ['index', 'login'];\n    if (authStore.isAuthenticated) {\n        if (nonAuthPages.includes(to.name)) {\n            return navigateTo('/dashboard');\n        }\n    } else {\n        if (!nonAuthPages.includes(to.name)) {\n            return navigateTo('/login');\n        }\n    }\n}\n",[344],{"type":18,"tag":42,"props":345,"children":346},{"__ignoreMap":8},[347],{"type":23,"value":342},{"type":18,"tag":19,"props":349,"children":350},{},[351],{"type":23,"value":352},"위 코드를 보면 로그인하면 index, login 페이지 접근 못하게, 로그인 안하면 index, login을 제외한 나머지 페이지 접근 못하게 코드를 짰다.",{"type":18,"tag":19,"props":354,"children":355},{},[356],{"type":23,"value":28},{"type":18,"tag":19,"props":358,"children":359},{},[360],{"type":23,"value":361},"로그인한 상태에서는 organization으로 접근을 해야하는데 login 페이지를 거쳐서 dashboard로 이동을 한다.",{"type":18,"tag":19,"props":363,"children":364},{},[365],{"type":23,"value":366},"원인을 살펴보니 ssr에서 localStorage에 접근을 못하여 예상하지 못한 로직으로 흐름이 발생한거였다. (server-side에서는 cookie에만 접근이 가능하다.)",{"type":18,"tag":19,"props":368,"children":369},{},[370],{"type":23,"value":28},{"type":18,"tag":101,"props":372,"children":374},{"id":373},"localstorage에-auth정보-저장-시-흐름-isauthenticated는-true",[375],{"type":23,"value":376},"localStorage에 auth정보 저장 시 흐름 (isAuthenticated는 true)",{"type":18,"tag":378,"props":379,"children":380},"ol",{},[381,407,432,437,468],{"type":18,"tag":111,"props":382,"children":383},{},[384,386],{"type":23,"value":385},"organization 페이지에 접근\n",{"type":18,"tag":378,"props":387,"children":388},{},[389],{"type":18,"tag":111,"props":390,"children":391},{},[392,394],{"type":23,"value":393},"server-side에서 middleware 동작\n",{"type":18,"tag":378,"props":395,"children":396},{},[397,402],{"type":18,"tag":111,"props":398,"children":399},{},[400],{"type":23,"value":401},"이때 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":18,"tag":111,"props":403,"children":404},{},[405],{"type":23,"value":406},"navigateTo(’/login’)이 실행된다.",{"type":18,"tag":111,"props":408,"children":409},{},[410,412],{"type":23,"value":411},"login 페이지 접근\n",{"type":18,"tag":378,"props":413,"children":414},{},[415],{"type":18,"tag":111,"props":416,"children":417},{},[418,420],{"type":23,"value":419},"server-side에서 middleware가 동작\n",{"type":18,"tag":378,"props":421,"children":422},{},[423,428],{"type":18,"tag":111,"props":424,"children":425},{},[426],{"type":23,"value":427},"마찬가지로 server-side에서는 localstorage에 접근을 못하니까 authStore 정보를 못 얻어온다.",{"type":18,"tag":111,"props":429,"children":430},{},[431],{"type":23,"value":406},{"type":18,"tag":111,"props":433,"children":434},{},[435],{"type":23,"value":436},"같은 페이지로 리다이렉트 됐기 때문에 더이상 ssr은 실행되지 않고 csr이 실행된다.",{"type":18,"tag":111,"props":438,"children":439},{},[440,442],{"type":23,"value":441},"login 화면이 렌더링\n",{"type":18,"tag":378,"props":443,"children":444},{},[445],{"type":18,"tag":111,"props":446,"children":447},{},[448,450],{"type":23,"value":449},"client-side에서 middleware 동작\n",{"type":18,"tag":378,"props":451,"children":452},{},[453,458,463],{"type":18,"tag":111,"props":454,"children":455},{},[456],{"type":23,"value":457},"csr에서는 localstorage에 접근이 가능하기 때문에 authStore 정보를 얻어옴",{"type":18,"tag":111,"props":459,"children":460},{},[461],{"type":23,"value":462},"nonAuthPages에 포함됨",{"type":18,"tag":111,"props":464,"children":465},{},[466],{"type":23,"value":467},"navigateTo(’dashboard’)이 실행된다.",{"type":18,"tag":111,"props":469,"children":470},{},[471],{"type":23,"value":472},"dashboard 화면이 렌더링 (client-side에서 middleware 동작은 생략)",{"type":18,"tag":19,"props":474,"children":475},{},[476],{"type":23,"value":28},{"type":18,"tag":268,"props":478,"children":479},{},[480],{"type":18,"tag":19,"props":481,"children":482},{},[483,485,491,493,497,499,504],{"type":23,"value":484},"SSR 환경에서의 ",{"type":18,"tag":42,"props":486,"children":488},{"className":487},[],[489],{"type":23,"value":490},"navigateTo",{"type":23,"value":492},"는 먼저 서버 측에서 처리되고 그 후 클라이언트 측에서 렌더링된다.",{"type":18,"tag":494,"props":495,"children":496},"br",{},[],{"type":23,"value":498},"\n반면, CSR 환경에서의 ",{"type":18,"tag":42,"props":500,"children":502},{"className":501},[],[503],{"type":23,"value":490},{"type":23,"value":505},"는 클라이언트 측에서만 처리되며, 서버 측 처리는 발생하지 않는다.",{"type":18,"tag":19,"props":507,"children":508},{},[509],{"type":23,"value":28},{"type":18,"tag":165,"props":511,"children":513},{"src":512},"../images/61f4bef1-ed9d-4d20-baa7-5748e821073b.png",[],{"type":18,"tag":515,"props":516,"children":517},"hr",{},[],{"title":8,"searchDepth":61,"depth":61,"links":519},[520],{"id":373,"depth":61,"text":376},"content:posts:9ecb10c2-fa24-449c-ac39-8553ee942084.md","posts/9ecb10c2-fa24-449c-ac39-8553ee942084.md",{"_path":524,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":525,"description":526,"tags":527,"date":528,"body":529,"_type":63,"_id":602,"_source":65,"_file":603,"_extension":67},"/posts/7516dc85-4ccc-4f99-afc1-22f8115737df","Call, Apply, Bind","Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 명시적으로 바인딩 시키는 메소드이다.",[12],"2024-01-15T00:00:00.000Z",{"type":15,"children":530,"toc":598},[531,544,550,559,564,568,573,579,584,589],{"type":18,"tag":19,"props":532,"children":533},{},[534,536,542],{"type":23,"value":535},"Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 ",{"type":18,"tag":42,"props":537,"children":539},{"className":538},[],[540],{"type":23,"value":541},"명시적으로 바인딩",{"type":23,"value":543}," 시키는 메소드이다.",{"type":18,"tag":203,"props":545,"children":547},{"id":546},"먼저-call-apply를-코드로-살펴-보자",[548],{"type":23,"value":549},"먼저 Call, Apply를 코드로 살펴 보자",{"type":18,"tag":35,"props":551,"children":554},{"className":552,"code":553,"language":12,"meta":8},[38],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\ngreeting('seoul', 'listening to music'); // Hello my name is , I live in seoul. my hobby is listening to music.\ngreeting.apply(seungyoon, ['seoul', 'listening to music']); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music.\ngreeting.call(seungyoon, 'seoul', 'listening to music'); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music\n\n",[555],{"type":18,"tag":42,"props":556,"children":557},{"__ignoreMap":8},[558],{"type":23,"value":553},{"type":18,"tag":19,"props":560,"children":561},{},[562],{"type":23,"value":563},"이렇게 this 특정 객체에 명시적으로 바인딩 시키고 싶을 때 call, apply를 사용하면 된다.",{"type":18,"tag":165,"props":565,"children":567},{"src":566},"../images/1026d226-7f0a-4b68-8e02-d238d907c9fd.png",[],{"type":18,"tag":19,"props":569,"children":570},{},[571],{"type":23,"value":572},"(여기서 call과 apply는 기능은 같지만 넘겨받는 인자의 형식만 다르다. call과 다르게 apply는 인자를 배열 형태로 받는다.)",{"type":18,"tag":203,"props":574,"children":576},{"id":575},"나머지-bind-함수를-살펴보자",[577],{"type":23,"value":578},"나머지 bind 함수를 살펴보자.",{"type":18,"tag":19,"props":580,"children":581},{},[582],{"type":23,"value":583},"이 함수는 call apply와 다르게 함수를 즉시 실행하지 않는다.",{"type":18,"tag":19,"props":585,"children":586},{},[587],{"type":23,"value":588},"아래 코드와 같이 변수에 담아 호출 할 수가 있다.",{"type":18,"tag":35,"props":590,"children":593},{"className":591,"code":592,"language":12,"meta":8},[38],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\nconst seungyoonGreeting = greeting.bind(seungyoon);\nseungyoonGreeting('seuol', 'listening to music'); // Hello my name is seungyoon, I live in seuol. my hobby is listening to music.\n\n",[594],{"type":18,"tag":42,"props":595,"children":596},{"__ignoreMap":8},[597],{"type":23,"value":592},{"title":8,"searchDepth":61,"depth":61,"links":599},[600,601],{"id":546,"depth":314,"text":549},{"id":575,"depth":314,"text":578},"content:posts:7516dc85-4ccc-4f99-afc1-22f8115737df.md","posts/7516dc85-4ccc-4f99-afc1-22f8115737df.md",{"_path":605,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":606,"description":607,"tags":608,"date":610,"body":611,"_type":63,"_id":920,"_source":65,"_file":921,"_extension":67},"/posts/f8128924-3314-4bbc-9acd-4e7fcab8969a","화살표 함수(=>)","function 키워드 대신 화살표(=>)를 사용하는 방식의 함수",[609],"ES6","2024-01-14T00:00:00.000Z",{"type":15,"children":612,"toc":906},[613,617,626,631,636,645,651,656,662,671,676,684,689,698,703,709,715,727,736,747,756,767,776,782,792,801,811,819,825,834,840,850,859,869,878,882,885,890,902],{"type":18,"tag":19,"props":614,"children":615},{},[616],{"type":23,"value":607},{"type":18,"tag":35,"props":618,"children":621},{"className":619,"code":620,"language":12,"meta":8},[38],"// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n",[622],{"type":18,"tag":42,"props":623,"children":624},{"__ignoreMap":8},[625],{"type":23,"value":620},{"type":18,"tag":19,"props":627,"children":628},{},[629],{"type":23,"value":630},"※ 그렇다고 모든 경우에 화살표 함수를 사용하면 안 됨 (아래에서 확인)",{"type":18,"tag":101,"props":632,"children":634},{"id":633},"문법",[635],{"type":23,"value":633},{"type":18,"tag":35,"props":637,"children":640},{"className":638,"code":639,"language":12,"meta":8},[38],"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n",[641],{"type":18,"tag":42,"props":642,"children":643},{"__ignoreMap":8},[644],{"type":23,"value":639},{"type":18,"tag":101,"props":646,"children":648},{"id":647},"일반-함수funciton와-화살표-함수-차이점",[649],{"type":23,"value":650},"일반 함수(funciton)와 화살표 함수(=>) 차이점",{"type":18,"tag":19,"props":652,"children":653},{},[654],{"type":23,"value":655},"가장 큰 차이점은 this인데 코드를 보며 확인해 보자.",{"type":18,"tag":203,"props":657,"children":659},{"id":658},"일반-함수function",[660],{"type":23,"value":661},"일반 함수(function)",{"type":18,"tag":35,"props":663,"children":666},{"className":664,"code":665,"language":12,"meta":8},[38],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n",[667],{"type":18,"tag":42,"props":668,"children":669},{"__ignoreMap":8},[670],{"type":23,"value":665},{"type":18,"tag":19,"props":672,"children":673},{},[674],{"type":23,"value":675},"위 코드를 보게 되면 map 안에 this를 찍어보면 Window를 가르키고 있다. 기본적으로 내부 함수 this는 Window를 가르킨다.",{"type":18,"tag":107,"props":677,"children":678},{},[679],{"type":18,"tag":111,"props":680,"children":681},{},[682],{"type":23,"value":683},"생성자 함수와 객체의 메소드를 제외한 모든 함수(내부 함수, 콜백 함수 포함) 내부의 this는 전역 객체(Window)를 가르키기 때문이다.",{"type":18,"tag":203,"props":685,"children":687},{"id":686},"화살표-함수",[688],{"type":23,"value":606},{"type":18,"tag":35,"props":690,"children":693},{"className":691,"code":692,"language":12,"meta":8},[38],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n",[694],{"type":18,"tag":42,"props":695,"children":696},{"__ignoreMap":8},[697],{"type":23,"value":692},{"type":18,"tag":19,"props":699,"children":700},{},[701],{"type":23,"value":702},"위 코드와 다르게 map 안에 this는 Prexier를 가르킨다. 이는 화살표 함수의 this는 언제나 상위 스코프의 this를 가르키기 때문이다.",{"type":18,"tag":101,"props":704,"children":706},{"id":705},"화살표-함수를-사용해서는-안되는-경우",[707],{"type":23,"value":708},"화살표 함수를 사용해서는 안되는 경우",{"type":18,"tag":203,"props":710,"children":712},{"id":711},"_1-메소드",[713],{"type":23,"value":714},"1. 메소드",{"type":18,"tag":268,"props":716,"children":717},{},[718],{"type":18,"tag":19,"props":719,"children":720},{},[721],{"type":18,"tag":722,"props":723,"children":724},"strong",{},[725],{"type":23,"value":726},"bad",{"type":18,"tag":35,"props":728,"children":731},{"className":729,"code":730,"language":12,"meta":8},[38],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n",[732],{"type":18,"tag":42,"props":733,"children":734},{"__ignoreMap":8},[735],{"type":23,"value":730},{"type":18,"tag":268,"props":737,"children":738},{},[739],{"type":18,"tag":19,"props":740,"children":741},{},[742],{"type":18,"tag":722,"props":743,"children":744},{},[745],{"type":23,"value":746},"good",{"type":18,"tag":35,"props":748,"children":751},{"className":749,"code":750,"language":12,"meta":8},[38],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[752],{"type":18,"tag":42,"props":753,"children":754},{"__ignoreMap":8},[755],{"type":23,"value":750},{"type":18,"tag":268,"props":757,"children":758},{},[759],{"type":18,"tag":19,"props":760,"children":761},{},[762],{"type":18,"tag":722,"props":763,"children":764},{},[765],{"type":23,"value":766},"best",{"type":18,"tag":35,"props":768,"children":771},{"className":769,"code":770,"language":12,"meta":8},[38],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[772],{"type":18,"tag":42,"props":773,"children":774},{"__ignoreMap":8},[775],{"type":23,"value":770},{"type":18,"tag":203,"props":777,"children":779},{"id":778},"_2-prototype",[780],{"type":23,"value":781},"2. prototype",{"type":18,"tag":268,"props":783,"children":784},{},[785],{"type":18,"tag":19,"props":786,"children":787},{},[788],{"type":18,"tag":722,"props":789,"children":790},{},[791],{"type":23,"value":726},{"type":18,"tag":35,"props":793,"children":796},{"className":794,"code":795,"language":12,"meta":8},[38],"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n",[797],{"type":18,"tag":42,"props":798,"children":799},{"__ignoreMap":8},[800],{"type":23,"value":795},{"type":18,"tag":268,"props":802,"children":803},{},[804],{"type":18,"tag":19,"props":805,"children":806},{},[807],{"type":18,"tag":722,"props":808,"children":809},{},[810],{"type":23,"value":746},{"type":18,"tag":35,"props":812,"children":814},{"className":813,"code":795,"language":12,"meta":8},[38],[815],{"type":18,"tag":42,"props":816,"children":817},{"__ignoreMap":8},[818],{"type":23,"value":795},{"type":18,"tag":203,"props":820,"children":822},{"id":821},"_3-생성자-함수",[823],{"type":23,"value":824},"3. 생성자 함수",{"type":18,"tag":35,"props":826,"children":829},{"className":827,"code":828,"language":12,"meta":8},[38],"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n",[830],{"type":18,"tag":42,"props":831,"children":832},{"__ignoreMap":8},[833],{"type":23,"value":828},{"type":18,"tag":203,"props":835,"children":837},{"id":836},"_4-addeventlistener-함수의-콜백-함수",[838],{"type":23,"value":839},"4. addEventListener 함수의 콜백 함수",{"type":18,"tag":268,"props":841,"children":842},{},[843],{"type":18,"tag":19,"props":844,"children":845},{},[846],{"type":18,"tag":722,"props":847,"children":848},{},[849],{"type":23,"value":726},{"type":18,"tag":35,"props":851,"children":854},{"className":852,"code":853,"language":12,"meta":8},[38],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n",[855],{"type":18,"tag":42,"props":856,"children":857},{"__ignoreMap":8},[858],{"type":23,"value":853},{"type":18,"tag":268,"props":860,"children":861},{},[862],{"type":18,"tag":19,"props":863,"children":864},{},[865],{"type":18,"tag":722,"props":866,"children":867},{},[868],{"type":23,"value":746},{"type":18,"tag":35,"props":870,"children":873},{"className":871,"code":872,"language":12,"meta":8},[38],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n",[874],{"type":18,"tag":42,"props":875,"children":876},{"__ignoreMap":8},[877],{"type":23,"value":872},{"type":18,"tag":19,"props":879,"children":880},{},[881],{"type":23,"value":28},{"type":18,"tag":515,"props":883,"children":884},{},[],{"type":18,"tag":203,"props":886,"children":887},{"id":103},[888],{"type":23,"value":889},"참고:",{"type":18,"tag":107,"props":891,"children":892},{},[893],{"type":18,"tag":111,"props":894,"children":895},{},[896],{"type":18,"tag":115,"props":897,"children":900},{"href":898,"rel":899},"https://poiemaweb.com/es6-arrow-function",[119],[901],{"type":23,"value":898},{"type":18,"tag":19,"props":903,"children":904},{},[905],{"type":23,"value":28},{"title":8,"searchDepth":61,"depth":61,"links":907},[908,909,913],{"id":633,"depth":61,"text":633},{"id":647,"depth":61,"text":650,"children":910},[911,912],{"id":658,"depth":314,"text":661},{"id":686,"depth":314,"text":606},{"id":705,"depth":61,"text":708,"children":914},[915,916,917,918,919],{"id":711,"depth":314,"text":714},{"id":778,"depth":314,"text":781},{"id":821,"depth":314,"text":824},{"id":836,"depth":314,"text":839},{"id":103,"depth":314,"text":889},"content:posts:f8128924-3314-4bbc-9acd-4e7fcab8969a.md","posts/f8128924-3314-4bbc-9acd-4e7fcab8969a.md",{"_path":923,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":924,"description":8,"tags":925,"date":926,"body":927,"_type":63,"_id":942,"_source":65,"_file":943,"_extension":67},"/posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9","Property \"query\" was accessed during render but is not defined on instance",[73],"2024-01-05T00:00:00.000Z",{"type":15,"children":928,"toc":940},[929],{"type":18,"tag":35,"props":930,"children":935},{"className":931,"code":933,"language":934,"meta":8},[932],"language-css","// AS-IS\nconst { query } = defineProps();\n\n// TO-BE\nconst { query } = defineProps(['query']);\n\n","css",[936],{"type":18,"tag":42,"props":937,"children":938},{"__ignoreMap":8},[939],{"type":23,"value":933},{"title":8,"searchDepth":61,"depth":61,"links":941},[],"content:posts:ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md","posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md",{"_path":945,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":946,"description":947,"tags":948,"date":949,"body":950,"_type":63,"_id":1027,"_source":65,"_file":1028,"_extension":67},"/posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd","nuxt3 정적 사이트 github page에서 js파일들 404에러 날때","githubpage에 generage해서 올렸는데 자꾸 에러가 나는거다… 이유를 몰라서 밤새 검색했는데도 답이 안나오고",[73],"2024-01-03T00:00:00.000Z",{"type":15,"children":951,"toc":1025},[952,956,960,964,969,978,982,987,998,1002,1007,1012,1016,1021],{"type":18,"tag":19,"props":953,"children":954},{},[955],{"type":23,"value":947},{"type":18,"tag":165,"props":957,"children":959},{"src":958},"../images/83ae6ad8-7aa0-4eea-8dbd-414dd5afd30b.png",[],{"type":18,"tag":19,"props":961,"children":962},{},[963],{"type":23,"value":28},{"type":18,"tag":19,"props":965,"children":966},{},[967],{"type":23,"value":968},"결국 nuxt github issue에서 찾았다 ㅠㅠ",{"type":18,"tag":19,"props":970,"children":971},{},[972],{"type":18,"tag":115,"props":973,"children":976},{"href":974,"rel":975},"https://github.com/nuxt/nuxt/issues/10113",[119],[977],{"type":23,"value":974},{"type":18,"tag":19,"props":979,"children":980},{},[981],{"type":23,"value":28},{"type":18,"tag":19,"props":983,"children":984},{},[985],{"type":23,"value":986},".nojeklly",{"type":18,"tag":35,"props":988,"children":993},{"className":989,"code":991,"language":992,"meta":8},[990],"language-json","\"deploy\": \"nuxt generate && touch .output/public/.nojekyll && gh-pages --dotfiles -d .output/public”\n","json",[994],{"type":18,"tag":42,"props":995,"children":996},{"__ignoreMap":8},[997],{"type":23,"value":991},{"type":18,"tag":19,"props":999,"children":1000},{},[1001],{"type":23,"value":28},{"type":18,"tag":19,"props":1003,"children":1004},{},[1005],{"type":23,"value":1006},"결론은 generate하고 프로젝트 폴더안에 .nojekyll 파일이 있어야 되는거였다. (github page는 기본적으로 jekyll이라는 정적 사이트 생성기를 사용함)",{"type":18,"tag":19,"props":1008,"children":1009},{},[1010],{"type":23,"value":1011},".nojekyll 파일이 있으면 github 페이지는 jekyll 처리를 건너뜀.",{"type":18,"tag":19,"props":1013,"children":1014},{},[1015],{"type":23,"value":28},{"type":18,"tag":19,"props":1017,"children":1018},{},[1019],{"type":23,"value":1020},"오늘의 개발 교훈: github issue를 잘 찾아보자!",{"type":18,"tag":19,"props":1022,"children":1023},{},[1024],{"type":23,"value":28},{"title":8,"searchDepth":61,"depth":61,"links":1026},[],"content:posts:d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md","posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md",{"_path":1030,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1031,"description":1032,"tags":1033,"date":1034,"body":1035,"_type":63,"_id":1240,"_source":65,"_file":1241,"_extension":67},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[609],"2023-12-28T00:00:00.000Z",{"type":15,"children":1036,"toc":1231},[1037,1041,1047,1052,1065,1070,1083,1088,1097,1113,1119,1125,1130,1139,1144,1150,1155,1164,1170,1175,1184,1187,1191,1227],{"type":18,"tag":19,"props":1038,"children":1039},{},[1040],{"type":23,"value":1032},{"type":18,"tag":203,"props":1042,"children":1044},{"id":1043},"클래스와-인스턴스객체",[1045],{"type":23,"value":1046},"클래스와 인스턴스(객체)",{"type":18,"tag":19,"props":1048,"children":1049},{},[1050],{"type":23,"value":1051},"클래스는 일종의 설계도이고 인스턴스는 클래스를 사용하여 생성한 실제 물건이다.",{"type":18,"tag":107,"props":1053,"children":1054},{},[1055,1060],{"type":18,"tag":111,"props":1056,"children":1057},{},[1058],{"type":23,"value":1059},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":18,"tag":111,"props":1061,"children":1062},{},[1063],{"type":23,"value":1064},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":18,"tag":19,"props":1066,"children":1067},{},[1068],{"type":23,"value":1069},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":18,"tag":107,"props":1071,"children":1072},{},[1073,1078],{"type":18,"tag":111,"props":1074,"children":1075},{},[1076],{"type":23,"value":1077},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":18,"tag":111,"props":1079,"children":1080},{},[1081],{"type":23,"value":1082},"이동수단(클래스) - 자동차(인스턴스)",{"type":18,"tag":19,"props":1084,"children":1085},{},[1086],{"type":23,"value":1087},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":18,"tag":35,"props":1089,"children":1092},{"className":1090,"code":1091,"language":12,"meta":8},[38],"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n",[1093],{"type":18,"tag":42,"props":1094,"children":1095},{"__ignoreMap":8},[1096],{"type":23,"value":1091},{"type":18,"tag":268,"props":1098,"children":1099},{},[1100],{"type":18,"tag":19,"props":1101,"children":1102},{},[1103,1105,1111],{"type":23,"value":1104},"+ 이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 추상화(Abstarction)라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 ",{"type":18,"tag":1106,"props":1107,"children":1108},"em",{},[1109],{"type":23,"value":1110},"포착하는",{"type":23,"value":1112}," 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":18,"tag":101,"props":1114,"children":1116},{"id":1115},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[1117],{"type":23,"value":1118},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":18,"tag":203,"props":1120,"children":1122},{"id":1121},"상속inheritance",[1123],{"type":23,"value":1124},"상속(inheritance)",{"type":18,"tag":19,"props":1126,"children":1127},{},[1128],{"type":23,"value":1129},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":18,"tag":35,"props":1131,"children":1134},{"className":1132,"code":1133,"language":12,"meta":8},[38],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[1135],{"type":18,"tag":42,"props":1136,"children":1137},{"__ignoreMap":8},[1138],{"type":23,"value":1133},{"type":18,"tag":19,"props":1140,"children":1141},{},[1142],{"type":23,"value":1143},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":18,"tag":203,"props":1145,"children":1147},{"id":1146},"다형성polymorphism",[1148],{"type":23,"value":1149},"다형성(Polymorphism)",{"type":18,"tag":19,"props":1151,"children":1152},{},[1153],{"type":23,"value":1154},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":18,"tag":35,"props":1156,"children":1159},{"className":1157,"code":1158,"language":12,"meta":8},[38],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[1160],{"type":18,"tag":42,"props":1161,"children":1162},{"__ignoreMap":8},[1163],{"type":23,"value":1158},{"type":18,"tag":203,"props":1165,"children":1167},{"id":1166},"캡슐화encapsulation",[1168],{"type":23,"value":1169},"캡슐화(Encapsulation)",{"type":18,"tag":19,"props":1171,"children":1172},{},[1173],{"type":23,"value":1174},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":18,"tag":35,"props":1176,"children":1179},{"className":1177,"code":1178,"language":12,"meta":8},[38],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[1180],{"type":18,"tag":42,"props":1181,"children":1182},{"__ignoreMap":8},[1183],{"type":23,"value":1178},{"type":18,"tag":515,"props":1185,"children":1186},{},[],{"type":18,"tag":203,"props":1188,"children":1189},{"id":103},[1190],{"type":23,"value":103},{"type":18,"tag":107,"props":1192,"children":1193},{},[1194,1199,1208,1218],{"type":18,"tag":111,"props":1195,"children":1196},{},[1197],{"type":23,"value":1198},"인사이드 자바스크립트",{"type":18,"tag":111,"props":1200,"children":1201},{},[1202],{"type":18,"tag":115,"props":1203,"children":1206},{"href":1204,"rel":1205},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[119],[1207],{"type":23,"value":1204},{"type":18,"tag":111,"props":1209,"children":1210},{},[1211],{"type":18,"tag":115,"props":1212,"children":1215},{"href":1213,"rel":1214},"http://www.opentutorials.org/module/2495/14037",[119],[1216],{"type":23,"value":1217},"www.opentutorials.org/module/2495/14037",{"type":18,"tag":111,"props":1219,"children":1220},{},[1221],{"type":18,"tag":115,"props":1222,"children":1225},{"href":1223,"rel":1224},"https://victorydntmd.tistory.com/117",[119],[1226],{"type":23,"value":1223},{"type":18,"tag":19,"props":1228,"children":1229},{},[1230],{"type":23,"value":28},{"title":8,"searchDepth":61,"depth":61,"links":1232},[1233,1234],{"id":1043,"depth":314,"text":1046},{"id":1115,"depth":61,"text":1118,"children":1235},[1236,1237,1238,1239],{"id":1121,"depth":314,"text":1124},{"id":1146,"depth":314,"text":1149},{"id":1166,"depth":314,"text":1169},{"id":103,"depth":314,"text":103},"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md",1706960670294]