[{"data":1,"prerenderedAt":102},["Reactive",2],{"content-query-N1CVdJP8gx":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":97,"_id":98,"_source":99,"_file":100,"_extension":101},"/posts/7516dc85-4ccc-4f99-afc1-22f8115737df","posts",false,"","Call, Apply, Bind","Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 명시적으로 바인딩 시키는 메소드이다.",[11],"javascript","2024-01-15T00:00:00.000Z",{"type":14,"children":15,"toc":91},"root",[16,33,40,51,56,61,66,72,77,82],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21,24,31],{"type":22,"value":23},"text","Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 ",{"type":17,"tag":25,"props":26,"children":28},"code",{"className":27},[],[29],{"type":22,"value":30},"명시적으로 바인딩",{"type":22,"value":32}," 시키는 메소드이다.",{"type":17,"tag":34,"props":35,"children":37},"h3",{"id":36},"먼저-call-apply를-코드로-살펴-보자",[38],{"type":22,"value":39},"먼저 Call, Apply를 코드로 살펴 보자",{"type":17,"tag":41,"props":42,"children":46},"pre",{"className":43,"code":45,"language":11,"meta":7},[44],"language-javascript","const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\ngreeting('seoul', 'listening to music'); // Hello my name is , I live in seoul. my hobby is listening to music.\ngreeting.apply(seungyoon, ['seoul', 'listening to music']); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music.\ngreeting.call(seungyoon, 'seoul', 'listening to music'); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music\n\n",[47],{"type":17,"tag":25,"props":48,"children":49},{"__ignoreMap":7},[50],{"type":22,"value":45},{"type":17,"tag":18,"props":52,"children":53},{},[54],{"type":22,"value":55},"이렇게 this 특정 객체에 명시적으로 바인딩 시키고 싶을 때 call, apply를 사용하면 된다.",{"type":17,"tag":57,"props":58,"children":60},"img",{"src":59},"/blog/images/b740413d-47a8-43fa-a77d-1523c849a8f5.png",[],{"type":17,"tag":18,"props":62,"children":63},{},[64],{"type":22,"value":65},"(여기서 call과 apply는 기능은 같지만 넘겨받는 인자의 형식만 다르다. call과 다르게 apply는 인자를 배열 형태로 받는다.)",{"type":17,"tag":34,"props":67,"children":69},{"id":68},"나머지-bind-함수를-살펴보자",[70],{"type":22,"value":71},"나머지 bind 함수를 살펴보자.",{"type":17,"tag":18,"props":73,"children":74},{},[75],{"type":22,"value":76},"이 함수는 call apply와 다르게 함수를 즉시 실행하지 않는다.",{"type":17,"tag":18,"props":78,"children":79},{},[80],{"type":22,"value":81},"아래 코드와 같이 변수에 담아 호출 할 수가 있다.",{"type":17,"tag":41,"props":83,"children":86},{"className":84,"code":85,"language":11,"meta":7},[44],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\nconst seungyoonGreeting = greeting.bind(seungyoon);\nseungyoonGreeting('seuol', 'listening to music'); // Hello my name is seungyoon, I live in seuol. my hobby is listening to music.\n\n",[87],{"type":17,"tag":25,"props":88,"children":89},{"__ignoreMap":7},[90],{"type":22,"value":85},{"title":7,"searchDepth":92,"depth":92,"links":93},2,[94,96],{"id":36,"depth":95,"text":39},3,{"id":68,"depth":95,"text":71},"markdown","content:posts:7516dc85-4ccc-4f99-afc1-22f8115737df.md","content","posts/7516dc85-4ccc-4f99-afc1-22f8115737df.md","md",1710325803504]