[{"data":1,"prerenderedAt":577},["Reactive",2],{"content-query-kHytCMW6tJ":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":572,"_id":573,"_source":574,"_file":575,"_extension":576},"/posts/c1c34454-3dfe-4bbf-bea0-97b3cfc73165","posts",false,"","자바스크립트 - 19. 실행 컨텍스트","실행 컨텍스트는 자바스크립트의 동작 원리를 담고 있는 핵심 개념",[11],"javascript","2024-02-28T00:00:00.000Z",{"type":14,"children":15,"toc":569},"root",[16,23,30,35,40,45,50,56,61,81,86,90,95,99,110,115,120,126,131,140,232,237,255,259,272,282,286,298,310,315,324,329,401,406,411,416,421,426,430,435,439,458,464,508,513,518,524,533,537,542,547,551,556,560,565],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":24,"props":25,"children":27},"h1",{"id":26},"소스코드-타입",[28],{"type":22,"value":29},"소스코드 타입",{"type":17,"tag":18,"props":31,"children":32},{},[33],{"type":22,"value":34},"4가지 타입으로 구분",{"type":17,"tag":18,"props":36,"children":37},{},[38],{"type":22,"value":39},"전역 코드, 함수 코드, eval 코드, 모듈 코드",{"type":17,"tag":18,"props":41,"children":42},{},[43],{"type":22,"value":44},"\\n",{"type":17,"tag":18,"props":46,"children":47},{},[48],{"type":22,"value":49},"여기서 주의깊게 볼것은 전역 코드와 함수 코드, 전역 코드는 전역 실행 컨텍스트를 생성하고 함수 코드는 함수 실행 컨텍스트를 생성한다.",{"type":17,"tag":24,"props":51,"children":53},{"id":52},"소스코드의-평가와-실행",[54],{"type":22,"value":55},"소스코드의 평가와 실행",{"type":17,"tag":18,"props":57,"children":58},{},[59],{"type":22,"value":60},"모든 소스코드는 실행에 앞서 평가 과정을 거치며 코드를 실행하기 위한 준비를 한다.",{"type":17,"tag":18,"props":62,"children":63},{},[64,66,72,74,79],{"type":22,"value":65},"소스코드 평가 과정에서 ",{"type":17,"tag":67,"props":68,"children":69},"code",{},[70],{"type":22,"value":71},"실행 컨텍스트를 생성",{"type":22,"value":73},"하고 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 ",{"type":17,"tag":67,"props":75,"children":76},{},[77],{"type":22,"value":78},"스코프(렉시컬 환경의 환경 레코드)",{"type":22,"value":80},"에 등록한다.",{"type":17,"tag":18,"props":82,"children":83},{},[84],{"type":22,"value":85},"평가 과정이 끝나면 소스코드가 순차적으로 실행. 즉 런타임이 시작된다. 이때 소스코드 실행(변수에 값을 할당 등)시 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득하고 할당한다.",{"type":17,"tag":18,"props":87,"children":88},{},[89],{"type":22,"value":44},{"type":17,"tag":18,"props":91,"children":92},{},[93],{"type":22,"value":94},"그러니까 쉽게 자바스크립트 실행하면 소스코드를 한줄한줄 실행하기에 앞서 소스코드를 먼저 평가해 이때 실행컨텍스트 생성하고 여기 안에 렉시컬 환경이 구성되고, 이 렉시컬 환경에 변수나 함수 식별자 등록을 해. 그다음에 소스코드 실행 단계(소스코드 한줄한줄 실행, 즉 런타임)에서 실행컨텍스트 가져와서 렉시컬환경 안에 식별자 검색한다음 값을 할당해",{"type":17,"tag":18,"props":96,"children":97},{},[98],{"type":22,"value":44},{"type":17,"tag":100,"props":101,"children":105},"pre",{"className":102,"code":104,"language":11,"meta":7},[103],"language-javascript","var x;\nx = 1;\n",[106],{"type":17,"tag":67,"props":107,"children":108},{"__ignoreMap":7},[109],{"type":22,"value":104},{"type":17,"tag":18,"props":111,"children":112},{},[113],{"type":22,"value":114},"이런 코드가 있을때",{"type":17,"tag":18,"props":116,"children":117},{},[118],{"type":22,"value":119},"자바스크립트는 평가단계에서 전역 실행컨텍스트 생성하고 여기에 렉시컬 환경이 구성이 돼, 그리고 렉시컬 환경에 x 식별자 등록하고 undeinfed 할당(var 변수라서), 실행단계에서 전역 실행컨텍스트 안에 렉시컬 환경에 x 있는지 찾아서 x에 1 할당",{"type":17,"tag":24,"props":121,"children":123},{"id":122},"실행-컨텍스트의-역할",[124],{"type":22,"value":125},"실행 컨텍스트의 역할",{"type":17,"tag":18,"props":127,"children":128},{},[129],{"type":22,"value":130},"다음 코드는 자바스크립트 엔진이 어떻게 평가하고 실행할까?",{"type":17,"tag":100,"props":132,"children":135},{"className":133,"code":134,"language":11,"meta":7},[103],"const x = 1;\nconst y = 2;\n\nfunction foo(a) {\n    const x = 10;\n    const y = 20;\n    \n    console.log(a + x + y);\n}\n\nfoo(100);\n\nconsole.log(x + y);\n",[136],{"type":17,"tag":67,"props":137,"children":138},{"__ignoreMap":7},[139],{"type":22,"value":134},{"type":17,"tag":141,"props":142,"children":143},"ol",{},[144,163,181,199],{"type":17,"tag":145,"props":146,"children":147},"li",{},[148,150],{"type":22,"value":149},"전역 코드 평가",{"type":17,"tag":141,"props":151,"children":152},{},[153,158],{"type":17,"tag":145,"props":154,"children":155},{},[156],{"type":22,"value":157},"선언문만 먼저 실행\n테스트입니다!",{"type":17,"tag":145,"props":159,"children":160},{},[161],{"type":22,"value":162},"전역 변수(const x, y), 전역 함수(foo)가 실행 컨텍스트가 관리하는 전역 스코프에 등록 됨",{"type":17,"tag":145,"props":164,"children":165},{},[166,168],{"type":22,"value":167},"전역 코드 실행",{"type":17,"tag":141,"props":169,"children":170},{},[171,176],{"type":17,"tag":145,"props":172,"children":173},{},[174],{"type":22,"value":175},"전역 코드가 순차적으로 실행, 이때 전역 변수(const x, y)에 값이 할당되고 함수가 호출(foo(100))됨",{"type":17,"tag":145,"props":177,"children":178},{},[179],{"type":22,"value":180},"순차적으로 실행되던 전역 코드의 실행을 일시 중단, 함수 내부로 진입",{"type":17,"tag":145,"props":182,"children":183},{},[184,186],{"type":22,"value":185},"함수 코드 평가",{"type":17,"tag":141,"props":187,"children":188},{},[189,194],{"type":17,"tag":145,"props":190,"children":191},{},[192],{"type":22,"value":193},"매개변수와 지역 선언문이 먼저 실행되고, 실행 컨텍스트가 관리하는 지역 스코프에 등록된다.",{"type":17,"tag":145,"props":195,"children":196},{},[197],{"type":22,"value":198},"함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다.",{"type":17,"tag":145,"props":200,"children":201},{},[202,204,227,231],{"type":22,"value":203},"함수 코드 실행",{"type":17,"tag":141,"props":205,"children":206},{},[207,212,217,222],{"type":17,"tag":145,"props":208,"children":209},{},[210],{"type":22,"value":211},"함수 코드가 순차적으로 실행되기 시작, 이때 매개변수와 지역 변수에 값이 할당되고 console.log 메서드가 호출된다.",{"type":17,"tag":145,"props":213,"children":214},{},[215],{"type":22,"value":216},"console.log 메서드를 호출하기 위해 먼저 식별자인 console을 스코프 체인을 통해 검색한다.",{"type":17,"tag":145,"props":218,"children":219},{},[220],{"type":22,"value":221},"a,x,y 식별자는 스코프 체인을 통해 검색한다.",{"type":17,"tag":145,"props":223,"children":224},{},[225],{"type":22,"value":226},"console.log 실행이 종료되면 함수 코드 실행 과정이 종료되고 함수 호출 이전으로 되돌아가 전역 코드 실행을 계속한다.",{"type":17,"tag":228,"props":229,"children":230},"br",{},[],{"type":22,"value":44},{"type":17,"tag":18,"props":233,"children":234},{},[235],{"type":22,"value":236},"함수 호출이 종료되면 함수 호출 이전으로 되돌아가기 위해 현재 실행중인 코드와 이전에 실행하던 코드를 구분하여 관리해야 한다. 이처럼 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.",{"type":17,"tag":141,"props":238,"children":239},{},[240,245,250],{"type":17,"tag":145,"props":241,"children":242},{},[243],{"type":22,"value":244},"선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프를 구분하여 등록하고 상태 변화(식별자에 바인딩된 값의 변화)를 지속적으로 관리할 수 있어야 한다.",{"type":17,"tag":145,"props":246,"children":247},{},[248],{"type":22,"value":249},"스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상위 스코프로 이동하여 식별자를 검색할 수 있어야 한다.",{"type":17,"tag":145,"props":251,"children":252},{},[253],{"type":22,"value":254},"현재 실행 중인 코드의 실행 순서를 변경(예를 들어, 함수 호출에 의한 실행 순서 변경)할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.",{"type":17,"tag":18,"props":256,"children":257},{},[258],{"type":22,"value":44},{"type":17,"tag":18,"props":260,"children":261},{},[262,264,270],{"type":22,"value":263},"이 모든 것을 관리하는 것이 바로 ",{"type":17,"tag":265,"props":266,"children":267},"strong",{},[268],{"type":22,"value":269},"실행 컨텍스트",{"type":22,"value":271},"다. 실행 컨텍스트는 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.",{"type":17,"tag":18,"props":273,"children":274},{},[275,277],{"type":22,"value":276},"구체적으로 실행 컨텍스트는 ",{"type":17,"tag":265,"props":278,"children":279},{},[280],{"type":22,"value":281},"식별자를 등록하고 관리하는 스코프와 코드 실행 순서를 구현한 내부 메커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.",{"type":17,"tag":18,"props":283,"children":284},{},[285],{"type":22,"value":44},{"type":17,"tag":18,"props":287,"children":288},{},[289,291,296],{"type":22,"value":290},"식별자와 스코프는 실행 컨텍스트의 ",{"type":17,"tag":265,"props":292,"children":293},{},[294],{"type":22,"value":295},"렉시컬 환경",{"type":22,"value":297},"으로 관리하고",{"type":17,"tag":18,"props":299,"children":300},{},[301,303,308],{"type":22,"value":302},"코드 실행 순서는 ",{"type":17,"tag":265,"props":304,"children":305},{},[306],{"type":22,"value":307},"실행 컨텍스트 스택",{"type":22,"value":309},"으로 관리한다.",{"type":17,"tag":24,"props":311,"children":313},{"id":312},"실행-컨텍스트-스택",[314],{"type":22,"value":307},{"type":17,"tag":100,"props":316,"children":319},{"className":317,"code":318,"language":11,"meta":7},[103],"const x = 1;\n\nfunction foo() {\n    const y = 2;\n    \n    function bar() {\n        const z = 3;\n        console.log(x, y, z);\n    }\n    bar();\n}\nfoo();\n",[320],{"type":17,"tag":67,"props":321,"children":322},{"__ignoreMap":7},[323],{"type":22,"value":318},{"type":17,"tag":18,"props":325,"children":326},{},[327],{"type":22,"value":328},"자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성한다. 그리고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성한다. 이때 생성된 실행 컨텍스트는 스택 자료구조로 관리된다.",{"type":17,"tag":141,"props":330,"children":331},{},[332,345,358,371,384],{"type":17,"tag":145,"props":333,"children":334},{},[335,337],{"type":22,"value":336},"전역 코드의 평가와 실행",{"type":17,"tag":141,"props":338,"children":339},{},[340],{"type":17,"tag":145,"props":341,"children":342},{},[343],{"type":22,"value":344},"전역 실행 컨텍스트를 생성하고, 스택에 푸시, 이때 x와 foo는 전역 실행 컨텍스트에 등록, 전역 코드가 실행되기 시작하여 x에 값이 할당되고 전역 함수 foo가 호출 됨",{"type":17,"tag":145,"props":346,"children":347},{},[348,350],{"type":22,"value":349},"foo 함수 코드의 평가와 실행",{"type":17,"tag":141,"props":351,"children":352},{},[353],{"type":17,"tag":145,"props":354,"children":355},{},[356],{"type":22,"value":357},"전역 코드의 실행은 일시 중단되고 코드의 제어권이 foo 함수 내부로 이동, 엔진은 foo 함수 내부의 함수 코드를 평가하여 foo 함수 실행 컨텍스트를 생성하고 스택에 푸시, 이때 y와 bar가 foo 함수 실행 컨텍스트에 등록 됨, 이후 foo 함수 코드가 실행되기 시작하여 y에 값이 할당되고 bar가 호출 됨.",{"type":17,"tag":145,"props":359,"children":360},{},[361,363],{"type":22,"value":362},"bar 함수 코드의 평가와 실행",{"type":17,"tag":141,"props":364,"children":365},{},[366],{"type":17,"tag":145,"props":367,"children":368},{},[369],{"type":22,"value":370},"foo 함수 코드의 실행은 일시 중단되고 코드의 제어권이 bar 함수 내부로 이동, 엔진은 bar 함수 내부의 함수 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 스택에 푸시, 이때 z가 bar 함수 실행 컨텍스트에 등록 됨, 이후 bar 함수 코드가 실행되기 시작하며 x에 값이 할당되고 console.log 가 호출되고 bar 함수는 종료",{"type":17,"tag":145,"props":372,"children":373},{},[374,376],{"type":22,"value":375},"foo 함수 코드로 복귀",{"type":17,"tag":141,"props":377,"children":378},{},[379],{"type":17,"tag":145,"props":380,"children":381},{},[382],{"type":22,"value":383},"bar 함수가 종료되면 코드의 제어권이 foo 함수로 이동. bar 함수 실행 컨텍스트는 스택에서 제거, 그리고 foo 함수는 더 이상 실행할 코드가 없으므로 종료",{"type":17,"tag":145,"props":385,"children":386},{},[387,389,397,400],{"type":22,"value":388},"전역 코드로 복귀",{"type":17,"tag":141,"props":390,"children":391},{},[392],{"type":17,"tag":145,"props":393,"children":394},{},[395],{"type":22,"value":396},"foo 함수가 종료되면 코드의 제어권이 전역 코드로 이동. foo 함수 실행 컨텍스트는 스택에서 제거, 그리고 더 이상 실행할 코드가 남아 있지 않으므로 전역 실행 컨텍스트도 스택에서 제거",{"type":17,"tag":228,"props":398,"children":399},{},[],{"type":22,"value":44},{"type":17,"tag":18,"props":402,"children":403},{},[404],{"type":22,"value":405},"이처럼 실행 컨텍스트 스택은 코드의 실행 순서를 관리",{"type":17,"tag":24,"props":407,"children":409},{"id":408},"렉시컬-환경",[410],{"type":22,"value":295},{"type":17,"tag":18,"props":412,"children":413},{},[414],{"type":22,"value":415},"렉시컬 환경은 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트다.",{"type":17,"tag":18,"props":417,"children":418},{},[419],{"type":22,"value":420},"실행 컨텍스트 스택이 코드의 실행 순서를 관리한다면",{"type":17,"tag":18,"props":422,"children":423},{},[424],{"type":22,"value":425},"렉시컬 환경은 스코프와 식별자를 관리한다.",{"type":17,"tag":18,"props":427,"children":428},{},[429],{"type":22,"value":44},{"type":17,"tag":18,"props":431,"children":432},{},[433],{"type":22,"value":434},"렉시컬 환경은 키와 값을 갖는 객체 형태의 스코프를 생성하여 식별자를 키로 등록하고 식별자에 바인딩된 값을 관리한다. 즉, 렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체다.",{"type":17,"tag":18,"props":436,"children":437},{},[438],{"type":22,"value":44},{"type":17,"tag":18,"props":440,"children":441},{},[442,444,449,451,456],{"type":22,"value":443},"렉시컬 환경은 ",{"type":17,"tag":67,"props":445,"children":446},{},[447],{"type":22,"value":448},"환경레코드",{"type":22,"value":450},"와 ",{"type":17,"tag":67,"props":452,"children":453},{},[454],{"type":22,"value":455},"외부 렉시컬 환경에 대한 참조",{"type":22,"value":457}," 두 개의 컴포넌트로 구성된다.",{"type":17,"tag":24,"props":459,"children":461},{"id":460},"실행-컨텍스트의-생성과-식별자-검색-과정",[462],{"type":22,"value":463},"실행 컨텍스트의 생성과 식별자 검색 과정",{"type":17,"tag":141,"props":465,"children":466},{},[467,472],{"type":17,"tag":145,"props":468,"children":469},{},[470],{"type":22,"value":471},"전역 실행 컨텍스트 생성",{"type":17,"tag":145,"props":473,"children":474},{},[475,477],{"type":22,"value":476},"전역 렉시컬 환경 생성\n",{"type":17,"tag":141,"props":478,"children":479},{},[480,498,503],{"type":17,"tag":145,"props":481,"children":482},{},[483,485],{"type":22,"value":484},"전역 환경 레코드 생성\n",{"type":17,"tag":141,"props":486,"children":487},{},[488,493],{"type":17,"tag":145,"props":489,"children":490},{},[491],{"type":22,"value":492},"객체 환경 레코드 생성",{"type":17,"tag":145,"props":494,"children":495},{},[496],{"type":22,"value":497},"선언적 환경 레코드 생성",{"type":17,"tag":145,"props":499,"children":500},{},[501],{"type":22,"value":502},"this 바인딩",{"type":17,"tag":145,"props":504,"children":505},{},[506],{"type":22,"value":507},"외부 렉시컬 환경에 대한 참조 결정",{"type":17,"tag":509,"props":510,"children":512},"img",{"src":511},"/blog/images/b6359c6f-9909-40ba-a523-3672c62154fb.png",[],{"type":17,"tag":18,"props":514,"children":515},{},[516],{"type":22,"value":517},"각 실행 과정에 대한 자세한 내용은 책 참고 (양이 엄청 많음 ㅠㅠ)",{"type":17,"tag":24,"props":519,"children":521},{"id":520},"실행-컨텍스트와-블록-레벨-스코프",[522],{"type":22,"value":523},"실행 컨텍스트와 블록 레벨 스코프",{"type":17,"tag":100,"props":525,"children":528},{"className":526,"code":527,"language":11,"meta":7},[103],"let x = 1;\n\nif (true) {\n    let x = 10;\n    console.log(x);\n}\nconsole.log(x);\n",[529],{"type":17,"tag":67,"props":530,"children":531},{"__ignoreMap":7},[532],{"type":22,"value":527},{"type":17,"tag":18,"props":534,"children":535},{},[536],{"type":22,"value":44},{"type":17,"tag":18,"props":538,"children":539},{},[540],{"type":22,"value":541},"if 문의 코드 블록 내에서 let 키워드로 변수가 선언 됨. 따라서 if 문의 코드 블록이 실행되면 if 문의 코드 블록을 위한 블록 레벨 스코프를 생성해야 함.",{"type":17,"tag":18,"props":543,"children":544},{},[545],{"type":22,"value":546},"이를 위해 선언적 환경 레코드(Declarative…)를 갖는 렉시컬 환경을 새롭게 생성",{"type":17,"tag":509,"props":548,"children":550},{"src":549},"/blog/images/9579a02d-dee7-4a24-8b65-79c7d07adbbe.png",[],{"type":17,"tag":18,"props":552,"children":553},{},[554],{"type":22,"value":555},"기존에 렉시컬 환경을 교체",{"type":17,"tag":509,"props":557,"children":559},{"src":558},"/blog/images/6501efe0-a462-4333-a157-9bce898b1f85.png",[],{"type":17,"tag":18,"props":561,"children":562},{},[563],{"type":22,"value":564},"코드 블록의 실행이 종료되면 다시 돌림",{"type":17,"tag":509,"props":566,"children":568},{"src":567},"/blog/images/4196b802-f366-4d98-aa72-077cbd98c15a.png",[],{"title":7,"searchDepth":570,"depth":570,"links":571},2,[],"markdown","content:posts:c1c34454-3dfe-4bbf-bea0-97b3cfc73165.md","content","posts/c1c34454-3dfe-4bbf-bea0-97b3cfc73165.md","md",1718176956648]