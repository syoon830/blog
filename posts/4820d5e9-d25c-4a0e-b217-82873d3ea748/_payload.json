[{"data":1,"prerenderedAt":238},["Reactive",2],{"content-query-HKBbdG0mg6":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":233,"_id":234,"_source":235,"_file":236,"_extension":237},"/posts/4820d5e9-d25c-4a0e-b217-82873d3ea748","posts",false,"","자바스크립트 - 17. 빌트인 객체","자바스크립트 객체는 크게 3개의 객체로 분류",[11],"javascript","2024-02-24T00:00:00.000Z",{"type":14,"children":15,"toc":229},"root",[16,23,43,50,55,67,73,78,87,92,97,110,114,123,129,145,154,158,163,172,177,186,190,197,206,211,215,220],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":24,"props":25,"children":26},"ul",{},[27,33,38],{"type":17,"tag":28,"props":29,"children":30},"li",{},[31],{"type":22,"value":32},"표준 빌트인 객체: ECMAScript 사양에 정의된 객체",{"type":17,"tag":28,"props":34,"children":35},{},[36],{"type":22,"value":37},"호스트 객체: ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행 환경(브라우저 또는 Node.js 환경)에서 추가로 제공하는 객체",{"type":17,"tag":28,"props":39,"children":40},{},[41],{"type":22,"value":42},"사용자 정의 객체: 사용자가 직접 정의한 객체",{"type":17,"tag":44,"props":45,"children":47},"h1",{"id":46},"표준-빌트인-객체",[48],{"type":22,"value":49},"표준 빌트인 객체",{"type":17,"tag":18,"props":51,"children":52},{},[53],{"type":22,"value":54},"Number는 인스턴스 없이 정적으로 호출할 수 있는 정적 메서드를 제공한다.",{"type":17,"tag":56,"props":57,"children":61},"pre",{"className":58,"code":60,"language":11,"meta":7},[59],"language-javascript","const numObj = new Number(1.5);\n\n// toFixed는 Number.prototype의 프로토타입 메서드다\nconsole.log(numObj.toFixed());\n\n// isInteger는 Number의 정적 메서드다.\nconsole.log(Number.isInteger(0.5));\n",[62],{"type":17,"tag":63,"props":64,"children":65},"code",{"__ignoreMap":7},[66],{"type":22,"value":60},{"type":17,"tag":44,"props":68,"children":70},{"id":69},"원시값과-래퍼-객체",[71],{"type":22,"value":72},"원시값과 래퍼 객체",{"type":17,"tag":18,"props":74,"children":75},{},[76],{"type":22,"value":77},"문자열이나 숫자, 불리언 등의 원시값이 있는데도 문자열, 숫자, 불리언 객체를 생성하는 String, Number, Boolean 등의 표준 빌트인 생성자 함수가 존재하는 이유는 무엇일까?",{"type":17,"tag":56,"props":79,"children":82},{"className":80,"code":81,"language":11,"meta":7},[59],"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n",[83],{"type":17,"tag":63,"props":84,"children":85},{"__ignoreMap":7},[86],{"type":22,"value":81},{"type":17,"tag":18,"props":88,"children":89},{},[90],{"type":22,"value":91},"\\n",{"type":17,"tag":18,"props":93,"children":94},{},[95],{"type":22,"value":96},"이는 마침표 표기법으로 접근하면 자바스크립트 엔진이 일시적으로 원시값을 연관된 객체로 변환해 주기 때문이다. 프로퍼티에 접근하거나 메서드를 호출하고 다시 원시값으로 돌린다.",{"type":17,"tag":18,"props":98,"children":99},{},[100,102,108],{"type":22,"value":101},"이처럼 문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체를 ",{"type":17,"tag":103,"props":104,"children":105},"strong",{},[106],{"type":22,"value":107},"래퍼 객체",{"type":22,"value":109},"라 한다.",{"type":17,"tag":18,"props":111,"children":112},{},[113],{"type":22,"value":91},{"type":17,"tag":56,"props":115,"children":118},{"className":116,"code":117,"language":11,"meta":7},[59],"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n\n// 래퍼 객체로 프로퍼티에 접근하거나 메서드를 호출한 후, 다시 원시값으로 되돌린다.\nconsole.log(typeof str); // string\n",[119],{"type":17,"tag":63,"props":120,"children":121},{"__ignoreMap":7},[122],{"type":22,"value":117},{"type":17,"tag":44,"props":124,"children":126},{"id":125},"전역-객체",[127],{"type":22,"value":128},"전역 객체",{"type":17,"tag":18,"props":130,"children":131},{},[132,134,143],{"type":22,"value":133},"어떤 객체보다도 먼저 생성되는 특수한 객체. 지칭하는 이름이 제각각. 브라우저 환경에서는 window, ",{"type":17,"tag":135,"props":136,"children":140},"a",{"href":137,"rel":138},"http://node.sj/",[139],"nofollow",[141],{"type":22,"value":142},"Node",{"type":22,"value":144},".js 환경에서는 global",{"type":17,"tag":146,"props":147,"children":148},"blockquote",{},[149],{"type":17,"tag":18,"props":150,"children":151},{},[152],{"type":22,"value":153},"ES11부터는 통일된 globalThis 식별자를 사용한다.",{"type":17,"tag":18,"props":155,"children":156},{},[157],{"type":22,"value":91},{"type":17,"tag":18,"props":159,"children":160},{},[161],{"type":22,"value":162},"var 키워드로 선언한 전역 변수와 선언하지 않은 변수에 값을 할당한 암묵적 전역",{"type":17,"tag":56,"props":164,"children":167},{"className":165,"code":166,"language":11,"meta":7},[59],"// var 키워드로 선언한 전역 변수\nvar foo = 1;\nconsole.log(window.foo); // 1\n\n// bar는 전역 변수가 아니라 전역 객체의 프로퍼티다.\nbar = 2;\nconsole.log(window.bar); // 2\n\nfunction baz() {}\nconsole.log(window.baz());\n",[168],{"type":17,"tag":63,"props":169,"children":170},{"__ignoreMap":7},[171],{"type":22,"value":166},{"type":17,"tag":18,"props":173,"children":174},{},[175],{"type":22,"value":176},"let이나 const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. 즉, window.foo와 같이 접근할 수 없다. let이나 const 키워드로 선언한 전역 변수는 보이지 않는 개념적인 블록(전역 렉시컬 환경의 선언적 레코드) 내에 존재하게 된다.",{"type":17,"tag":56,"props":178,"children":181},{"className":179,"code":180,"language":11,"meta":7},[59],"let foo = 123;\nconsole.log(window.foo); // undefined\n",[182],{"type":17,"tag":63,"props":183,"children":184},{"__ignoreMap":7},[185],{"type":22,"value":180},{"type":17,"tag":18,"props":187,"children":188},{},[189],{"type":22,"value":91},{"type":17,"tag":191,"props":192,"children":194},"h2",{"id":193},"암묵적-전역",[195],{"type":22,"value":196},"암묵적 전역",{"type":17,"tag":56,"props":198,"children":201},{"className":199,"code":200,"language":11,"meta":7},[59],"var x = 10;\n\nfunction foo() {\n    y = 20;\n}\n\nfoo();\nconsole.log(x + y); // 20\n",[202],{"type":17,"tag":63,"props":203,"children":204},{"__ignoreMap":7},[205],{"type":22,"value":200},{"type":17,"tag":18,"props":207,"children":208},{},[209],{"type":22,"value":210},"y는 변수 선언 없이 단지 전역 객체의 프로퍼티로 추가되었을 뿐이다. 따라서 y는 변수가 아니다. y는 변수가 아니므로 변수 호이스팅이 발생하지 않는다.",{"type":17,"tag":18,"props":212,"children":213},{},[214],{"type":22,"value":91},{"type":17,"tag":18,"props":216,"children":217},{},[218],{"type":22,"value":219},"y는 window의 객체의 프로퍼티이니 삭제가 가능하다. 전역 변수는 삭제 불가",{"type":17,"tag":56,"props":221,"children":224},{"className":222,"code":223,"language":11,"meta":7},[59],"var x = 10;\ny = 20; \nconsole.log(window.x); // 10\nconsole.log(window.y); // 20\ndelete x;\ndelete y;\nconsole.log(window.x); // 10\nconsole.log(window.y); // undefined\n",[225],{"type":17,"tag":63,"props":226,"children":227},{"__ignoreMap":7},[228],{"type":22,"value":223},{"title":7,"searchDepth":230,"depth":230,"links":231},2,[232],{"id":193,"depth":230,"text":196},"markdown","content:posts:4820d5e9-d25c-4a0e-b217-82873d3ea748.md","content","posts/4820d5e9-d25c-4a0e-b217-82873d3ea748.md","md",1710325141886]