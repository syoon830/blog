[{"data":1,"prerenderedAt":79},["Reactive",2],{"content-query-JZjfpL4spX":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":13,"body":14,"_type":74,"_id":75,"_source":76,"_file":77,"_extension":78},"/posts/38527f39-69f6-4663-ba58-351831ed48b4","posts",false,"","nuxt3 $fetch","nuxt3에서는 $fetch는 ofetch라는 라이브러리를 사용하고 있다. (ofetch는 node, browser 환경 두군데서 같이 사용할 수 있다.)",[11,12],"nuxt","axios","2024-01-22T00:00:00.000Z",{"type":15,"children":16,"toc":70},"root",[17,24,29,34,47,53],{"type":18,"tag":19,"props":20,"children":21},"element","p",{},[22],{"type":23,"value":9},"text",{"type":18,"tag":19,"props":25,"children":26},{},[27],{"type":23,"value":28},"\\n",{"type":18,"tag":19,"props":30,"children":31},{},[32],{"type":23,"value":33},"그래서 기존 axios로 설정된 코드들을 뜯어 고쳤다.",{"type":18,"tag":35,"props":36,"children":41},"pre",{"className":37,"code":39,"language":40,"meta":7},[38],"language-javascript","// 기존\nimport axios from 'axios';\nimport type { AxiosInstance } from 'axios';\nimport {useAuthStore} from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const authStore = useAuthStore();\n    const axiosInstance: AxiosInstance = axios.create({\n        baseURL: config.BASE_URL,\n    });\n\n    axiosInstance.interceptors.request.use((config) => {\n        if (authStore.isAuthenticated) {\n            config.headers.Authorization = `Bearer ${authStore.token}`;\n        } else {\n            config.headers.Authorization = `Basic ${btoaClientInfo}`;\n        }\n        return config;\n    });\n\n    nuxtApp.provide('axios', axiosInstance);\n});\n\n// 수정\nimport { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const apiFetch = $fetch.create({\n        baseURL: config.BASE_URL,\n        onRequest({ options }) {\n            const authStore = useAuthStore();\n            if (authStore.isAuthenticated) {\n                options.headers = {\n                    Authorization: `Bearer ${authStore.token}`\n                };\n            } else {\n                options.headers = {\n                    Authorization: `Basic ${btoaClientInfo}`\n                };\n            }\n        }\n    })\n    \n    nuxtApp.provide('apiFetch', apiFetch);\n});\n","javascript",[42],{"type":18,"tag":43,"props":44,"children":45},"code",{"__ignoreMap":7},[46],{"type":23,"value":39},{"type":18,"tag":48,"props":49,"children":51},"h2",{"id":50},"참고",[52],{"type":23,"value":50},{"type":18,"tag":54,"props":55,"children":56},"ul",{},[57],{"type":18,"tag":58,"props":59,"children":60},"li",{},[61],{"type":18,"tag":62,"props":63,"children":67},"a",{"href":64,"rel":65},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-%EC%9D%98-%EC%B0%A8%EC%9D%B4",[66],"nofollow",[68],{"type":23,"value":69},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-의-차이",{"title":7,"searchDepth":71,"depth":71,"links":72},2,[73],{"id":50,"depth":71,"text":50},"markdown","content:posts:38527f39-69f6-4663-ba58-351831ed48b4.md","content","posts/38527f39-69f6-4663-ba58-351831ed48b4.md","md",1705911073865]