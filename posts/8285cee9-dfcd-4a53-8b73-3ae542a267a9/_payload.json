[{"data":1,"prerenderedAt":578},["Reactive",2],{"content-query-5oiH066leo":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":573,"_id":574,"_source":575,"_file":576,"_extension":577},"/posts/8285cee9-dfcd-4a53-8b73-3ae542a267a9","posts",false,"","자바스크립트 - 8. 원시 값과 객체의 비교","데이터 타입은 크게 원시 타입과 객체 타입으로 구분",[11],"javascript","2024-02-15T00:00:00.000Z",{"type":14,"children":15,"toc":561},"root",[16,39,44,56,68,72,207,335,342,347,358,363,368,373,378,382,389,398,406,410,419,423,429,434,443,455,459,464,473,477,482,487,491,496,510,516,525,529,534,538,542,550],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21,24,30,32,37],{"type":22,"value":23},"text","데이터 타입은 크게 ",{"type":17,"tag":25,"props":26,"children":27},"strong",{},[28],{"type":22,"value":29},"원시 타입",{"type":22,"value":31},"과 ",{"type":17,"tag":25,"props":33,"children":34},{},[35],{"type":22,"value":36},"객체 타입",{"type":22,"value":38},"으로 구분",{"type":17,"tag":18,"props":40,"children":41},{},[42],{"type":22,"value":43},"\\n",{"type":17,"tag":18,"props":45,"children":46},{},[47,49,54],{"type":22,"value":48},"원시값은 식별자 메모리 주소에 ",{"type":17,"tag":25,"props":50,"children":51},{},[52],{"type":22,"value":53},"값",{"type":22,"value":55},"이 저장되어있고",{"type":17,"tag":18,"props":57,"children":58},{},[59,61,66],{"type":22,"value":60},"객체는 식별자 메모리 주소에 해당 ",{"type":17,"tag":25,"props":62,"children":63},{},[64],{"type":22,"value":65},"객체 메모리 주소",{"type":22,"value":67},"가 저장되어 있다",{"type":17,"tag":18,"props":69,"children":70},{},[71],{"type":22,"value":43},{"type":17,"tag":73,"props":74,"children":75},"details",{},[76,82,98,170,202],{"type":17,"tag":77,"props":78,"children":79},"summary",{},[80],{"type":22,"value":81},"메모리 주소가 'a1', 'a2'가 있다고 할게\n그리고 코드는 let str = \"string\"이야 자바스크립트 엔진은 런타임 이전에 'a1'이나 'a2'중에 메모리 공간을 확보해 (여기서는 'a1'을 확보 했다고 할게\n그리고 식별자 str을 메모리 주소 'a1'에 연결을 한다? (이 문장이 맞는지 모르겠어)\n그리고 런타임시 a1에 \"string\"을 저장한다\n이게 맞을까?",{"type":17,"tag":18,"props":83,"children":84},{},[85,87,96],{"type":22,"value":86},"네, 맞습니다. JavaScript에서 ",{"type":17,"tag":88,"props":89,"children":90},"code",{},[91],{"type":17,"tag":25,"props":92,"children":93},{},[94],{"type":22,"value":95},"let str = \"string\";",{"type":22,"value":97}," 코드에 대한 처리를 단순화하여 설명하면 다음과 같습니다:",{"type":17,"tag":99,"props":100,"children":101},"ol",{},[102,121,145],{"type":17,"tag":103,"props":104,"children":105},"li",{},[106,111,113,119],{"type":17,"tag":25,"props":107,"children":108},{},[109],{"type":22,"value":110},"메모리 공간 확보",{"type":22,"value":112},": JavaScript 엔진은 변수 **",{"type":17,"tag":88,"props":114,"children":116},{"className":115},[],[117],{"type":22,"value":118},"str",{"type":22,"value":120},"**에 대한 메모리 공간을 확보합니다. 이를 위해 메모리 주소 'a1'을 할당한다고 가정할 수 있습니다.",{"type":17,"tag":103,"props":122,"children":123},{},[124,129,131,136,138,143],{"type":17,"tag":25,"props":125,"children":126},{},[127],{"type":22,"value":128},"식별자와 메모리 주소 연결",{"type":22,"value":130},": 식별자 **",{"type":17,"tag":88,"props":132,"children":134},{"className":133},[],[135],{"type":22,"value":118},{"type":22,"value":137},"**은 이 메모리 주소 'a1'에 연결됩니다. 이는 **",{"type":17,"tag":88,"props":139,"children":141},{"className":140},[],[142],{"type":22,"value":118},{"type":22,"value":144},"**이라는 이름을 사용할 때, JavaScript 엔진이 메모리 주소 'a1'을 참조하도록 합니다.",{"type":17,"tag":103,"props":146,"children":147},{},[148,153,155,161,163,168],{"type":17,"tag":25,"props":149,"children":150},{},[151],{"type":22,"value":152},"런타임 시 값 저장",{"type":22,"value":154},": 코드가 런타임에 실행될 때, 문자열 **",{"type":17,"tag":88,"props":156,"children":158},{"className":157},[],[159],{"type":22,"value":160},"\"string\"",{"type":22,"value":162},"**은 메모리 주소 'a1'에 저장됩니다. 이 경우, **",{"type":17,"tag":88,"props":164,"children":166},{"className":165},[],[167],{"type":22,"value":118},{"type":22,"value":169},"**은 이 문자열 값을 직접적으로 가리키게 됩니다.",{"type":17,"tag":18,"props":171,"children":172},{},[173,175,182,184,191,193,200],{"type":22,"value":174},"이 과정에서 중요한 점은 문자열 ",{"type":17,"tag":88,"props":176,"children":177},{},[178],{"type":17,"tag":25,"props":179,"children":180},{},[181],{"type":22,"value":160},{"type":22,"value":183},"이 원시 타입의 값으로 취급된다는 것입니다. JavaScript에서 문자열은 불변의 원시 타입으로, 변수에 직접 저장됩니다 (복잡한 내부 최적화나 문자열 인터닝을 고려하지 않을 때). 따라서 ",{"type":17,"tag":88,"props":185,"children":186},{},[187],{"type":17,"tag":25,"props":188,"children":189},{},[190],{"type":22,"value":118},{"type":22,"value":192}," 변수는 문자열 ",{"type":17,"tag":88,"props":194,"children":195},{},[196],{"type":17,"tag":25,"props":197,"children":198},{},[199],{"type":22,"value":160},{"type":22,"value":201},"을 직접적으로 가지고 있으며, 이 값은 메모리 주소 'a1'에 위치하게 됩니다.",{"type":17,"tag":18,"props":203,"children":204},{},[205],{"type":22,"value":206},"이 설명은 JavaScript 엔진의 메모리 할당과 관리를 단순화한 것이며, 실제 엔진의 구현은 이보다 훨씬 복잡할 수 있습니다. 하지만 기본적인 개념은 위와 같습니다.",{"type":17,"tag":73,"props":208,"children":209},{},[210,215,229,298,312],{"type":17,"tag":77,"props":211,"children":212},{},[213],{"type":22,"value":214},"식별자 `str`은 이 메모리 주소 'a1'에 연결됩니다. 이 문장에서\n이 때 str은 메모리에 어디 있는걸까? 내가 이상하게 생각하고 있는건가?",{"type":17,"tag":18,"props":216,"children":217},{},[218,220,227],{"type":22,"value":219},"JavaScript에서 ",{"type":17,"tag":88,"props":221,"children":222},{},[223],{"type":17,"tag":25,"props":224,"children":225},{},[226],{"type":22,"value":95},{"type":22,"value":228}," 코드의 처리 과정에 대해 질문하셨군요. 이 과정을 단계별로 살펴보겠습니다:",{"type":17,"tag":99,"props":230,"children":231},{},[232,249,273],{"type":17,"tag":103,"props":233,"children":234},{},[235,240,242,247],{"type":17,"tag":25,"props":236,"children":237},{},[238],{"type":22,"value":239},"메모리 공간 할당",{"type":22,"value":241},": JavaScript 엔진이 코드를 실행하기 전에, **",{"type":17,"tag":88,"props":243,"children":245},{"className":244},[],[246],{"type":22,"value":118},{"type":22,"value":248},"**이라는 변수를 위한 메모리 공간을 확보합니다. 이 공간을 메모리 주소 'a1'이라고 가정해 봅시다.",{"type":17,"tag":103,"props":250,"children":251},{},[252,257,259,264,266,271],{"type":17,"tag":25,"props":253,"children":254},{},[255],{"type":22,"value":256},"식별자 연결",{"type":22,"value":258},": **",{"type":17,"tag":88,"props":260,"children":262},{"className":261},[],[263],{"type":22,"value":118},{"type":22,"value":265},"**이라는 식별자는 메모리 주소 'a1'에 연결됩니다. 즉, **",{"type":17,"tag":88,"props":267,"children":269},{"className":268},[],[270],{"type":22,"value":118},{"type":22,"value":272},"**이라는 이름을 사용할 때 JavaScript 엔진은 'a1'이라는 메모리 주소를 참조하게 됩니다.",{"type":17,"tag":103,"props":274,"children":275},{},[276,281,283,289,291,296],{"type":17,"tag":25,"props":277,"children":278},{},[279],{"type":22,"value":280},"런타임시 값 할당",{"type":22,"value":282},": 런타임에 이르러 **",{"type":17,"tag":88,"props":284,"children":286},{"className":285},[],[287],{"type":22,"value":288},"str = \"string\";",{"type":22,"value":290},"**이 실행되면, 문자열 **",{"type":17,"tag":88,"props":292,"children":294},{"className":293},[],[295],{"type":22,"value":160},{"type":22,"value":297},"**은 메모리 주소 'a1'에 저장됩니다.",{"type":17,"tag":18,"props":299,"children":300},{},[301,303,310],{"type":22,"value":302},"이 과정에서 ",{"type":17,"tag":88,"props":304,"children":305},{},[306],{"type":17,"tag":25,"props":307,"children":308},{},[309],{"type":22,"value":118},{"type":22,"value":311},"이라는 식별자는 실행 컨텍스트의 환경 레코드에 있습니다. 이 환경 레코드는 메모리의 어떤 부분에 있으며, JavaScript 엔진이 변수 이름과 해당 메모리 주소를 매핑하는 데 사용합니다. 환경 레코드의 정확한 저장 위치는 JavaScript 엔진의 구현 세부 사항에 따라 다르며, 개발자가 직접적으로 접근하거나 확인할 수 있는 부분은 아닙니다.",{"type":17,"tag":18,"props":313,"children":314},{},[315,317,324,326,333],{"type":22,"value":316},"즉, ",{"type":17,"tag":88,"props":318,"children":319},{},[320],{"type":17,"tag":25,"props":321,"children":322},{},[323],{"type":22,"value":118},{"type":22,"value":325},"이라는 식별자는 메모리상의 특정 위치에 있으나, 이 위치는 엔진 내부의 구현에 의존적이며, 식별자는 메모리 주소 'a1'을 참조하여 실제 값 ",{"type":17,"tag":88,"props":327,"children":328},{},[329],{"type":17,"tag":25,"props":330,"children":331},{},[332],{"type":22,"value":160},{"type":22,"value":334},"에 접근할 수 있게 됩니다.",{"type":17,"tag":336,"props":337,"children":339},"h2",{"id":338},"원시-값",[340],{"type":22,"value":341},"원시 값",{"type":17,"tag":18,"props":343,"children":344},{},[345],{"type":22,"value":346},"원시 타입의 값, 즉 원시 값은 변경 불가능한 값",{"type":17,"tag":348,"props":349,"children":353},"pre",{"className":350,"code":352,"language":11,"meta":7},[351],"language-javascript","var score;\nscore = 80;\nscore = 90;\n",[354],{"type":17,"tag":88,"props":355,"children":356},{"__ignoreMap":7},[357],{"type":22,"value":352},{"type":17,"tag":18,"props":359,"children":360},{},[361],{"type":22,"value":362},"undefined가 80으로 바뀌고 80이 90으로 바뀌는게 아니라",{"type":17,"tag":18,"props":364,"children":365},{},[366],{"type":22,"value":367},"값은 새로운 메모리 공간을 확보하고 값을 저장한 후, 변수는 원시 값을 가리킨다.",{"type":17,"tag":369,"props":370,"children":372},"img",{"src":371},"/blog/images/fbafac7e-94da-4242-9183-c10db9ee058b.png",[],{"type":17,"tag":18,"props":374,"children":375},{},[376],{"type":22,"value":377},"불변성을 갖는 원시 값을 할당한 변수는 재할당 이외에 변수 값을 변경할 수 있는 방법이 없다.",{"type":17,"tag":18,"props":379,"children":380},{},[381],{"type":22,"value":43},{"type":17,"tag":383,"props":384,"children":386},"h3",{"id":385},"값에-의한-전달",[387],{"type":22,"value":388},"값에 의한 전달",{"type":17,"tag":348,"props":390,"children":393},{"className":391,"code":392,"language":11,"meta":7},[351],"var score = 80;\n\n// copy 변수에는 score 변수의 값 80이 복사되어 할당된다.\nvar copy = score;\n\nconsole.log(score, copy); // 80 80\nconsole.log(score === copy); // true\n",[394],{"type":17,"tag":88,"props":395,"children":396},{"__ignoreMap":7},[397],{"type":22,"value":392},{"type":17,"tag":18,"props":399,"children":400},{},[401],{"type":17,"tag":25,"props":402,"children":403},{},[404],{"type":22,"value":405},"score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.",{"type":17,"tag":18,"props":407,"children":408},{},[409],{"type":22,"value":43},{"type":17,"tag":348,"props":411,"children":414},{"className":412,"code":413,"language":11,"meta":7},[351],"score = 100;\nconsole.log(score, copy); // 100 80\nconsole.log(score === copy); // false\n",[415],{"type":17,"tag":88,"props":416,"children":417},{"__ignoreMap":7},[418],{"type":22,"value":413},{"type":17,"tag":18,"props":420,"children":421},{},[422],{"type":22,"value":43},{"type":17,"tag":383,"props":424,"children":426},{"id":425},"원시-값인-문자열은-다른-원시-값과-비교할-때-독특한-특징이-있음",[427],{"type":22,"value":428},"원시 값인 문자열은 다른 원시 값과 비교할 때 독특한 특징이 있음",{"type":17,"tag":18,"props":430,"children":431},{},[432],{"type":22,"value":433},"문자열은 유사 배열 객체이면서 이터러블이므로 배열과 유사하게 각 문자에 접근할 수 있다.",{"type":17,"tag":348,"props":435,"children":438},{"className":436,"code":437,"language":11,"meta":7},[351],"var str = 'string';\n\n// 배열처럼 인덱스를 사용해 각 문자에 접근할 수 있다.\nconsole.log(str[0]); // s\n\n// 원시 값인 문자열이 객체처럼 동작한다.\nconsole.log(str.length);\nconsole.log(str.toUpperCase());\n",[439],{"type":17,"tag":88,"props":440,"children":441},{"__ignoreMap":7},[442],{"type":22,"value":437},{"type":17,"tag":18,"props":444,"children":445},{},[446,448,453],{"type":22,"value":447},"어떻게 원시 값이 객체처럼 동작할까? 그 이유는 원시 값을 감싸는 ",{"type":17,"tag":25,"props":449,"children":450},{},[451],{"type":22,"value":452},"래퍼 객체",{"type":22,"value":454},"로 자동 변환되기 때문이다. 자세한건 이후에",{"type":17,"tag":18,"props":456,"children":457},{},[458],{"type":22,"value":43},{"type":17,"tag":18,"props":460,"children":461},{},[462],{"type":22,"value":463},"여기서 퀴즈!",{"type":17,"tag":348,"props":465,"children":468},{"className":466,"code":467,"language":11,"meta":7},[351],"var arr = [1, 2, 3];\narr[0] = 4;\nconsole.log(arr) // ??\n\nvar str = 'string';\nstr[0] = 'S';\nconsole.log(str); // ??\n",[469],{"type":17,"tag":88,"props":470,"children":471},{"__ignoreMap":7},[472],{"type":22,"value":467},{"type":17,"tag":18,"props":474,"children":475},{},[476],{"type":22,"value":43},{"type":17,"tag":336,"props":478,"children":480},{"id":479},"객체",[481],{"type":22,"value":479},{"type":17,"tag":18,"props":483,"children":484},{},[485],{"type":22,"value":486},"객체 타입의 값, 즉 객체는 변경 가능한 값이다.",{"type":17,"tag":18,"props":488,"children":489},{},[490],{"type":22,"value":43},{"type":17,"tag":18,"props":492,"children":493},{},[494],{"type":22,"value":495},"용어정리",{"type":17,"tag":497,"props":498,"children":499},"ul",{},[500,505],{"type":17,"tag":103,"props":501,"children":502},{},[503],{"type":22,"value":504},"일반적으로 원시 값을 할당한 경우 “변수는 O값을 갖는다” 또는 “변수의 값은 O다”라고 표현하고",{"type":17,"tag":103,"props":506,"children":507},{},[508],{"type":22,"value":509},"객체를 할당한 변수의 경우 “변수는 객체를 참조하고 있다” 또는 “변수는 객체를 가리키고 있다”라고 표현",{"type":17,"tag":383,"props":511,"children":513},{"id":512},"참조에-의한-전달",[514],{"type":22,"value":515},"참조에 의한 전달",{"type":17,"tag":348,"props":517,"children":520},{"className":518,"code":519,"language":11,"meta":7},[351],"var person = {\n    name: 'Lee'\n}\n\nvar copy = person;\n\ncopy.name = 'kim';\n\nconsole.log(person.name); // kim;\nconsole.log(copy.name); // kim;\n",[521],{"type":17,"tag":88,"props":522,"children":523},{"__ignoreMap":7},[524],{"type":22,"value":519},{"type":17,"tag":18,"props":526,"children":527},{},[528],{"type":22,"value":43},{"type":17,"tag":18,"props":530,"children":531},{},[532],{"type":22,"value":533},"정확한 용어는 존재하지 않지만 전달되는 값의 종류에 원시 값인지 참조 값인지 구별해서 강조하는 의미에서 “값에 의한 전달”, “참조에 의한 전달”로 구분하여 부르기 함.",{"type":17,"tag":18,"props":535,"children":536},{},[537],{"type":22,"value":43},{"type":17,"tag":539,"props":540,"children":541},"hr",{},[],{"type":17,"tag":336,"props":543,"children":545},{"id":544},"참고",[546],{"type":17,"tag":25,"props":547,"children":548},{},[549],{"type":22,"value":544},{"type":17,"tag":497,"props":551,"children":552},{},[553],{"type":17,"tag":103,"props":554,"children":555},{},[556],{"type":17,"tag":25,"props":557,"children":558},{},[559],{"type":22,"value":560},"이웅모, 「모던 자바스크립트 Deep Dive」, 위키북스, 2020",{"title":7,"searchDepth":562,"depth":562,"links":563},2,[564,569,572],{"id":338,"depth":562,"text":341,"children":565},[566,568],{"id":385,"depth":567,"text":388},3,{"id":425,"depth":567,"text":428},{"id":479,"depth":562,"text":479,"children":570},[571],{"id":512,"depth":567,"text":515},{"id":544,"depth":562,"text":544},"markdown","content:posts:8285cee9-dfcd-4a53-8b73-3ae542a267a9.md","content","posts/8285cee9-dfcd-4a53-8b73-3ae542a267a9.md","md",1719041868615]