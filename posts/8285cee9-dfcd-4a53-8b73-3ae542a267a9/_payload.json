[{"data":1,"prerenderedAt":580},["Reactive",2],{"content-query-5oiH066leo":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":575,"_id":576,"_source":577,"_file":578,"_extension":579},"/posts/8285cee9-dfcd-4a53-8b73-3ae542a267a9","posts",false,"","자바스크립트 - 8. 원시 값과 객체의 비교","데이터 타입은 크게 원시 타입과 객체 타입으로 구분",[11],"javascript","2024-02-15T00:00:00.000Z",{"type":14,"children":15,"toc":563},"root",[16,39,44,56,68,72,205,328,332,337,344,349,360,365,370,375,380,384,391,400,408,412,421,425,431,436,445,457,461,466,475,479,484,489,493,498,512,518,527,531,536,540,544,552],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21,24,30,32,37],{"type":22,"value":23},"text","데이터 타입은 크게 ",{"type":17,"tag":25,"props":26,"children":27},"strong",{},[28],{"type":22,"value":29},"원시 타입",{"type":22,"value":31},"과 ",{"type":17,"tag":25,"props":33,"children":34},{},[35],{"type":22,"value":36},"객체 타입",{"type":22,"value":38},"으로 구분",{"type":17,"tag":18,"props":40,"children":41},{},[42],{"type":22,"value":43},"\\n",{"type":17,"tag":18,"props":45,"children":46},{},[47,49,54],{"type":22,"value":48},"원시값은 식별자 메모리 주소에 ",{"type":17,"tag":25,"props":50,"children":51},{},[52],{"type":22,"value":53},"값",{"type":22,"value":55},"이 저장되어있고",{"type":17,"tag":18,"props":57,"children":58},{},[59,61,66],{"type":22,"value":60},"객체는 식별자 메모리 주소에 해당 ",{"type":17,"tag":25,"props":62,"children":63},{},[64],{"type":22,"value":65},"객체 메모리 주소",{"type":22,"value":67},"가 저장되어 있다",{"type":17,"tag":18,"props":69,"children":70},{},[71],{"type":22,"value":43},{"type":17,"tag":73,"props":74,"children":75},"details",{},[76,82,99,171,200],{"type":17,"tag":77,"props":78,"children":79},"summary",{},[80],{"type":22,"value":81},"메모리 주소가 'a1', 'a2'가 있다고 할게\n그리고 코드는 let str = \"string\"이야 자바스크립트 엔진은 런타임 이전에 'a1'이나 'a2'중에 메모리 공간을 확보해 (여기서는 'a1'을 확보 했다고 할게\n그리고 식별자 str을 메모리 주소 'a1'에 연결을 한다? (이 문장이 맞는지 모르겠어)\n그리고 런타임시 a1에 \"string\"을 저장한다\n이게 맞을까?",{"type":17,"tag":18,"props":83,"children":84},{},[85,87,97],{"type":22,"value":86},"네, 맞습니다. JavaScript에서 ",{"type":17,"tag":25,"props":88,"children":89},{},[90],{"type":17,"tag":91,"props":92,"children":94},"code",{"className":93},[],[95],{"type":22,"value":96},"let str = \"string\";",{"type":22,"value":98}," 코드에 대한 처리를 단순화하여 설명하면 다음과 같습니다:",{"type":17,"tag":100,"props":101,"children":102},"ol",{},[103,122,146],{"type":17,"tag":104,"props":105,"children":106},"li",{},[107,112,114,120],{"type":17,"tag":25,"props":108,"children":109},{},[110],{"type":22,"value":111},"메모리 공간 확보",{"type":22,"value":113},": JavaScript 엔진은 변수 **",{"type":17,"tag":91,"props":115,"children":117},{"className":116},[],[118],{"type":22,"value":119},"str",{"type":22,"value":121},"**에 대한 메모리 공간을 확보합니다. 이를 위해 메모리 주소 'a1'을 할당한다고 가정할 수 있습니다.",{"type":17,"tag":104,"props":123,"children":124},{},[125,130,132,137,139,144],{"type":17,"tag":25,"props":126,"children":127},{},[128],{"type":22,"value":129},"식별자와 메모리 주소 연결",{"type":22,"value":131},": 식별자 **",{"type":17,"tag":91,"props":133,"children":135},{"className":134},[],[136],{"type":22,"value":119},{"type":22,"value":138},"**은 이 메모리 주소 'a1'에 연결됩니다. 이는 **",{"type":17,"tag":91,"props":140,"children":142},{"className":141},[],[143],{"type":22,"value":119},{"type":22,"value":145},"**이라는 이름을 사용할 때, JavaScript 엔진이 메모리 주소 'a1'을 참조하도록 합니다.",{"type":17,"tag":104,"props":147,"children":148},{},[149,154,156,162,164,169],{"type":17,"tag":25,"props":150,"children":151},{},[152],{"type":22,"value":153},"런타임 시 값 저장",{"type":22,"value":155},": 코드가 런타임에 실행될 때, 문자열 **",{"type":17,"tag":91,"props":157,"children":159},{"className":158},[],[160],{"type":22,"value":161},"\"string\"",{"type":22,"value":163},"**은 메모리 주소 'a1'에 저장됩니다. 이 경우, **",{"type":17,"tag":91,"props":165,"children":167},{"className":166},[],[168],{"type":22,"value":119},{"type":22,"value":170},"**은 이 문자열 값을 직접적으로 가리키게 됩니다.",{"type":17,"tag":18,"props":172,"children":173},{},[174,176,181,183,191,193,198],{"type":22,"value":175},"이 과정에서 중요한 점은 문자열 **",{"type":17,"tag":91,"props":177,"children":179},{"className":178},[],[180],{"type":22,"value":161},{"type":22,"value":182},"**이 원시 타입의 값으로 취급된다는 것입니다. JavaScript에서 문자열은 불변의 원시 타입으로, 변수에 직접 저장됩니다 (복잡한 내부 최적화나 문자열 인터닝을 고려하지 않을 때). 따라서 ",{"type":17,"tag":25,"props":184,"children":185},{},[186],{"type":17,"tag":91,"props":187,"children":189},{"className":188},[],[190],{"type":22,"value":119},{"type":22,"value":192}," 변수는 문자열 **",{"type":17,"tag":91,"props":194,"children":196},{"className":195},[],[197],{"type":22,"value":161},{"type":22,"value":199},"**을 직접적으로 가지고 있으며, 이 값은 메모리 주소 'a1'에 위치하게 됩니다.",{"type":17,"tag":18,"props":201,"children":202},{},[203],{"type":22,"value":204},"이 설명은 JavaScript 엔진의 메모리 할당과 관리를 단순화한 것이며, 실제 엔진의 구현은 이보다 훨씬 복잡할 수 있습니다. 하지만 기본적인 개념은 위와 같습니다.",{"type":17,"tag":73,"props":206,"children":207},{},[208,213,228,297,309],{"type":17,"tag":77,"props":209,"children":210},{},[211],{"type":22,"value":212},"식별자 `str`은 이 메모리 주소 'a1'에 연결됩니다. 이 문장에서\n이 때 str은 메모리에 어디 있는걸까? 내가 이상하게 생각하고 있는건가?",{"type":17,"tag":18,"props":214,"children":215},{},[216,218,226],{"type":22,"value":217},"JavaScript에서 ",{"type":17,"tag":25,"props":219,"children":220},{},[221],{"type":17,"tag":91,"props":222,"children":224},{"className":223},[],[225],{"type":22,"value":96},{"type":22,"value":227}," 코드의 처리 과정에 대해 질문하셨군요. 이 과정을 단계별로 살펴보겠습니다:",{"type":17,"tag":100,"props":229,"children":230},{},[231,248,272],{"type":17,"tag":104,"props":232,"children":233},{},[234,239,241,246],{"type":17,"tag":25,"props":235,"children":236},{},[237],{"type":22,"value":238},"메모리 공간 할당",{"type":22,"value":240},": JavaScript 엔진이 코드를 실행하기 전에, **",{"type":17,"tag":91,"props":242,"children":244},{"className":243},[],[245],{"type":22,"value":119},{"type":22,"value":247},"**이라는 변수를 위한 메모리 공간을 확보합니다. 이 공간을 메모리 주소 'a1'이라고 가정해 봅시다.",{"type":17,"tag":104,"props":249,"children":250},{},[251,256,258,263,265,270],{"type":17,"tag":25,"props":252,"children":253},{},[254],{"type":22,"value":255},"식별자 연결",{"type":22,"value":257},": **",{"type":17,"tag":91,"props":259,"children":261},{"className":260},[],[262],{"type":22,"value":119},{"type":22,"value":264},"**이라는 식별자는 메모리 주소 'a1'에 연결됩니다. 즉, **",{"type":17,"tag":91,"props":266,"children":268},{"className":267},[],[269],{"type":22,"value":119},{"type":22,"value":271},"**이라는 이름을 사용할 때 JavaScript 엔진은 'a1'이라는 메모리 주소를 참조하게 됩니다.",{"type":17,"tag":104,"props":273,"children":274},{},[275,280,282,288,290,295],{"type":17,"tag":25,"props":276,"children":277},{},[278],{"type":22,"value":279},"런타임시 값 할당",{"type":22,"value":281},": 런타임에 이르러 **",{"type":17,"tag":91,"props":283,"children":285},{"className":284},[],[286],{"type":22,"value":287},"str = \"string\";",{"type":22,"value":289},"**이 실행되면, 문자열 **",{"type":17,"tag":91,"props":291,"children":293},{"className":292},[],[294],{"type":22,"value":161},{"type":22,"value":296},"**은 메모리 주소 'a1'에 저장됩니다.",{"type":17,"tag":18,"props":298,"children":299},{},[300,302,307],{"type":22,"value":301},"이 과정에서 **",{"type":17,"tag":91,"props":303,"children":305},{"className":304},[],[306],{"type":22,"value":119},{"type":22,"value":308},"**이라는 식별자는 실행 컨텍스트의 환경 레코드에 있습니다. 이 환경 레코드는 메모리의 어떤 부분에 있으며, JavaScript 엔진이 변수 이름과 해당 메모리 주소를 매핑하는 데 사용합니다. 환경 레코드의 정확한 저장 위치는 JavaScript 엔진의 구현 세부 사항에 따라 다르며, 개발자가 직접적으로 접근하거나 확인할 수 있는 부분은 아닙니다.",{"type":17,"tag":18,"props":310,"children":311},{},[312,314,319,321,326],{"type":22,"value":313},"즉, **",{"type":17,"tag":91,"props":315,"children":317},{"className":316},[],[318],{"type":22,"value":119},{"type":22,"value":320},"**이라는 식별자는 메모리상의 특정 위치에 있으나, 이 위치는 엔진 내부의 구현에 의존적이며, 식별자는 메모리 주소 'a1'을 참조하여 실제 값 **",{"type":17,"tag":91,"props":322,"children":324},{"className":323},[],[325],{"type":22,"value":161},{"type":22,"value":327},"**에 접근할 수 있게 됩니다.",{"type":17,"tag":18,"props":329,"children":330},{},[331],{"type":22,"value":43},{"type":17,"tag":18,"props":333,"children":334},{},[335],{"type":22,"value":336},"아~ 뒤에 실행컨텍스트, 환경 레코드…",{"type":17,"tag":338,"props":339,"children":341},"h2",{"id":340},"원시-값",[342],{"type":22,"value":343},"원시 값",{"type":17,"tag":18,"props":345,"children":346},{},[347],{"type":22,"value":348},"원시 타입의 값, 즉 원시 값은 변경 불가능한 값",{"type":17,"tag":350,"props":351,"children":355},"pre",{"className":352,"code":354,"language":11,"meta":7},[353],"language-javascript","var score;\nscore = 80;\nscore = 90;\n",[356],{"type":17,"tag":91,"props":357,"children":358},{"__ignoreMap":7},[359],{"type":22,"value":354},{"type":17,"tag":18,"props":361,"children":362},{},[363],{"type":22,"value":364},"undefined가 80으로 바뀌고 80이 90으로 바뀌는게 아니라",{"type":17,"tag":18,"props":366,"children":367},{},[368],{"type":22,"value":369},"값은 새로운 메모리 공간을 확보하고 값을 저장한 후, 변수는 원시 값을 가리킨다.",{"type":17,"tag":371,"props":372,"children":374},"img",{"src":373},"/blog/images/99b7aa7f-5d3e-44f3-aaaf-95d469391e84.png",[],{"type":17,"tag":18,"props":376,"children":377},{},[378],{"type":22,"value":379},"불변성을 갖는 원시 값을 할당한 변수는 재할당 이외에 변수 값을 변경할 수 있는 방법이 없다.",{"type":17,"tag":18,"props":381,"children":382},{},[383],{"type":22,"value":43},{"type":17,"tag":385,"props":386,"children":388},"h3",{"id":387},"값에-의한-전달",[389],{"type":22,"value":390},"값에 의한 전달",{"type":17,"tag":350,"props":392,"children":395},{"className":393,"code":394,"language":11,"meta":7},[353],"var score = 80;\n\n// copy 변수에는 score 변수의 값 80이 복사되어 할당된다.\nvar copy = score;\n\nconsole.log(score, copy); // 80 80\nconsole.log(score === copy); // true\n",[396],{"type":17,"tag":91,"props":397,"children":398},{"__ignoreMap":7},[399],{"type":22,"value":394},{"type":17,"tag":18,"props":401,"children":402},{},[403],{"type":17,"tag":25,"props":404,"children":405},{},[406],{"type":22,"value":407},"score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.",{"type":17,"tag":18,"props":409,"children":410},{},[411],{"type":22,"value":43},{"type":17,"tag":350,"props":413,"children":416},{"className":414,"code":415,"language":11,"meta":7},[353],"score = 100;\nconsole.log(score, copy); // 100 80\nconsole.log(score === copy); // false\n",[417],{"type":17,"tag":91,"props":418,"children":419},{"__ignoreMap":7},[420],{"type":22,"value":415},{"type":17,"tag":18,"props":422,"children":423},{},[424],{"type":22,"value":43},{"type":17,"tag":385,"props":426,"children":428},{"id":427},"원시-값인-문자열은-다른-원시-값과-비교할-때-독특한-특징이-있음",[429],{"type":22,"value":430},"원시 값인 문자열은 다른 원시 값과 비교할 때 독특한 특징이 있음",{"type":17,"tag":18,"props":432,"children":433},{},[434],{"type":22,"value":435},"문자열은 유사 배열 객체이면서 이터러블이므로 배열과 유사하게 각 문자에 접근할 수 있다.",{"type":17,"tag":350,"props":437,"children":440},{"className":438,"code":439,"language":11,"meta":7},[353],"var str = 'string';\n\n// 배열처럼 인덱스를 사용해 각 문자에 접근할 수 있다.\nconsole.log(str[0]); // s\n\n// 원시 값인 문자열이 객체처럼 동작한다.\nconsole.log(str.length);\nconsole.log(str.toUpperCase());\n",[441],{"type":17,"tag":91,"props":442,"children":443},{"__ignoreMap":7},[444],{"type":22,"value":439},{"type":17,"tag":18,"props":446,"children":447},{},[448,450,455],{"type":22,"value":449},"어떻게 원시 값이 객체처럼 동작할까? 그 이유는 원시 값을 감싸는 ",{"type":17,"tag":25,"props":451,"children":452},{},[453],{"type":22,"value":454},"래퍼 객체",{"type":22,"value":456},"로 자동 변환되기 때문이다. 자세한건 이후에",{"type":17,"tag":18,"props":458,"children":459},{},[460],{"type":22,"value":43},{"type":17,"tag":18,"props":462,"children":463},{},[464],{"type":22,"value":465},"여기서 퀴즈!",{"type":17,"tag":350,"props":467,"children":470},{"className":468,"code":469,"language":11,"meta":7},[353],"var arr = [1, 2, 3];\narr[0] = 4;\nconsole.log(arr) // ??\n\nvar str = 'string';\nstr[0] = 'S';\nconsole.log(str); // ??\n",[471],{"type":17,"tag":91,"props":472,"children":473},{"__ignoreMap":7},[474],{"type":22,"value":469},{"type":17,"tag":18,"props":476,"children":477},{},[478],{"type":22,"value":43},{"type":17,"tag":338,"props":480,"children":482},{"id":481},"객체",[483],{"type":22,"value":481},{"type":17,"tag":18,"props":485,"children":486},{},[487],{"type":22,"value":488},"객체 타입의 값, 즉 객체는 변경 가능한 값이다.",{"type":17,"tag":18,"props":490,"children":491},{},[492],{"type":22,"value":43},{"type":17,"tag":18,"props":494,"children":495},{},[496],{"type":22,"value":497},"용어정리",{"type":17,"tag":499,"props":500,"children":501},"ul",{},[502,507],{"type":17,"tag":104,"props":503,"children":504},{},[505],{"type":22,"value":506},"일반적으로 원시 값을 할당한 경우 “변수는 O값을 갖는다” 또는 “변수의 값은 O다”라고 표현하고",{"type":17,"tag":104,"props":508,"children":509},{},[510],{"type":22,"value":511},"객체를 할당한 변수의 경우 “변수는 객체를 참조하고 있다” 또는 “변수는 객체를 가리키고 있다”라고 표현",{"type":17,"tag":385,"props":513,"children":515},{"id":514},"참조에-의한-전달",[516],{"type":22,"value":517},"참조에 의한 전달",{"type":17,"tag":350,"props":519,"children":522},{"className":520,"code":521,"language":11,"meta":7},[353],"var person = {\n    name: 'Lee'\n}\n\nvar copy = person;\n\ncopy.name = 'kim';\n\nconsole.log(person.name); // kim;\nconsole.log(copy.name); // kim;\n",[523],{"type":17,"tag":91,"props":524,"children":525},{"__ignoreMap":7},[526],{"type":22,"value":521},{"type":17,"tag":18,"props":528,"children":529},{},[530],{"type":22,"value":43},{"type":17,"tag":18,"props":532,"children":533},{},[534],{"type":22,"value":535},"정확한 용어는 존재하지 않지만 전달되는 값의 종류에 원시 값인지 참조 값인지 구별해서 강조하는 의미에서 “값에 의한 전달”, “참조에 의한 전달”로 구분하여 부르기 함.",{"type":17,"tag":18,"props":537,"children":538},{},[539],{"type":22,"value":43},{"type":17,"tag":541,"props":542,"children":543},"hr",{},[],{"type":17,"tag":338,"props":545,"children":547},{"id":546},"참고",[548],{"type":17,"tag":25,"props":549,"children":550},{},[551],{"type":22,"value":546},{"type":17,"tag":499,"props":553,"children":554},{},[555],{"type":17,"tag":104,"props":556,"children":557},{},[558],{"type":17,"tag":25,"props":559,"children":560},{},[561],{"type":22,"value":562},"이웅모, 「모던 자바스크립트 Deep Dive」, 위키북스, 2020",{"title":7,"searchDepth":564,"depth":564,"links":565},2,[566,571,574],{"id":340,"depth":564,"text":343,"children":567},[568,570],{"id":387,"depth":569,"text":390},3,{"id":427,"depth":569,"text":430},{"id":481,"depth":564,"text":481,"children":572},[573],{"id":514,"depth":569,"text":517},{"id":546,"depth":564,"text":546},"markdown","content:posts:8285cee9-dfcd-4a53-8b73-3ae542a267a9.md","content","posts/8285cee9-dfcd-4a53-8b73-3ae542a267a9.md","md",1710325141888]