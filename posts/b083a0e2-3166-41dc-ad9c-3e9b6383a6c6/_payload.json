[{"data":1,"prerenderedAt":230},["Reactive",2],{"content-query-18oc34Sqs8":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":225,"_id":226,"_source":227,"_file":228,"_extension":229},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","posts",false,"","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[11],"ES6","2023-12-06T00:00:00.000Z",{"type":14,"children":15,"toc":214},"root",[16,23,34,39,54,59,72,77,90,102,112,121,126,135,140,149,154,164,173,178,189,198,206],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":24,"props":25,"children":27},"h3",{"id":26},"클래스와-인스턴스객체",[28],{"type":17,"tag":29,"props":30,"children":31},"strong",{},[32],{"type":22,"value":33},"클래스와 인스턴스(객체)",{"type":17,"tag":18,"props":35,"children":36},{},[37],{"type":22,"value":38},"클래스는 일종의 설계도이고 인스턴스는 클래스를 사용하여 생성한 실제 물건이다.",{"type":17,"tag":40,"props":41,"children":42},"ul",{},[43,49],{"type":17,"tag":44,"props":45,"children":46},"li",{},[47],{"type":22,"value":48},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":17,"tag":44,"props":50,"children":51},{},[52],{"type":22,"value":53},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":17,"tag":18,"props":55,"children":56},{},[57],{"type":22,"value":58},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":17,"tag":40,"props":60,"children":61},{},[62,67],{"type":17,"tag":44,"props":63,"children":64},{},[65],{"type":22,"value":66},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":17,"tag":44,"props":68,"children":69},{},[70],{"type":22,"value":71},"이동수단(클래스) - 자동차(인스턴스)",{"type":17,"tag":18,"props":73,"children":74},{},[75],{"type":22,"value":76},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":17,"tag":78,"props":79,"children":84},"pre",{"code":80,"language":81,"meta":7,"className":82},"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n","javascript",[83],"language-javascript",[85],{"type":17,"tag":86,"props":87,"children":88},"code",{"__ignoreMap":7},[89],{"type":22,"value":80},{"type":17,"tag":91,"props":92,"children":93},"blockquote",{},[94],{"type":17,"tag":40,"props":95,"children":96},{},[97],{"type":17,"tag":44,"props":98,"children":99},{},[100],{"type":22,"value":101},"이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 **추상화(Abstarction)**라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 포착하는 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":17,"tag":103,"props":104,"children":106},"h2",{"id":105},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[107],{"type":17,"tag":29,"props":108,"children":109},{},[110],{"type":22,"value":111},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":17,"tag":24,"props":113,"children":115},{"id":114},"상속inheritance",[116],{"type":17,"tag":29,"props":117,"children":118},{},[119],{"type":22,"value":120},"상속(inheritance)",{"type":17,"tag":18,"props":122,"children":123},{},[124],{"type":22,"value":125},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":17,"tag":78,"props":127,"children":130},{"code":128,"language":81,"meta":7,"className":129},"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[83],[131],{"type":17,"tag":86,"props":132,"children":133},{"__ignoreMap":7},[134],{"type":22,"value":128},{"type":17,"tag":18,"props":136,"children":137},{},[138],{"type":22,"value":139},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":17,"tag":24,"props":141,"children":143},{"id":142},"다형성polymorphism",[144],{"type":17,"tag":29,"props":145,"children":146},{},[147],{"type":22,"value":148},"다형성(Polymorphism)",{"type":17,"tag":18,"props":150,"children":151},{},[152],{"type":22,"value":153},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":17,"tag":78,"props":155,"children":159},{"code":156,"language":22,"meta":7,"className":157},"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[158],"language-text",[160],{"type":17,"tag":86,"props":161,"children":162},{"__ignoreMap":7},[163],{"type":22,"value":156},{"type":17,"tag":24,"props":165,"children":167},{"id":166},"캡슐화encapsulation",[168],{"type":17,"tag":29,"props":169,"children":170},{},[171],{"type":22,"value":172},"캡슐화(Encapsulation)",{"type":17,"tag":18,"props":174,"children":175},{},[176],{"type":22,"value":177},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":17,"tag":78,"props":179,"children":184},{"code":180,"language":181,"meta":7,"className":182},"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n","java",[183],"language-java",[185],{"type":17,"tag":86,"props":186,"children":187},{"__ignoreMap":7},[188],{"type":22,"value":180},{"type":17,"tag":24,"props":190,"children":192},{"id":191},"참고",[193],{"type":17,"tag":29,"props":194,"children":195},{},[196],{"type":22,"value":197},"참고:",{"type":17,"tag":91,"props":199,"children":200},{},[201],{"type":17,"tag":18,"props":202,"children":203},{},[204],{"type":22,"value":205},"인사이드 자바스크립트",{"type":17,"tag":78,"props":207,"children":209},{"code":208},"vandbt.tistory.com/10\n\n\nevan-moon.github.io/2019/08/24/what-is-object-oriented-programming/ [www.opentutorials.org/module/2495/14037](http://www.opentutorials.org/module/2495/14037) victorydntmd.tistory.com/117\n",[210],{"type":17,"tag":86,"props":211,"children":212},{"__ignoreMap":7},[213],{"type":22,"value":208},{"title":7,"searchDepth":215,"depth":215,"links":216},2,[217,219],{"id":26,"depth":218,"text":33},3,{"id":105,"depth":215,"text":111,"children":220},[221,222,223,224],{"id":114,"depth":218,"text":120},{"id":142,"depth":218,"text":148},{"id":166,"depth":218,"text":172},{"id":191,"depth":218,"text":197},"markdown","content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","content","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","md",1705067757017]