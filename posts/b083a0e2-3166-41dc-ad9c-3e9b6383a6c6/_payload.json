[{"data":1,"prerenderedAt":258},["Reactive",2],{"content-query-18oc34Sqs8":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":253,"_id":254,"_source":255,"_file":256,"_extension":257},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","posts",false,"","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[11],"ES6","2023-12-28T00:00:00.000Z",{"type":14,"children":15,"toc":242},"root",[16,23,30,43,58,63,76,81,94,118,125,131,136,145,150,156,161,170,176,181,190,194,199,237],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":24,"props":25,"children":27},"h3",{"id":26},"클래스와-인스턴스객체",[28],{"type":22,"value":29},"클래스와 인스턴스(객체)",{"type":17,"tag":18,"props":31,"children":32},{},[33,35,41],{"type":22,"value":34},"클래스는 일종의 설계도이고 ",{"type":17,"tag":36,"props":37,"children":38},"strong",{},[39],{"type":22,"value":40},"인스턴스는",{"type":22,"value":42}," 클래스를 사용하여 생성한 실제 물건이다.",{"type":17,"tag":44,"props":45,"children":46},"ul",{},[47,53],{"type":17,"tag":48,"props":49,"children":50},"li",{},[51],{"type":22,"value":52},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":17,"tag":48,"props":54,"children":55},{},[56],{"type":22,"value":57},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":17,"tag":18,"props":59,"children":60},{},[61],{"type":22,"value":62},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":17,"tag":44,"props":64,"children":65},{},[66,71],{"type":17,"tag":48,"props":67,"children":68},{},[69],{"type":22,"value":70},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":17,"tag":48,"props":72,"children":73},{},[74],{"type":22,"value":75},"이동수단(클래스) - 자동차(인스턴스)",{"type":17,"tag":18,"props":77,"children":78},{},[79],{"type":22,"value":80},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":17,"tag":82,"props":83,"children":88},"pre",{"className":84,"code":86,"language":87,"meta":7},[85],"language-javascript","class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n","javascript",[89],{"type":17,"tag":90,"props":91,"children":92},"code",{"__ignoreMap":7},[93],{"type":22,"value":86},{"type":17,"tag":95,"props":96,"children":97},"blockquote",{},[98],{"type":17,"tag":18,"props":99,"children":100},{},[101,103,109,111,116],{"type":22,"value":102},"+ 이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 추상화(Abstarction)라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 ",{"type":17,"tag":104,"props":105,"children":106},"em",{},[107],{"type":22,"value":108},"가려내어",{"type":22,"value":110}," ",{"type":17,"tag":104,"props":112,"children":113},{},[114],{"type":22,"value":115},"포착하는",{"type":22,"value":117}," 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":17,"tag":119,"props":120,"children":122},"h2",{"id":121},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[123],{"type":22,"value":124},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":17,"tag":24,"props":126,"children":128},{"id":127},"상속inheritance",[129],{"type":22,"value":130},"상속(inheritance)",{"type":17,"tag":18,"props":132,"children":133},{},[134],{"type":22,"value":135},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":17,"tag":82,"props":137,"children":140},{"className":138,"code":139,"language":87,"meta":7},[85],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[141],{"type":17,"tag":90,"props":142,"children":143},{"__ignoreMap":7},[144],{"type":22,"value":139},{"type":17,"tag":18,"props":146,"children":147},{},[148],{"type":22,"value":149},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":17,"tag":24,"props":151,"children":153},{"id":152},"다형성polymorphism",[154],{"type":22,"value":155},"다형성(Polymorphism)",{"type":17,"tag":18,"props":157,"children":158},{},[159],{"type":22,"value":160},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":17,"tag":82,"props":162,"children":165},{"className":163,"code":164,"language":87,"meta":7},[85],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[166],{"type":17,"tag":90,"props":167,"children":168},{"__ignoreMap":7},[169],{"type":22,"value":164},{"type":17,"tag":24,"props":171,"children":173},{"id":172},"캡슐화encapsulation",[174],{"type":22,"value":175},"캡슐화(Encapsulation)",{"type":17,"tag":18,"props":177,"children":178},{},[179],{"type":22,"value":180},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":17,"tag":82,"props":182,"children":185},{"className":183,"code":184,"language":87,"meta":7},[85],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[186],{"type":17,"tag":90,"props":187,"children":188},{"__ignoreMap":7},[189],{"type":22,"value":184},{"type":17,"tag":191,"props":192,"children":193},"hr",{},[],{"type":17,"tag":24,"props":195,"children":197},{"id":196},"참고",[198],{"type":22,"value":196},{"type":17,"tag":44,"props":200,"children":201},{},[202,207,218,228],{"type":17,"tag":48,"props":203,"children":204},{},[205],{"type":22,"value":206},"인사이드 자바스크립트",{"type":17,"tag":48,"props":208,"children":209},{},[210],{"type":17,"tag":211,"props":212,"children":216},"a",{"href":213,"rel":214},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[215],"nofollow",[217],{"type":22,"value":213},{"type":17,"tag":48,"props":219,"children":220},{},[221],{"type":17,"tag":211,"props":222,"children":225},{"href":223,"rel":224},"http://www.opentutorials.org/module/2495/14037",[215],[226],{"type":22,"value":227},"www.opentutorials.org/module/2495/14037",{"type":17,"tag":48,"props":229,"children":230},{},[231],{"type":17,"tag":211,"props":232,"children":235},{"href":233,"rel":234},"https://victorydntmd.tistory.com/117",[215],[236],{"type":22,"value":233},{"type":17,"tag":18,"props":238,"children":239},{},[240],{"type":22,"value":241},"\\n",{"title":7,"searchDepth":243,"depth":243,"links":244},2,[245,247],{"id":26,"depth":246,"text":29},3,{"id":121,"depth":243,"text":124,"children":248},[249,250,251,252],{"id":127,"depth":246,"text":130},{"id":152,"depth":246,"text":155},{"id":172,"depth":246,"text":175},{"id":196,"depth":246,"text":196},"markdown","content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","content","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","md",1705911073868]