[{"data":1,"prerenderedAt":281},["Reactive",2],{"content-query-18oc34Sqs8":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":276,"_id":277,"_source":278,"_file":279,"_extension":280},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","posts",false,"","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[11],"ES6","2023-12-06T00:00:00.000Z",{"type":14,"children":15,"toc":265},"root",[16,23,30,44,59,64,85,90,103,134,141,147,152,161,166,172,177,186,192,197,206,211,215,220],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":24,"props":25,"children":27},"h3",{"id":26},"클래스와-인스턴스객체",[28],{"type":22,"value":29},"클래스와 인스턴스(객체)",{"type":17,"tag":18,"props":31,"children":32},{},[33,35,42],{"type":22,"value":34},"클래스는 일종의 ",{"type":17,"tag":36,"props":37,"children":39},"font",{"color":38},"purple",[40],{"type":22,"value":41},"설계도이고",{"type":22,"value":43}," 인스턴스는 클래스를 사용하여 생성한 실제 물건이다.",{"type":17,"tag":45,"props":46,"children":47},"ul",{},[48,54],{"type":17,"tag":49,"props":50,"children":51},"li",{},[52],{"type":22,"value":53},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":17,"tag":49,"props":55,"children":56},{},[57],{"type":22,"value":58},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":17,"tag":18,"props":60,"children":61},{},[62],{"type":22,"value":63},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":17,"tag":45,"props":65,"children":66},{},[67,80],{"type":17,"tag":49,"props":68,"children":69},{},[70,72,78],{"type":22,"value":71},"무선 전화기(클래스) - ",{"type":17,"tag":73,"props":74,"children":75},"i",{},[76],{"type":22,"value":77},"스마트폰",{"type":22,"value":79},"(인스턴스)",{"type":17,"tag":49,"props":81,"children":82},{},[83],{"type":22,"value":84},"이동수단(클래스) - 자동차(인스턴스)",{"type":17,"tag":18,"props":86,"children":87},{},[88],{"type":22,"value":89},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":17,"tag":91,"props":92,"children":97},"pre",{"className":93,"code":95,"language":96,"meta":7},[94],"language-javascript","class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n","javascript",[98],{"type":17,"tag":99,"props":100,"children":101},"code",{"__ignoreMap":7},[102],{"type":22,"value":95},{"type":17,"tag":104,"props":105,"children":106},"blockquote",{},[107],{"type":17,"tag":45,"props":108,"children":109},{},[110],{"type":17,"tag":49,"props":111,"children":112},{},[113,115,121,123,132],{"type":22,"value":114},"이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 ",{"type":17,"tag":116,"props":117,"children":118},"b",{},[119],{"type":22,"value":120},"추상화(Abstarction)",{"type":22,"value":122},"라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 ",{"type":17,"tag":73,"props":124,"children":125},{},[126],{"type":17,"tag":36,"props":127,"children":129},{"color":128},"pink_background",[130],{"type":22,"value":131},"포착하는 것을 의미한다.",{"type":22,"value":133}," (필요한 관점만을 추출하는 행위)",{"type":17,"tag":135,"props":136,"children":138},"h2",{"id":137},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[139],{"type":22,"value":140},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":17,"tag":24,"props":142,"children":144},{"id":143},"상속inheritance",[145],{"type":22,"value":146},"상속(inheritance)",{"type":17,"tag":18,"props":148,"children":149},{},[150],{"type":22,"value":151},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":17,"tag":91,"props":153,"children":156},{"className":154,"code":155,"language":96,"meta":7},[94],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[157],{"type":17,"tag":99,"props":158,"children":159},{"__ignoreMap":7},[160],{"type":22,"value":155},{"type":17,"tag":18,"props":162,"children":163},{},[164],{"type":22,"value":165},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":17,"tag":24,"props":167,"children":169},{"id":168},"다형성polymorphism",[170],{"type":22,"value":171},"다형성(Polymorphism)",{"type":17,"tag":18,"props":173,"children":174},{},[175],{"type":22,"value":176},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":17,"tag":91,"props":178,"children":181},{"className":179,"code":180,"language":96,"meta":7},[94],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[182],{"type":17,"tag":99,"props":183,"children":184},{"__ignoreMap":7},[185],{"type":22,"value":180},{"type":17,"tag":24,"props":187,"children":189},{"id":188},"캡슐화encapsulation",[190],{"type":22,"value":191},"캡슐화(Encapsulation)",{"type":17,"tag":18,"props":193,"children":194},{},[195],{"type":22,"value":196},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":17,"tag":91,"props":198,"children":201},{"className":199,"code":200,"language":96,"meta":7},[94],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[202],{"type":17,"tag":99,"props":203,"children":204},{"__ignoreMap":7},[205],{"type":22,"value":200},{"type":17,"tag":18,"props":207,"children":208},{},[209],{"type":22,"value":210},"\\n",{"type":17,"tag":212,"props":213,"children":214},"hr",{},[],{"type":17,"tag":24,"props":216,"children":218},{"id":217},"참고",[219],{"type":22,"value":217},{"type":17,"tag":45,"props":221,"children":222},{},[223,228,243,256],{"type":17,"tag":49,"props":224,"children":225},{},[226],{"type":22,"value":227},"인사이드 자바스크립트",{"type":17,"tag":49,"props":229,"children":230},{},[231],{"type":17,"tag":36,"props":232,"children":234},{"color":233},"blue",[235],{"type":17,"tag":236,"props":237,"children":241},"a",{"href":238,"rel":239},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[240],"nofollow",[242],{"type":22,"value":238},{"type":17,"tag":49,"props":244,"children":245},{},[246],{"type":17,"tag":36,"props":247,"children":248},{"color":233},[249],{"type":17,"tag":236,"props":250,"children":253},{"href":251,"rel":252},"http://www.opentutorials.org/module/2495/14037",[240],[254],{"type":22,"value":255},"www.opentutorials.org/module/2495/14037",{"type":17,"tag":49,"props":257,"children":258},{},[259],{"type":17,"tag":236,"props":260,"children":263},{"href":261,"rel":262},"https://victorydntmd.tistory.com/117",[240],[264],{"type":22,"value":261},{"title":7,"searchDepth":266,"depth":266,"links":267},2,[268,270],{"id":26,"depth":269,"text":29},3,{"id":137,"depth":266,"text":140,"children":271},[272,273,274,275],{"id":143,"depth":269,"text":146},{"id":168,"depth":269,"text":171},{"id":188,"depth":269,"text":191},{"id":217,"depth":269,"text":217},"markdown","content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","content","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","md",1705237910963]