[{"data":1,"prerenderedAt":828},["Reactive",2],{"content-query-7RhGTYA0yk":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"tags":9,"date":11,"body":12,"_type":823,"_id":824,"_source":825,"_file":826,"_extension":827},"/posts/eefbc7dd-a0f6-4078-97f5-9b6f26a483f1","posts",false,"","자바스크립트 - 16. 프로토타입",[10],"javascript","2024-02-23T00:00:00.000Z",{"type":13,"children":14,"toc":805},"root",[15,29,35,40,45,50,55,60,69,78,82,89,94,99,104,109,113,118,122,129,134,138,145,149,158,164,173,182,191,197,202,211,224,230,235,239,247,251,257,262,271,280,284,292,298,307,311,317,326,331,335,340,344,352,358,363,367,372,381,385,390,399,403,408,464,468,474,480,489,495,504,510,519,525,534,539,544,549,553,557,563,572,576,581,586,592,598,607,612,616,625,631,640,644,653,657,662,668,673,682,687,696,700,705,714,718,723,732,737,743,748,752,757,766,771,776,780,789,793,796,801],{"type":16,"tag":17,"props":18,"children":22},"element","pre",{"className":19,"code":21,"language":10,"meta":7},[20],"language-javascript","function Circle(radius) {\n    this.radius = radius;\n    this.getArea = function() {\n        return Math.PI * this.radius ** 2;\n    }\n}\n\nconst circle1 = new Circle(1);\nconst circle2 = new Circle(2);\nconsole.log(circle1.getArea());\nconsole.log(circle2.getArea());\n",[23],{"type":16,"tag":24,"props":25,"children":26},"code",{"__ignoreMap":7},[27],{"type":28,"value":21},"text",{"type":16,"tag":30,"props":31,"children":32},"p",{},[33],{"type":28,"value":34},"radius 프로퍼티 값은 일반적으로 인스턴스마다 다르다.",{"type":16,"tag":30,"props":36,"children":37},{},[38],{"type":28,"value":39},"하지만 getArea 메서드는 모든 인스턴스가 동일한 내용의 메서드를 사용하므로 단 하나만 생성하여 모든 인스턴스가 공유해서 사용하는것이 바람직하다. (메모리를 불필요하게 낭비)",{"type":16,"tag":41,"props":42,"children":44},"img",{"src":43},"/blog/images/e82c099d-661f-40e7-8185-9cba792e4207.png",[],{"type":16,"tag":30,"props":46,"children":47},{},[48],{"type":28,"value":49},"\\n",{"type":16,"tag":30,"props":51,"children":52},{},[53],{"type":28,"value":54},"상속을 통해 불필요한 중복을 제거해 보자. 자바스크립트는 프로토타입을 기반으로 상속을 구현한다.",{"type":16,"tag":30,"props":56,"children":57},{},[58],{"type":28,"value":59},"! 여기서 상속의 개념이 ‘물려 받는다’ 보다는, 자식 객체가 부모 객체의 프로토타입을 참조하여 사용할 수 있다임",{"type":16,"tag":17,"props":61,"children":64},{"className":62,"code":63,"language":10,"meta":7},[20],"function Circle(radius) {\n    this.radius = radius;\n}\n\nCircle.prototype.getArea = function() {\n    return Math.PI * this.radius ** 2;\n}\n\nconst cirlce1 = new Circle(1);\nconst cirlce2 = new Circle(2);\n\nconsole.log(circle1.getArea());\nconsole.log(circle2.getArea());\n",[65],{"type":16,"tag":24,"props":66,"children":67},{"__ignoreMap":7},[68],{"type":28,"value":63},{"type":16,"tag":17,"props":70,"children":73},{"className":71,"code":72,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconsole.log(Person.prototype === me.__proto__); // true\n",[74],{"type":16,"tag":24,"props":75,"children":76},{"__ignoreMap":7},[77],{"type":28,"value":72},{"type":16,"tag":41,"props":79,"children":81},{"src":80},"/blog/images/0049fbad-10a1-474f-b0b3-9d426cabf5e3.png",[],{"type":16,"tag":83,"props":84,"children":86},"h1",{"id":85},"프로토타입-객체",[87],{"type":28,"value":88},"프로토타입 객체",{"type":16,"tag":30,"props":90,"children":91},{},[92],{"type":28,"value":93},"모든 객체는 [[Prototype]]이라는 내부 슬롯을 가진다.",{"type":16,"tag":30,"props":95,"children":96},{},[97],{"type":28,"value":98},"객체가 생성될때 객체 생성 방식에 따라 프로토타입이 결정되고 [[Prototype]]에 저장된다.",{"type":16,"tag":30,"props":100,"children":101},{},[102],{"type":28,"value":103},"예를 들어, 객체 리터럴에 의해 생성된 객체의 프로토타입은 Object.prototype이고",{"type":16,"tag":30,"props":105,"children":106},{},[107],{"type":28,"value":108},"생성자 함수에 의해 생성된 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체다.",{"type":16,"tag":30,"props":110,"children":111},{},[112],{"type":28,"value":49},{"type":16,"tag":30,"props":114,"children":115},{},[116],{"type":28,"value":117},"모든 객체는 하나의 프로토타입을 갖는다. 그리고 모든 프로토타입은 생성자 함수와 연결되어 있다.",{"type":16,"tag":30,"props":119,"children":120},{},[121],{"type":28,"value":49},{"type":16,"tag":123,"props":124,"children":126},"h2",{"id":125},"__proto__접근자-프로퍼티",[127],{"type":28,"value":128},"__proto__접근자 프로퍼티",{"type":16,"tag":30,"props":130,"children":131},{},[132],{"type":28,"value":133},"__proto__접근자 프로퍼티를 통해 간접적으로 [[Prototype]] 내부 슬롯의 값에 접근할 수 있다.",{"type":16,"tag":30,"props":135,"children":136},{},[137],{"type":28,"value":49},{"type":16,"tag":139,"props":140,"children":142},"h3",{"id":141},"__proto__는-접근자-프로퍼티다",[143],{"type":28,"value":144},"__proto__는 접근자 프로퍼티다.",{"type":16,"tag":41,"props":146,"children":148},{"src":147},"/blog/images/400c06de-c8a4-42f6-bd5a-2b88919f61f2.png",[],{"type":16,"tag":17,"props":150,"children":153},{"className":151,"code":152,"language":10,"meta":7},[20],"const obj = {};\nconst parent = { x: 1 };\nobj.__proto__; // get __proto__가 호출됨\nobj.__proto__ = parent; // set __proto__가 호출됨\n\nconsole.log(obj.x);\n",[154],{"type":16,"tag":24,"props":155,"children":156},{"__ignoreMap":7},[157],{"type":28,"value":152},{"type":16,"tag":139,"props":159,"children":161},{"id":160},"__proto__접근자-프로퍼티는-상속을-통해-사용된다",[162],{"type":28,"value":163},"__proto__접근자 프로퍼티는 상속을 통해 사용된다.",{"type":16,"tag":17,"props":165,"children":168},{"className":166,"code":167,"language":10,"meta":7},[20],"const person = { name: 'lee' };\n\n// person 객체는 __proto__ 프로퍼티를 소유하지 않는다.\nconsole.log(person.hasOwnProperty('__proto__')); // false\n\n// __proto__ 프로퍼티는 모든 객체의 프로토타입 객체인 Object.prototype의 접근자 프로퍼티다.\nconsole.log(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__'));\n// {get: f, set: f, ....}\n\n// 모든 객체는 Object.prototype의 접근자 프로퍼티 __proto__를 상속받아 사용할 수 있다.\nconsole.log({}.__proto__ === Object.prototype); // true\n",[169],{"type":16,"tag":24,"props":170,"children":171},{"__ignoreMap":7},[172],{"type":28,"value":167},{"type":16,"tag":17,"props":174,"children":177},{"className":175,"code":176,"language":10,"meta":7},[20],"const parent = { x: 1 };\nfunction Person() {}\nconsole.log(parent.__proto__ === Object.prototype); // true\nconsole.log(Person.__proto__ === Function.prototype); // true\nconsole.log(Function.__proto__ === Function.prototype); // true\nconsole.log(Function.prototype.__proto__ === Object.prototype); // true\n",[178],{"type":16,"tag":24,"props":179,"children":180},{"__ignoreMap":7},[181],{"type":28,"value":176},{"type":16,"tag":183,"props":184,"children":185},"blockquote",{},[186],{"type":16,"tag":30,"props":187,"children":188},{},[189],{"type":28,"value":190},"프로토타입 체인의 종점, 즉 프로토타입 체인의 최상위 객체는 Object.prototype이다.",{"type":16,"tag":139,"props":192,"children":194},{"id":193},"__proto__접근자-프로퍼티를-통해-프로토타입에-접근하는-이유",[195],{"type":28,"value":196},"__proto__접근자 프로퍼티를 통해 프로토타입에 접근하는 이유",{"type":16,"tag":30,"props":198,"children":199},{},[200],{"type":28,"value":201},"[[Prototype]] 내부 슬롯의 값, 즉 프로토타입에 접근하기 위해 접근자 프로퍼티를 사용하는 이유는 상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위해서다.",{"type":16,"tag":17,"props":203,"children":206},{"className":204,"code":205,"language":10,"meta":7},[20],"const parent = {};\nconst child = {};\n\nchild.__proto__ = parent;\nparent.__proto__ child; // TypeError: Cycle __proto__ value\n",[207],{"type":16,"tag":24,"props":208,"children":209},{"__ignoreMap":7},[210],{"type":28,"value":205},{"type":16,"tag":30,"props":212,"children":213},{},[214,216,222],{"type":28,"value":215},"아무런 체크 없이 무조건적으로 프로토타입을 교체할 수 없도록 ",{"type":16,"tag":217,"props":218,"children":219},"strong",{},[220],{"type":28,"value":221},"proto",{"type":28,"value":223}," 접근자 프로퍼티를 통해 프로토타입에 접근하고 교체하도록 구현되어 있다.",{"type":16,"tag":139,"props":225,"children":227},{"id":226},"__proto__접근자-프로퍼티를-코드-내에서-직접-사용하는-것은-권장하지-않는다",[228],{"type":28,"value":229},"__proto__접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장하지 않는다.",{"type":16,"tag":30,"props":231,"children":232},{},[233],{"type":28,"value":234},"Object.getPrototypeOf나 Object.setPrototypeOf 사용을 권장한다.",{"type":16,"tag":30,"props":236,"children":237},{},[238],{"type":28,"value":49},{"type":16,"tag":240,"props":241,"children":244},"aside",{"emogi":242,"color":243},"✅","purple",[245],{"type":28,"value":246},"헐 몰랐어… javascript에서 prototype하고 [[prototype]]은 다른 개념이구나..\n아 ~ 생성자 함수에 의해 생성된 객체들은 [[Prototype]]을 통해 생성자 함수 prototype에 접근 가능하고…\n아~ person.greet()을 하면 person에는 greet 함수가 없으니까 프로토타입 체이닝을 통해 생성한 부모 함수로 가서 찾는거구나…",{"type":16,"tag":30,"props":248,"children":249},{},[250],{"type":28,"value":49},{"type":16,"tag":123,"props":252,"children":254},{"id":253},"함수-객체의-prototype-프로퍼티",[255],{"type":28,"value":256},"함수 객체의 prototype 프로퍼티",{"type":16,"tag":30,"props":258,"children":259},{},[260],{"type":28,"value":261},"함수 객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다.",{"type":16,"tag":17,"props":263,"children":266},{"className":264,"code":265,"language":10,"meta":7},[20],"// 함수 객체는 prototype 프로퍼티를 소유한다.\n(function() {}).hasOwnProperty('prototype'); // true\n// 일반 객체는 prototype 프로퍼티를 소유하지 않는다.\n({}).hasOwnProperty('prototype'); // false\n",[267],{"type":16,"tag":24,"props":268,"children":269},{"__ignoreMap":7},[270],{"type":28,"value":265},{"type":16,"tag":17,"props":272,"children":275},{"className":273,"code":274,"language":10,"meta":7},[20],"// 화살표 함수는 prototype 프로퍼티를 소유하지 않음\nconst Person = name => {\n    this.name = name;\n}\n\nconsole.log(Person.hasOwnProperty('prototype')); // false\nconsole.log(Person.prototype); // undefined\n\nconst obj = {\n    foo() {}\n}\n\nconsole.log(obj.foo.hasOwnProperty('prototype')); // false\nconsole.log(obj.foo.prototype); // undefined\n",[276],{"type":16,"tag":24,"props":277,"children":278},{"__ignoreMap":7},[279],{"type":28,"value":274},{"type":16,"tag":41,"props":281,"children":283},{"src":282},"/blog/images/e0be8a1f-dc46-470a-b1b7-ba3d188d055f.png",[],{"type":16,"tag":17,"props":285,"children":287},{"className":286,"code":72,"language":10,"meta":7},[20],[288],{"type":16,"tag":24,"props":289,"children":290},{"__ignoreMap":7},[291],{"type":28,"value":72},{"type":16,"tag":123,"props":293,"children":295},{"id":294},"프로토타입의-constructor-프로퍼티와-생성자-함수",[296],{"type":28,"value":297},"프로토타입의 constructor 프로퍼티와 생성자 함수",{"type":16,"tag":17,"props":299,"children":302},{"className":300,"code":301,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\nconst me = new Person('Lee');\n\nconsole.log(me.constructor === Person);\n// me 나를 생성한 함수는 Person이다.\n\nconsole.log(Person.prototype.constructor);\n// Person에 prototype을 생성한 함수는 Person이다.\n",[303],{"type":16,"tag":24,"props":304,"children":305},{"__ignoreMap":7},[306],{"type":28,"value":301},{"type":16,"tag":308,"props":309,"children":310},"hr",{},[],{"type":16,"tag":83,"props":312,"children":314},{"id":313},"리터럴-표기법에-의해-생성된-객체와-생성자-함수와-프로토타입",[315],{"type":28,"value":316},"리터럴 표기법에 의해 생성된 객체와 생성자 함수와 프로토타입",{"type":16,"tag":17,"props":318,"children":321},{"className":319,"code":320,"language":10,"meta":7},[20],"const obj = {};\nconst add = function (a,b) { return a + b };\nconst arr = [1, 2, 3]\nconst regexp = /is/ig;\n",[322],{"type":16,"tag":24,"props":323,"children":324},{"__ignoreMap":7},[325],{"type":28,"value":320},{"type":16,"tag":30,"props":327,"children":328},{},[329],{"type":28,"value":330},"리터럴 표기법에 의해 생성된 객체는 생성자 함수에 의해 생성된 객체는 아니다. 하지만 큰 틀에서 생각해 보면 리터럴 표기법으로 생성한 객체도 생성자 함수로 생성한 객체와 본질적인 면에서는 큰 차이는 없다.",{"type":16,"tag":30,"props":332,"children":333},{},[334],{"type":28,"value":49},{"type":16,"tag":30,"props":336,"children":337},{},[338],{"type":28,"value":339},"객체 리터럴에 의해 생성된 객체와 Object 생성자 함수에 의해 생성한 객체는 생성 과정에서 미묘한 차이가 있지만 결국 객체로서 동일한 특성을 갖는다. 함수 리터럴에 의해 생성한 함수와 Function 생성자 함수에 의해 생성한 함수는 생성 과정과 스코프, 클로저 등의 차이가 있지만 결국 함수로서 동일한 특성을 갖는다.",{"type":16,"tag":30,"props":341,"children":342},{},[343],{"type":28,"value":49},{"type":16,"tag":30,"props":345,"children":346},{},[347],{"type":16,"tag":217,"props":348,"children":349},{},[350],{"type":28,"value":351},"객체 리터럴이 평가 될때는 추상 연산 OrdinaryObjectCreate가 호출 되는데 자세한건 교재에",{"type":16,"tag":83,"props":353,"children":355},{"id":354},"프로토타입의-생성-시점",[356],{"type":28,"value":357},"프로토타입의 생성 시점",{"type":16,"tag":30,"props":359,"children":360},{},[361],{"type":28,"value":362},"프로토타입은 생서자 함수가 생성되는 시점에 더불어 생성된다.",{"type":16,"tag":30,"props":364,"children":365},{},[366],{"type":28,"value":49},{"type":16,"tag":30,"props":368,"children":369},{},[370],{"type":28,"value":371},"생성자 함수로서 호출할 수 있는 함수, 즉 constructor는 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.",{"type":16,"tag":17,"props":373,"children":376},{"className":374,"code":375,"language":10,"meta":7},[20],"console.log(Person.prototype); // constructor: f\n\nfunction Person(name) {\n    this.name = name;\n}\n",[377],{"type":16,"tag":24,"props":378,"children":379},{"__ignoreMap":7},[380],{"type":28,"value":375},{"type":16,"tag":30,"props":382,"children":383},{},[384],{"type":28,"value":49},{"type":16,"tag":30,"props":386,"children":387},{},[388],{"type":28,"value":389},"생성자 함수로서 호출할 수 없는 함수, 즉 non-constructor는 프로토타입이 생성되지 않는다.",{"type":16,"tag":17,"props":391,"children":394},{"className":392,"code":393,"language":10,"meta":7},[20],"const Person = name => {\n    this.name = name;\n}\n\nconsole.log(Person.prototype); // undefined\n",[395],{"type":16,"tag":24,"props":396,"children":397},{"__ignoreMap":7},[398],{"type":28,"value":393},{"type":16,"tag":30,"props":400,"children":401},{},[402],{"type":28,"value":49},{"type":16,"tag":30,"props":404,"children":405},{},[406],{"type":28,"value":407},"함수 선언문은 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행된다고 했다. 평가되어 함수 객체가 될때 이때 프로토타입도 더불어 생성된다. 생성된 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩 된다.",{"type":16,"tag":409,"props":410,"children":411},"details",{},[412,418,420],{"type":16,"tag":413,"props":414,"children":415},"summary",{},[416],{"type":28,"value":417},"chatgpt",{"type":28,"value":419},"\n1. **Person 함수 객체 생성**: 자바스크립트 엔진은 **`Person`** 함수 선언을 평가하면서 **`Person`**이라는 이름의 함수 객체를 생성합니다.\n2. **Person.prototype 객체 생성**: 동시에 **`Person.prototype`** 객체도 생성됩니다. 이 객체는 기본적으로 **`constructor`** 프로퍼티를 가지고 있으며, 이 **`constructor`** 프로퍼티는 **`Person`** 함수 객체를 가리킵니다.\n3. **Person.prototype의 상속**: **`Person.prototype`** 객체는 **`Object.prototype`**을 상속합니다. 다시 말해, **`Person.prototype`**의 [[Prototype]] 내부 슬롯(또는 **`__proto__`** 프로퍼티)은 **`Object.prototype`** 객체를 가리킵니다. 이는 **`Person.prototype`**이 **`Object.prototype`**의 메소드와 프로퍼티에 접근할 수 있음을 의미합니다.\n4. **인스턴스 생성**: **`new Person('Lee')`**와 같이 **`Person`** 함수를 생성자로 사용하여 인스턴스를 생성할 때, 이 인스턴스는 **`Person.prototype`**을 상속받습니다. 즉, 생성된 객체의 [[Prototype]] 내부 슬롯(또는 **`__proto__`** 프로퍼티)는 **`Person.prototype`** 객체를 가리킵니다.\n",{"type":16,"tag":30,"props":421,"children":422},{},[423,425,433,435,443,445,452,454,462],{"type":28,"value":424},"따라서, ",{"type":16,"tag":24,"props":426,"children":427},{},[428],{"type":16,"tag":217,"props":429,"children":430},{},[431],{"type":28,"value":432},"Person",{"type":28,"value":434}," 함수 객체와 ",{"type":16,"tag":24,"props":436,"children":437},{},[438],{"type":16,"tag":217,"props":439,"children":440},{},[441],{"type":28,"value":442},"Person.prototype",{"type":28,"value":444}," 객체는 서로 다른 객체이며, ",{"type":16,"tag":24,"props":446,"children":447},{},[448],{"type":16,"tag":217,"props":449,"children":450},{},[451],{"type":28,"value":442},{"type":28,"value":453},"은 ",{"type":16,"tag":24,"props":455,"children":456},{},[457],{"type":16,"tag":217,"props":458,"children":459},{},[460],{"type":28,"value":461},"Object.prototype",{"type":28,"value":463},"을 상속받는 것이 맞습니다. 이러한 구조는 자바스크립트의 프로토타입 체인을 형성하며, 이 체인을 통해 객체는 상속된 프로퍼티와 메소드에 접근할 수 있습니다.",{"type":16,"tag":30,"props":465,"children":466},{},[467],{"type":28,"value":49},{"type":16,"tag":83,"props":469,"children":471},{"id":470},"객체-생성-방식과-프로토타입의-결정",[472],{"type":28,"value":473},"객체 생성 방식과 프로토타입의 결정",{"type":16,"tag":123,"props":475,"children":477},{"id":476},"객체-리터럴에-의해-생성된-객체의-프로토타입",[478],{"type":28,"value":479},"객체 리터럴에 의해 생성된 객체의 프로토타입",{"type":16,"tag":17,"props":481,"children":484},{"className":482,"code":483,"language":10,"meta":7},[20],"const obj = { x: 1 };\n\n// obj에는 constructor와 hasOwnProperty가 없는데 어떻게 동작하는걸까?\n// 그 이유는 obj는 Object.property 객체를 상속 받았기 때문이다.\nconsole.log(obj.constructor); // Object\nconsole.log(obj.hasOwnProperty('x')); \n",[485],{"type":16,"tag":24,"props":486,"children":487},{"__ignoreMap":7},[488],{"type":28,"value":483},{"type":16,"tag":123,"props":490,"children":492},{"id":491},"object-생성자-함수에-의해-생성된-객체의-프로토타입",[493],{"type":28,"value":494},"Object 생성자 함수에 의해 생성된 객체의 프로토타입",{"type":16,"tag":17,"props":496,"children":499},{"className":497,"code":498,"language":10,"meta":7},[20],"const obj = new Object();\nobj.x = 1;\n\n// obj에는 constructor와 hasOwnProperty가 없는데 어떻게 동작하는걸까?\n// 그 이유는 obj는 Object.property 객체를 상속 받았기 때문이다.\nconsole.log(obj.constructor); // Object\nconsole.log(obj.hasOwnProperty('x')); \n",[500],{"type":16,"tag":24,"props":501,"children":502},{"__ignoreMap":7},[503],{"type":28,"value":498},{"type":16,"tag":123,"props":505,"children":507},{"id":506},"생성자-함수에-의해-생성된-객체의-프로토타입",[508],{"type":28,"value":509},"생성자 함수에 의해 생성된 객체의 프로토타입",{"type":16,"tag":17,"props":511,"children":514},{"className":512,"code":513,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    console.log(this.name);\n}\n\nconst me = new Person('Lee');\nconst you = new Person('Kim');\n\nme.sayHell();\nyou.sayHell();\n",[515],{"type":16,"tag":24,"props":516,"children":517},{"__ignoreMap":7},[518],{"type":28,"value":513},{"type":16,"tag":83,"props":520,"children":522},{"id":521},"프로토타입-체인",[523],{"type":28,"value":524},"프로토타입 체인",{"type":16,"tag":17,"props":526,"children":529},{"className":527,"code":528,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    console.log(this.name);\n}\n\nconst me = new Person('Lee');\nconst you = new Person('Kim');\n\n// hasOwnProperty는 Object.prototype의 메서드다.\n// me 객체는 프로토타입 체인을 따라 hasOwnProperty 메서드를 검색하여 사용한다.\nconsole.log(me.hasOwnProperty('name'));\n",[530],{"type":16,"tag":24,"props":531,"children":532},{"__ignoreMap":7},[533],{"type":28,"value":528},{"type":16,"tag":30,"props":535,"children":536},{},[537],{"type":28,"value":538},"me의 [[prototype]]은 Person.prototype이다.",{"type":16,"tag":30,"props":540,"children":541},{},[542],{"type":28,"value":543},"Person.prototype의 [[prototype]]은 Object.prototype이다. (hasOwnProperty를 사용할수 있는 이유)",{"type":16,"tag":30,"props":545,"children":546},{},[547],{"type":28,"value":548},"Person의 [[prototype]]은 Function.prototype이다.",{"type":16,"tag":41,"props":550,"children":552},{"src":551},"/blog/images/a4c0e6f3-ebd1-4954-ade1-39393e723e43.png",[],{"type":16,"tag":30,"props":554,"children":555},{},[556],{"type":28,"value":49},{"type":16,"tag":83,"props":558,"children":560},{"id":559},"오버라이딩과-프로퍼티-섀도잉",[561],{"type":28,"value":562},"오버라이딩과 프로퍼티 섀도잉",{"type":16,"tag":17,"props":564,"children":567},{"className":565,"code":566,"language":10,"meta":7},[20],"const Person = (function() {\n    // 생성자 함수\n    function Person(name) {\n        this.name = name;\n    }\n    \n    // 프로토타입 메서드\n    Person.prototype.sayHello = function() {\n        console.log(`Hi! My name is ${this.name}`);\n    }\n    \n    // 생성자 함수를 반환\n    return Person;\n}());\n\nconst me = new Person(\"Lee\");\n\n// 인스턴스 메서드\nme.sayHello = function () {\n    console.log(`Hey! My name is ${this.name}`);\n}\n\n// 인스턴스 메서드가 호출된다. 프로토타입 메서드는 인스턴스 메서드에 의해 가려진다.\nme.sayHello(); // Hey! ...\n",[568],{"type":16,"tag":24,"props":569,"children":570},{"__ignoreMap":7},[571],{"type":28,"value":566},{"type":16,"tag":30,"props":573,"children":574},{},[575],{"type":28,"value":49},{"type":16,"tag":30,"props":577,"children":578},{},[579],{"type":28,"value":580},"프로토타입이 소유한 프로퍼티(메서드 포함)를 프로토타입 프로퍼티, 인스턴스가 소유한 프로퍼티를 인스턴스 프로퍼티라고 부른다.",{"type":16,"tag":30,"props":582,"children":583},{},[584],{"type":28,"value":585},"프로토타입 프로퍼티와 같은 이름의 프로퍼티를 인스턴스에 추가하면 프로토타입 체인을 따라 프로토타입 프로퍼티를 검색하여 프로토타입 프로퍼티를 덮어쓰는 것이 아니라 인스턴스 프로퍼티로 추가한다. 이때 인스턴스 메서드 sayHello는 프로토타입 메서드 sayHello를 오버라이딩했고 프로토타입 메서드 sayHello는 가려진다. 이처럼 상속 관계에 의해 프로퍼티가 가려지는 현상을 프로퍼티 섀도잉이라 한다.",{"type":16,"tag":83,"props":587,"children":589},{"id":588},"프로토타입-교체",[590],{"type":28,"value":591},"프로토타입 교체",{"type":16,"tag":123,"props":593,"children":595},{"id":594},"생성자-함수에-의한-프로토타입의-교체",[596],{"type":28,"value":597},"생성자 함수에 의한 프로토타입의 교체",{"type":16,"tag":17,"props":599,"children":602},{"className":600,"code":601,"language":10,"meta":7},[20],"const Person = (function() {\n    function Person(name) {\n        this.name = name;\n    }\n    \n    // 1. 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교채\n    Person.prototype = {\n        sayHello() {\n            console.log(`Hi! My name is ${this.name}`);\n        }\n    }\n    \n    return Person;\n}());\n\nconst me = new Person('Lee');\n\n// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.\nconsole.log(me.constructor === Person); // false\n// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.\nconsole.log(me.constructor === Object); // true\n",[603],{"type":16,"tag":24,"props":604,"children":605},{"__ignoreMap":7},[606],{"type":28,"value":601},{"type":16,"tag":30,"props":608,"children":609},{},[610],{"type":28,"value":611},"Person.prototype을 객체 리터럴을 할당. 이는 Person 생성자 함수가 생성할 객체의 프로토타입을 객체 리터럴로 교체한 것.",{"type":16,"tag":41,"props":613,"children":615},{"src":614},"/blog/images/59be4898-2edc-48dd-9e51-11bbd6c3a57b.png",[],{"type":16,"tag":17,"props":617,"children":620},{"className":618,"code":619,"language":10,"meta":7},[20],"const Person = (function() {\n    function Person(name) {\n        this.name = name;\n    }\n    \n    Person.prototype = {\n        constructor: Person,\n        sayHello() {\n            console.log(`Hi! My name is ${this.name}`);\n        }\n    }\n    \n    return Person;\n}());\n\nconst me = new Person('Lee');\n\nconsole.log(me.constructor === Person); // true\nconsole.log(me.constructor === Object); // false\n",[621],{"type":16,"tag":24,"props":622,"children":623},{"__ignoreMap":7},[624],{"type":28,"value":619},{"type":16,"tag":123,"props":626,"children":628},{"id":627},"인스턴스에-의한-프로토타입의-교체",[629],{"type":28,"value":630},"인스턴스에 의한 프로토타입의 교체",{"type":16,"tag":17,"props":632,"children":635},{"className":633,"code":634,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {\n    sayHello() {\n        console.log(`Hi! My name is ${this.name}`);\n    }\n}\n\n// me 객체의 프로토타입을 parent 객체로 교체한다.\nObject.setPrototypeOf(me, parent);\n// me.__proto__ = parent; 와 동일하게 동작\n\nme.sayHello();\n\nconsole.log(me.constructor === Person); // false\nconsole.log(me.constructor === Object); // true\n",[636],{"type":16,"tag":24,"props":637,"children":638},{"__ignoreMap":7},[639],{"type":28,"value":634},{"type":16,"tag":41,"props":641,"children":643},{"src":642},"/blog/images/b41ede5f-03ee-40d7-9ce6-56671e8ac928.png",[],{"type":16,"tag":17,"props":645,"children":648},{"className":646,"code":647,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {\n    constructor: Person,\n    sayHello() {\n        console.log(`Hi! My name is ${this.name}`);\n    }\n}\n\nPerson.prototype = parent;\n\nObject.setPrototypeOf(me, parent);\n\nme.sayHello();\n\nconsole.log(me.constructor === Person); // true\nconsole.log(me.constructor === Object); // false\n\nconsole.log(Person.prototype === Object.getPrototypeOf(me)); // true\n",[649],{"type":16,"tag":24,"props":650,"children":651},{"__ignoreMap":7},[652],{"type":28,"value":647},{"type":16,"tag":30,"props":654,"children":655},{},[656],{"type":28,"value":49},{"type":16,"tag":30,"props":658,"children":659},{},[660],{"type":28,"value":661},"결론: 프로토타입은 직접 교체하지 않는 것이 좋다. 상속 관계를 인위적으로 설정하려면 “직접 상속”에서 살펴볼 Object.create가 더 편리하고 안전하다. 또한 ES6에서 도입된 클래스를 사용하면 간편하고 직관적으로 상속관계를 구현할 수 있다.",{"type":16,"tag":83,"props":663,"children":665},{"id":664},"instanceof-연산자",[666],{"type":28,"value":667},"instanceof 연산자",{"type":16,"tag":30,"props":669,"children":670},{},[671],{"type":28,"value":672},"우변의 생성자 함수의 prototype에 바인딩된 객체가 좌변의 객체의 프로토타입 체인 상에 존재하면 true로 평가되고, 그렇지 않은 경우에는 false로 평가된다.",{"type":16,"tag":17,"props":674,"children":677},{"className":675,"code":676,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconsole.log(me instanceof Person); // true\nconsole.log(me instanceof Object); // true\n",[678],{"type":16,"tag":24,"props":679,"children":680},{"__ignoreMap":7},[681],{"type":28,"value":676},{"type":16,"tag":30,"props":683,"children":684},{},[685],{"type":28,"value":686},"instanceof 연산자가 어떻게 동작하는지 이해하기 위해 프로토타입을 교체해 보자",{"type":16,"tag":17,"props":688,"children":691},{"className":689,"code":690,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {};\n\nObject.setPrototypeOf(me, parent);\n\n// Person.prototype이 me 객체의 프로토타입 체인 상에 존재하지 않기 때문에 false로 평가\nconsole.log(me instanceof Person); // false\n// Object.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가\nconsole.log(me instanceof Object); // true\n",[692],{"type":16,"tag":24,"props":693,"children":694},{"__ignoreMap":7},[695],{"type":28,"value":690},{"type":16,"tag":30,"props":697,"children":698},{},[699],{"type":28,"value":49},{"type":16,"tag":30,"props":701,"children":702},{},[703],{"type":28,"value":704},"프로토타입으로 교체한 parent 객체를 Person 생성자 함수의 prototype 프로퍼티에 바인딩하면 me instanceof Person은 true로 평가될 것이다.",{"type":16,"tag":17,"props":706,"children":709},{"className":707,"code":708,"language":10,"meta":7},[20],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {};\n\nObject.setPrototypeOf(me, parent);\n\nPerson.prototype = parent;\n// Person.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가\nconsole.log(me instanceof Person); // true\n// Object.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가\nconsole.log(me instanceof Object); // true\n",[710],{"type":16,"tag":24,"props":711,"children":712},{"__ignoreMap":7},[713],{"type":28,"value":708},{"type":16,"tag":30,"props":715,"children":716},{},[717],{"type":28,"value":49},{"type":16,"tag":30,"props":719,"children":720},{},[721],{"type":28,"value":722},"생성자 함수에 의해 프로토타입이 교체되어 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴되어도 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 연결은 파괴되지 않으므로 instanceof는 아무런 영향을 받지 않는다.",{"type":16,"tag":17,"props":724,"children":727},{"className":725,"code":726,"language":10,"meta":7},[20],"const Person = (function() {\n    function Person(name) {\n        this.name = name;\n    }\n    \n    Person.prototype = {\n        sayHello() {\n            console.log(`Hi! My name is ${this.name}`);\n        }\n    }\n    \n    return Person;\n}());\n\nconst me = new Person('Lee');\n\n// constructor 프로퍼티와 생성자 함수 간의 연결이 파괴되어도 instanceof는 아무런 영향을 받지 않는다.\nconsole.log(me.constructor === Person); // false\n\nconsole.log(me instanceof Person); // true\nconsole.log(me instanceof Object); // true\n",[728],{"type":16,"tag":24,"props":729,"children":730},{"__ignoreMap":7},[731],{"type":28,"value":726},{"type":16,"tag":83,"props":733,"children":735},{"id":734},"직접상속",[736],{"type":28,"value":734},{"type":16,"tag":123,"props":738,"children":740},{"id":739},"objectcreate에-의한-직접-상속",[741],{"type":28,"value":742},"Object.create에 의한 직접 상속",{"type":16,"tag":30,"props":744,"children":745},{},[746],{"type":28,"value":747},"Object.create 메서드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다.",{"type":16,"tag":30,"props":749,"children":750},{},[751],{"type":28,"value":49},{"type":16,"tag":30,"props":753,"children":754},{},[755],{"type":28,"value":756},"Object.create 단계별 동작",{"type":16,"tag":17,"props":758,"children":761},{"className":759,"code":760,"language":10,"meta":7},[20],"// obj의 프로토타입은 null이다.\nlet obj = Object.create(null);\n// Object의 메서드들을 사용하지 못한다.\nconsole.log(obj.toString()); // TypeError\n\n// obj -> Object.prototype -> null\n// obj = {} 동일\nobj = Object.create(Object.prototype);\n\nconst myProto = { x: 10 };\n\n// obj -> myProto -> Object.prototype -> null\nobj = Object.create(myProto);\n\nfunction Person(name) {\n    this.name = name;\n}\n// obj -> Person.prototype -> Object.prototype -> null\nobj = Object.create(Person.prototype);\n",[762],{"type":16,"tag":24,"props":763,"children":764},{"__ignoreMap":7},[765],{"type":28,"value":760},{"type":16,"tag":30,"props":767,"children":768},{},[769],{"type":28,"value":770},"위 코드는 과정을 보여주려고 null 부터 넣은거지 그냥 Object.create(myProto) 혹은 Object.create(Person) 바로 사용하면 됨",{"type":16,"tag":30,"props":772,"children":773},{},[774],{"type":28,"value":775},"프로토타입 체인은 종점은 null이다.",{"type":16,"tag":30,"props":777,"children":778},{},[779],{"type":28,"value":49},{"type":16,"tag":17,"props":781,"children":784},{"className":782,"code":783,"language":10,"meta":7},[20],"const obj = Object.create(null);\nobj.a = 1;\n\nconsole.log(obj.a); // 1\nconsole.log(obj.hasOwnProperty('a')); // TypeError\n\nconsole.log(Object.hasOwnProperty(obj, 'a')); // true\n",[785],{"type":16,"tag":24,"props":786,"children":787},{"__ignoreMap":7},[788],{"type":28,"value":783},{"type":16,"tag":30,"props":790,"children":791},{},[792],{"type":28,"value":49},{"type":16,"tag":308,"props":794,"children":795},{},[],{"type":16,"tag":30,"props":797,"children":798},{},[799],{"type":28,"value":800},"정적프로퍼티/메서드 부터 계속",{"type":16,"tag":30,"props":802,"children":803},{},[804],{"type":28,"value":49},{"title":7,"searchDepth":806,"depth":806,"links":807},2,[808,815,816,817,818,819,820,821,822],{"id":125,"depth":806,"text":128,"children":809},[810,812,813,814],{"id":141,"depth":811,"text":144},3,{"id":160,"depth":811,"text":163},{"id":193,"depth":811,"text":196},{"id":226,"depth":811,"text":229},{"id":253,"depth":806,"text":256},{"id":294,"depth":806,"text":297},{"id":476,"depth":806,"text":479},{"id":491,"depth":806,"text":494},{"id":506,"depth":806,"text":509},{"id":594,"depth":806,"text":597},{"id":627,"depth":806,"text":630},{"id":739,"depth":806,"text":742},"markdown","content:posts:eefbc7dd-a0f6-4078-97f5-9b6f26a483f1.md","content","posts/eefbc7dd-a0f6-4078-97f5-9b6f26a483f1.md","md",1718176956648]