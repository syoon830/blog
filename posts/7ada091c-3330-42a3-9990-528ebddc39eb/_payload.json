[{"data":1,"prerenderedAt":416},["Reactive",2],{"content-query-Kll3fwg0pL":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":411,"_id":412,"_source":413,"_file":414,"_extension":415},"/posts/7ada091c-3330-42a3-9990-528ebddc39eb","posts",false,"","자바스크립트 - 14. 생성자 함수에 의한 객체 생성","뒤에서 this 배울꺼지만 this 바인딩은 함수 호출 방식에 따라 동적으로 결정",[11],"javascript","2024-02-21T00:00:00.000Z",{"type":14,"children":15,"toc":406},"root",[16,23,35,40,45,54,58,65,74,79,83,88,92,102,129,138,146,159,168,176,184,193,198,207,211,216,225,229,235,240,249,253,258,263,268,273,277,282,287,296,300,305,310,315,319,324,328,335,340,345,354,358,364,369,374,379,384,389,398,402],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":24,"props":25,"children":29},"pre",{"className":26,"code":28,"language":11,"meta":7},[27],"language-javascript","function foo() {\n    console.log(this)\n}\n\nfoo(); // window\n\nconst obj = { foo };\n\nobj.foo(); // obj\n\nconst inst = new Foo(); // inst\n",[30],{"type":17,"tag":31,"props":32,"children":33},"code",{"__ignoreMap":7},[34],{"type":22,"value":28},{"type":17,"tag":18,"props":36,"children":37},{},[38],{"type":22,"value":39},"\\n",{"type":17,"tag":18,"props":41,"children":42},{},[43],{"type":22,"value":44},"생성자 함수는 이름 그대로 객체(인스턴스)를 생성하는 함수다.",{"type":17,"tag":18,"props":46,"children":47},{},[48],{"type":17,"tag":49,"props":50,"children":51},"strong",{},[52],{"type":22,"value":53},"new 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작한다.",{"type":17,"tag":18,"props":55,"children":56},{},[57],{"type":22,"value":39},{"type":17,"tag":59,"props":60,"children":62},"h1",{"id":61},"생성자-함수의-인스턴스-생성-과정",[63],{"type":22,"value":64},"생성자 함수의 인스턴스 생성 과정",{"type":17,"tag":24,"props":66,"children":69},{"className":67,"code":68,"language":11,"meta":7},[27],"function Circle(radius) {\n    // 인스턴스 초기화\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[70],{"type":17,"tag":31,"props":71,"children":72},{"__ignoreMap":7},[73],{"type":22,"value":68},{"type":17,"tag":18,"props":75,"children":76},{},[77],{"type":22,"value":78},"생성자 함수 내부의 코드를 살펴보면 this에 프로퍼티를 추가하고 필요에 따라 전달된 인수를 프로퍼티의 초기값으로서 할당하여 인스턴스를 초기화한다. 하지만 인스턴스를 생성하고 반환하는 코드는 보이지 않는다.",{"type":17,"tag":18,"props":80,"children":81},{},[82],{"type":22,"value":39},{"type":17,"tag":18,"props":84,"children":85},{},[86],{"type":22,"value":87},"자바스크립트 엔진은 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다. new 연산자와 함께 생성자 함수를 호출하면 자바스크립트 엔진은 다음과 같은 과정을 거친다.",{"type":17,"tag":18,"props":89,"children":90},{},[91],{"type":22,"value":39},{"type":17,"tag":93,"props":94,"children":95},"ol",{},[96],{"type":17,"tag":97,"props":98,"children":99},"li",{},[100],{"type":22,"value":101},"인스턴스 생성과 this 바인딩",{"type":17,"tag":103,"props":104,"children":105},"ul",{},[106,111,124],{"type":17,"tag":97,"props":107,"children":108},{},[109],{"type":22,"value":110},"암묵적으로 빈 객체가 생성된다. 이 객체가 바로(아직 완성X) 생성자 함수가 생성한 인스턴스",{"type":17,"tag":97,"props":112,"children":113},{},[114,116],{"type":22,"value":115},"이 인스턴스는 this에 바인딩된다.\n",{"type":17,"tag":103,"props":117,"children":118},{},[119],{"type":17,"tag":97,"props":120,"children":121},{},[122],{"type":22,"value":123},"바인딩이란 식별자와 값을 연결하는 과정을 의미한다. 예를 들어, 변수 선언은 변수 이름(식별자)과 확보된 메모리 공간의 주소를 바인딩하는 것이다. this 바인딩은 this와 this가 가리킬 객체를 바인딩하는 것이다.",{"type":17,"tag":97,"props":125,"children":126},{},[127],{"type":22,"value":128},"함수 몸체의 코드가 한 줄씩 실행되는 런타임 이전에 실행된다.",{"type":17,"tag":24,"props":130,"children":133},{"className":131,"code":132,"language":11,"meta":7},[27],"function Circle(radius) {\n    // 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 된다.\n    console.log(this); // Circle {}\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[134],{"type":17,"tag":31,"props":135,"children":136},{"__ignoreMap":7},[137],{"type":22,"value":132},{"type":17,"tag":93,"props":139,"children":140},{},[141],{"type":17,"tag":97,"props":142,"children":143},{},[144],{"type":22,"value":145},"인스턴스 초기화",{"type":17,"tag":103,"props":147,"children":148},{},[149,154],{"type":17,"tag":97,"props":150,"children":151},{},[152],{"type":22,"value":153},"생성자 함수에 기술되어 있는 코드가 한 줄씩 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다.",{"type":17,"tag":97,"props":155,"children":156},{},[157],{"type":22,"value":158},"즉, this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가",{"type":17,"tag":24,"props":160,"children":163},{"className":161,"code":162,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    // 2. this에 바인딩되어 있는 인스턴스를 초기화한다.\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[164],{"type":17,"tag":31,"props":165,"children":166},{"__ignoreMap":7},[167],{"type":22,"value":162},{"type":17,"tag":93,"props":169,"children":170},{},[171],{"type":17,"tag":97,"props":172,"children":173},{},[174],{"type":22,"value":175},"인스턴스 반환",{"type":17,"tag":103,"props":177,"children":178},{},[179],{"type":17,"tag":97,"props":180,"children":181},{},[182],{"type":22,"value":183},"생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.",{"type":17,"tag":24,"props":185,"children":188},{"className":186,"code":187,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n    // 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(cirlce); // Circle{...}\n",[189],{"type":17,"tag":31,"props":190,"children":191},{"__ignoreMap":7},[192],{"type":22,"value":187},{"type":17,"tag":18,"props":194,"children":195},{},[196],{"type":22,"value":197},"만약 this가 아닌 다른 객체를 명시적으로 반환하면 this가 반환되지 못하고 return 문에 명시한 객체가 반환된다.",{"type":17,"tag":24,"props":199,"children":202},{"className":200,"code":201,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return {}\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // {}\n",[203],{"type":17,"tag":31,"props":204,"children":205},{"__ignoreMap":7},[206],{"type":22,"value":201},{"type":17,"tag":18,"props":208,"children":209},{},[210],{"type":22,"value":39},{"type":17,"tag":18,"props":212,"children":213},{},[214],{"type":22,"value":215},"하지만 명시적으로 원시 값을 반환하면 원시 값 반환은 무시되고 암묵적으로 this가 반환된다.",{"type":17,"tag":24,"props":217,"children":220},{"className":218,"code":219,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return 100;\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // Circle {}\n",[221],{"type":17,"tag":31,"props":222,"children":223},{"__ignoreMap":7},[224],{"type":22,"value":219},{"type":17,"tag":18,"props":226,"children":227},{},[228],{"type":22,"value":39},{"type":17,"tag":59,"props":230,"children":232},{"id":231},"내부-메서드-call과-constructor",[233],{"type":22,"value":234},"내부 메서드 [[Call]]과 [[Constructor]]",{"type":17,"tag":18,"props":236,"children":237},{},[238],{"type":22,"value":239},"함수는 객체다. 그래서 일반 객체가 가지고 있는 내부 슬롯과 내부 메서드를 모두 가지고 있다.",{"type":17,"tag":24,"props":241,"children":244},{"className":242,"code":243,"language":11,"meta":7},[27],"function foo() {}\n\n// 함수는 객체이므로 프로퍼티를 소유할 수 있다.\nfoo.prop = 10;\n\n// 함수는 객체이므로 메서드를 소유할 수 있다.\nfoo.method = function() {\n    console.log(this.prop);\n}\n\nfoo.method(); // 10\n",[245],{"type":17,"tag":31,"props":246,"children":247},{"__ignoreMap":7},[248],{"type":22,"value":243},{"type":17,"tag":18,"props":250,"children":251},{},[252],{"type":22,"value":39},{"type":17,"tag":18,"props":254,"children":255},{},[256],{"type":22,"value":257},"하지만 함수만에 특징이 있으니 함수는 호출할 수 있다.",{"type":17,"tag":18,"props":259,"children":260},{},[261],{"type":22,"value":262},"그래서 함수 객체만 가지고 있는 내부 슬롯과 내부 메서드를 추가로 가지고 있다.",{"type":17,"tag":18,"props":264,"children":265},{},[266],{"type":22,"value":267},"[[Environment]], [[FormalParameters]] 내부슬롯과",{"type":17,"tag":18,"props":269,"children":270},{},[271],{"type":22,"value":272},"[[Call]], [[Construct]] 내부 메서드",{"type":17,"tag":18,"props":274,"children":275},{},[276],{"type":22,"value":39},{"type":17,"tag":18,"props":278,"children":279},{},[280],{"type":22,"value":281},"함수가 일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 호출되고",{"type":17,"tag":18,"props":283,"children":284},{},[285],{"type":22,"value":286},"new 연산자와 함께 생성자 함수로서 호출되면 내부 메서드 [[Construct]]가 호출된다.",{"type":17,"tag":24,"props":288,"children":291},{"className":289,"code":290,"language":11,"meta":7},[27],"function foo() {}\n\n// 일반적인 함수로서 호출: [[Call]]이 호출된다.\nfoo();\n\n// 생성자 함수로서 호출: [[Constructor]]가 호출된다.\nnew foo();\n",[292],{"type":17,"tag":31,"props":293,"children":294},{"__ignoreMap":7},[295],{"type":22,"value":290},{"type":17,"tag":18,"props":297,"children":298},{},[299],{"type":22,"value":39},{"type":17,"tag":18,"props":301,"children":302},{},[303],{"type":22,"value":304},"[[Call]]을 갖는 함수 객체를 callable",{"type":17,"tag":18,"props":306,"children":307},{},[308],{"type":22,"value":309},"[[Construct]]를 갖는 함수 객체를 contructor",{"type":17,"tag":18,"props":311,"children":312},{},[313],{"type":22,"value":314},"[[Construct]]를 갖지 않는 함수 객체를 non-contructor",{"type":17,"tag":18,"props":316,"children":317},{},[318],{"type":22,"value":39},{"type":17,"tag":18,"props":320,"children":321},{},[322],{"type":22,"value":323},"모든 함수는 callable이다. 하지만 모든 함수는 constructor아니면 non-constructor이다.",{"type":17,"tag":18,"props":325,"children":326},{},[327],{"type":22,"value":39},{"type":17,"tag":329,"props":330,"children":332},"h2",{"id":331},"constructor와-non-constructor-구분",[333],{"type":22,"value":334},"constructor와 non-constructor 구분",{"type":17,"tag":18,"props":336,"children":337},{},[338],{"type":22,"value":339},"constructor 함수 선언문, 함수 표현식, 클래스(클래스도 함수다)",{"type":17,"tag":18,"props":341,"children":342},{},[343],{"type":22,"value":344},"non-constructor: 메서드(ES6 메서드 축약 표현), 화살표 함수",{"type":17,"tag":24,"props":346,"children":349},{"className":347,"code":348,"language":11,"meta":7},[27],"function foo() {};\nconst bar = function() {};\n\nconst baz = {\n    x: function() {}\n}\n\nnew foo(); // -> foo {}\nnew bar(); // -> bar {}\nnew baz.x; // -> x {}\n\nconst arrow = () => {};\n\nnew arrow(); // TypeError: arrow is not a constructor\n\nconst obj = {\n    x() {}\n}\n\nnew obj.x; // TypeError: obj.x is not a constructor\n",[350],{"type":17,"tag":31,"props":351,"children":352},{"__ignoreMap":7},[353],{"type":22,"value":348},{"type":17,"tag":18,"props":355,"children":356},{},[357],{"type":22,"value":39},{"type":17,"tag":329,"props":359,"children":361},{"id":360},"newtarget",[362],{"type":22,"value":363},"new.target",{"type":17,"tag":18,"props":365,"children":366},{},[367],{"type":22,"value":368},"생성자 함수가 new 연산자 없이 호출되는 것을 방지하기 위한 프로퍼티",{"type":17,"tag":18,"props":370,"children":371},{},[372],{"type":22,"value":373},"new.target은 this와 유사하게 constructor인 모든 함수 내부에서 암묵적인 지역 변수와 같이 사용되며 메타 프로퍼티라고 부른다.",{"type":17,"tag":18,"props":375,"children":376},{},[377],{"type":22,"value":378},"new.target을 사용하면 new 연산자와 함께 생성자 함수로서 호출되었는지 확인할 수 있다.",{"type":17,"tag":18,"props":380,"children":381},{},[382],{"type":22,"value":383},"new 연산자와 함께 생성자 함수로서 호출되면 함수 내부의 new.target은 함수 자신을 가리킨다.",{"type":17,"tag":18,"props":385,"children":386},{},[387],{"type":22,"value":388},"new 연산자 없이 일반 함수로서 호출된 함수 내부의 new.target은 undefined다.",{"type":17,"tag":24,"props":390,"children":393},{"className":391,"code":392,"language":11,"meta":7},[27],"function Circle(radius){\n    if (!new.target) {\n        return new Cricle(radius);\n    }\n    ....\n}\n\nconst circle = Circle(5);\n",[394],{"type":17,"tag":31,"props":395,"children":396},{"__ignoreMap":7},[397],{"type":22,"value":392},{"type":17,"tag":18,"props":399,"children":400},{},[401],{"type":22,"value":39},{"type":17,"tag":18,"props":403,"children":404},{},[405],{"type":22,"value":39},{"title":7,"searchDepth":407,"depth":407,"links":408},2,[409,410],{"id":331,"depth":407,"text":334},{"id":360,"depth":407,"text":363},"markdown","content:posts:7ada091c-3330-42a3-9990-528ebddc39eb.md","content","posts/7ada091c-3330-42a3-9990-528ebddc39eb.md","md",1710325141887]