[{"data":1,"prerenderedAt":490},["Reactive",2],{"content-query-Kll3fwg0pL":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":485,"_id":486,"_source":487,"_file":488,"_extension":489},"/posts/7ada091c-3330-42a3-9990-528ebddc39eb","posts",false,"","자바스크립트 - 14. 생성자 함수에 의한 객체 생성","뒤에서 this 배울꺼지만 this 바인딩은 함수 호출 방식에 따라 동적으로 결정",[11],"javascript","2024-02-21T00:00:00.000Z",{"type":14,"children":15,"toc":475},"root",[16,23,35,40,45,54,61,70,75,79,84,88,95,123,132,138,151,160,166,174,183,188,197,201,206,215,219,225,230,239,243,248,253,258,263,267,272,277,286,290,295,300,305,309,314,318,325,330,335,344,348,354,359,364,369,374,379,388,392,396,401,410,435,452,456,459,464],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":24,"props":25,"children":29},"pre",{"className":26,"code":28,"language":11,"meta":7},[27],"language-javascript","function foo() {\n    console.log(this)\n}\n\nfoo(); // window\n\nconst obj = { foo };\n\nobj.foo(); // obj\n\nconst inst = new Foo(); // inst\n",[30],{"type":17,"tag":31,"props":32,"children":33},"code",{"__ignoreMap":7},[34],{"type":22,"value":28},{"type":17,"tag":18,"props":36,"children":37},{},[38],{"type":22,"value":39},"\\n",{"type":17,"tag":18,"props":41,"children":42},{},[43],{"type":22,"value":44},"생성자 함수는 이름 그대로 객체(인스턴스)를 생성하는 함수다.",{"type":17,"tag":18,"props":46,"children":47},{},[48],{"type":17,"tag":49,"props":50,"children":51},"strong",{},[52],{"type":22,"value":53},"new 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작한다.",{"type":17,"tag":55,"props":56,"children":58},"h1",{"id":57},"생성자-함수의-인스턴스-생성-과정",[59],{"type":22,"value":60},"생성자 함수의 인스턴스 생성 과정",{"type":17,"tag":24,"props":62,"children":65},{"className":63,"code":64,"language":11,"meta":7},[27],"function Circle(radius) {\n    // 인스턴스 초기화\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[66],{"type":17,"tag":31,"props":67,"children":68},{"__ignoreMap":7},[69],{"type":22,"value":64},{"type":17,"tag":18,"props":71,"children":72},{},[73],{"type":22,"value":74},"생성자 함수 내부의 코드를 살펴보면 this에 프로퍼티를 추가하고 필요에 따라 전달된 인수를 프로퍼티의 초기값으로서 할당하여 인스턴스를 초기화한다. 하지만 인스턴스를 생성하고 반환하는 코드는 보이지 않는다.",{"type":17,"tag":18,"props":76,"children":77},{},[78],{"type":22,"value":39},{"type":17,"tag":18,"props":80,"children":81},{},[82],{"type":22,"value":83},"자바스크립트 엔진은 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다. new 연산자와 함께 생성자 함수를 호출하면 자바스크립트 엔진은 다음과 같은 과정을 거친다.",{"type":17,"tag":18,"props":85,"children":86},{},[87],{"type":22,"value":39},{"type":17,"tag":89,"props":90,"children":92},"h3",{"id":91},"_1-인스턴스-생성과-this-바인딩",[93],{"type":22,"value":94},"1. 인스턴스 생성과 this 바인딩",{"type":17,"tag":96,"props":97,"children":98},"ul",{},[99,105,118],{"type":17,"tag":100,"props":101,"children":102},"li",{},[103],{"type":22,"value":104},"암묵적으로 빈 객체가 생성된다. 이 객체가 바로(아직 완성X) 생성자 함수가 생성한 인스턴스",{"type":17,"tag":100,"props":106,"children":107},{},[108,110],{"type":22,"value":109},"이 인스턴스는 this에 바인딩된다.\n",{"type":17,"tag":96,"props":111,"children":112},{},[113],{"type":17,"tag":100,"props":114,"children":115},{},[116],{"type":22,"value":117},"바인딩이란 식별자와 값을 연결하는 과정을 의미한다. 예를 들어, 변수 선언은 변수 이름(식별자)과 확보된 메모리 공간의 주소를 바인딩하는 것이다. this 바인딩은 this와 this가 가리킬 객체를 바인딩하는 것이다.",{"type":17,"tag":100,"props":119,"children":120},{},[121],{"type":22,"value":122},"함수 몸체의 코드가 한 줄씩 실행되는 런타임 이전에 실행된다.",{"type":17,"tag":24,"props":124,"children":127},{"className":125,"code":126,"language":11,"meta":7},[27],"function Circle(radius) {\n    // 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 된다.\n    console.log(this); // Circle {}\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[128],{"type":17,"tag":31,"props":129,"children":130},{"__ignoreMap":7},[131],{"type":22,"value":126},{"type":17,"tag":89,"props":133,"children":135},{"id":134},"_2-인스턴스-초기화",[136],{"type":22,"value":137},"2. 인스턴스 초기화",{"type":17,"tag":96,"props":139,"children":140},{},[141,146],{"type":17,"tag":100,"props":142,"children":143},{},[144],{"type":22,"value":145},"생성자 함수에 기술되어 있는 코드가 한 줄씩 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다.",{"type":17,"tag":100,"props":147,"children":148},{},[149],{"type":22,"value":150},"즉, this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가",{"type":17,"tag":24,"props":152,"children":155},{"className":153,"code":154,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    // 2. this에 바인딩되어 있는 인스턴스를 초기화한다.\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[156],{"type":17,"tag":31,"props":157,"children":158},{"__ignoreMap":7},[159],{"type":22,"value":154},{"type":17,"tag":89,"props":161,"children":163},{"id":162},"_3-인스턴스-반환",[164],{"type":22,"value":165},"3. 인스턴스 반환",{"type":17,"tag":96,"props":167,"children":168},{},[169],{"type":17,"tag":100,"props":170,"children":171},{},[172],{"type":22,"value":173},"생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.",{"type":17,"tag":24,"props":175,"children":178},{"className":176,"code":177,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n    // 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(cirlce); // Circle{...}\n",[179],{"type":17,"tag":31,"props":180,"children":181},{"__ignoreMap":7},[182],{"type":22,"value":177},{"type":17,"tag":18,"props":184,"children":185},{},[186],{"type":22,"value":187},"만약 this가 아닌 다른 객체를 명시적으로 반환하면 this가 반환되지 못하고 return 문에 명시한 객체가 반환된다.",{"type":17,"tag":24,"props":189,"children":192},{"className":190,"code":191,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return {}\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // {}\n",[193],{"type":17,"tag":31,"props":194,"children":195},{"__ignoreMap":7},[196],{"type":22,"value":191},{"type":17,"tag":18,"props":198,"children":199},{},[200],{"type":22,"value":39},{"type":17,"tag":18,"props":202,"children":203},{},[204],{"type":22,"value":205},"하지만 명시적으로 원시 값을 반환하면 원시 값 반환은 무시되고 암묵적으로 this가 반환된다.",{"type":17,"tag":24,"props":207,"children":210},{"className":208,"code":209,"language":11,"meta":7},[27],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return 100;\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // Circle {}\n",[211],{"type":17,"tag":31,"props":212,"children":213},{"__ignoreMap":7},[214],{"type":22,"value":209},{"type":17,"tag":18,"props":216,"children":217},{},[218],{"type":22,"value":39},{"type":17,"tag":55,"props":220,"children":222},{"id":221},"내부-메서드-call과-constructor",[223],{"type":22,"value":224},"내부 메서드 [[Call]]과 [[Constructor]]",{"type":17,"tag":18,"props":226,"children":227},{},[228],{"type":22,"value":229},"함수는 객체다. 그래서 일반 객체가 가지고 있는 내부 슬롯과 내부 메서드를 모두 가지고 있다.",{"type":17,"tag":24,"props":231,"children":234},{"className":232,"code":233,"language":11,"meta":7},[27],"function foo() {}\n\n// 함수는 객체이므로 프로퍼티를 소유할 수 있다.\nfoo.prop = 10;\n\n// 함수는 객체이므로 메서드를 소유할 수 있다.\nfoo.method = function() {\n    console.log(this.prop);\n}\n\nfoo.method(); // 10\n",[235],{"type":17,"tag":31,"props":236,"children":237},{"__ignoreMap":7},[238],{"type":22,"value":233},{"type":17,"tag":18,"props":240,"children":241},{},[242],{"type":22,"value":39},{"type":17,"tag":18,"props":244,"children":245},{},[246],{"type":22,"value":247},"하지만 함수만에 특징이 있으니 함수는 호출할 수 있다.",{"type":17,"tag":18,"props":249,"children":250},{},[251],{"type":22,"value":252},"그래서 함수 객체만 가지고 있는 내부 슬롯과 내부 메서드를 추가로 가지고 있다.",{"type":17,"tag":18,"props":254,"children":255},{},[256],{"type":22,"value":257},"[[Environment]], [[FormalParameters]] 내부슬롯과",{"type":17,"tag":18,"props":259,"children":260},{},[261],{"type":22,"value":262},"[[Call]], [[Construct]] 내부 메서드",{"type":17,"tag":18,"props":264,"children":265},{},[266],{"type":22,"value":39},{"type":17,"tag":18,"props":268,"children":269},{},[270],{"type":22,"value":271},"함수가 일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 호출되고",{"type":17,"tag":18,"props":273,"children":274},{},[275],{"type":22,"value":276},"new 연산자와 함께 생성자 함수로서 호출되면 내부 메서드 [[Construct]]가 호출된다.",{"type":17,"tag":24,"props":278,"children":281},{"className":279,"code":280,"language":11,"meta":7},[27],"function foo() {}\n\n// 일반적인 함수로서 호출: [[Call]]이 호출된다.\nfoo();\n\n// 생성자 함수로서 호출: [[Constructor]]가 호출된다.\nnew foo();\n",[282],{"type":17,"tag":31,"props":283,"children":284},{"__ignoreMap":7},[285],{"type":22,"value":280},{"type":17,"tag":18,"props":287,"children":288},{},[289],{"type":22,"value":39},{"type":17,"tag":18,"props":291,"children":292},{},[293],{"type":22,"value":294},"[[Call]]을 갖는 함수 객체를 callable",{"type":17,"tag":18,"props":296,"children":297},{},[298],{"type":22,"value":299},"[[Construct]]를 갖는 함수 객체를 constructor",{"type":17,"tag":18,"props":301,"children":302},{},[303],{"type":22,"value":304},"[[Construct]]를 갖지 않는 함수 객체를 non-constructor",{"type":17,"tag":18,"props":306,"children":307},{},[308],{"type":22,"value":39},{"type":17,"tag":18,"props":310,"children":311},{},[312],{"type":22,"value":313},"모든 함수는 callable이다. 하지만 모든 함수는 constructor아니면 non-constructor이다.",{"type":17,"tag":18,"props":315,"children":316},{},[317],{"type":22,"value":39},{"type":17,"tag":319,"props":320,"children":322},"h2",{"id":321},"constructor와-non-constructor-구분",[323],{"type":22,"value":324},"constructor와 non-constructor 구분",{"type":17,"tag":18,"props":326,"children":327},{},[328],{"type":22,"value":329},"constructor 함수 선언문, 함수 표현식, 클래스(클래스도 함수다)",{"type":17,"tag":18,"props":331,"children":332},{},[333],{"type":22,"value":334},"non-constructor: 메서드(ES6 메서드 축약 표현), 화살표 함수",{"type":17,"tag":24,"props":336,"children":339},{"className":337,"code":338,"language":11,"meta":7},[27],"function foo() {};\nconst bar = function() {};\n\nconst baz = {\n    x: function() {}\n}\n\nnew foo(); // -> foo {}\nnew bar(); // -> bar {}\nnew baz.x; // -> x {}\n\nconst arrow = () => {};\n\nnew arrow(); // TypeError: arrow is not a constructor\n\nconst obj = {\n    x() {}\n}\n\nnew obj.x; // TypeError: obj.x is not a constructor\n",[340],{"type":17,"tag":31,"props":341,"children":342},{"__ignoreMap":7},[343],{"type":22,"value":338},{"type":17,"tag":18,"props":345,"children":346},{},[347],{"type":22,"value":39},{"type":17,"tag":319,"props":349,"children":351},{"id":350},"newtarget",[352],{"type":22,"value":353},"new.target",{"type":17,"tag":18,"props":355,"children":356},{},[357],{"type":22,"value":358},"생성자 함수가 new 연산자 없이 호출되는 것을 방지하기 위한 프로퍼티",{"type":17,"tag":18,"props":360,"children":361},{},[362],{"type":22,"value":363},"new.target은 this와 유사하게 constructor인 모든 함수 내부에서 암묵적인 지역 변수와 같이 사용되며 메타 프로퍼티라고 부른다.",{"type":17,"tag":18,"props":365,"children":366},{},[367],{"type":22,"value":368},"new.target을 사용하면 new 연산자와 함께 생성자 함수로서 호출되었는지 확인할 수 있다.",{"type":17,"tag":18,"props":370,"children":371},{},[372],{"type":22,"value":373},"new 연산자와 함께 생성자 함수로서 호출되면 함수 내부의 new.target은 함수 자신을 가리킨다.",{"type":17,"tag":18,"props":375,"children":376},{},[377],{"type":22,"value":378},"new 연산자 없이 일반 함수로서 호출된 함수 내부의 new.target은 undefined다.",{"type":17,"tag":24,"props":380,"children":383},{"className":381,"code":382,"language":11,"meta":7},[27],"function Circle(radius){\n    if (!new.target) {\n        return new Cricle(radius);\n    }\n    ....\n}\n\nconst circle = Circle(5);\n",[384],{"type":17,"tag":31,"props":385,"children":386},{"__ignoreMap":7},[387],{"type":22,"value":382},{"type":17,"tag":18,"props":389,"children":390},{},[391],{"type":22,"value":39},{"type":17,"tag":393,"props":394,"children":395},"hr",{},[],{"type":17,"tag":18,"props":397,"children":398},{},[399],{"type":22,"value":400},"Function의 생성자는 자기 자신이다",{"type":17,"tag":24,"props":402,"children":405},{"className":403,"code":404,"language":11,"meta":7},[27],"function func() {\n\n}\n\nlet test = new func();\n\nconsole.log(test.constructor); // Function func...\nconsole.log(Function.constructor); // Function\nconsole.log(Function.constructor.constructor); // Function\nconsole.log(Function.constructor.constructor.constructor); // Function\n\nconsole.log(Function.constructor === Function); // true\n",[406],{"type":17,"tag":31,"props":407,"children":408},{"__ignoreMap":7},[409],{"type":22,"value":404},{"type":17,"tag":18,"props":411,"children":412},{},[413,415,420,422,427,429,433],{"type":22,"value":414},"JavaScript에서 ",{"type":17,"tag":31,"props":416,"children":417},{},[418],{"type":22,"value":419},"Function",{"type":22,"value":421}," 객체는 매우 특별한데, 그것은 자기 자신을 생성하는 고유한 특성을 가지고 있습니다. 이는 ",{"type":17,"tag":31,"props":423,"children":424},{},[425],{"type":22,"value":426},"Function.constructor",{"type":22,"value":428},"가 ",{"type":17,"tag":31,"props":430,"children":431},{},[432],{"type":22,"value":419},{"type":22,"value":434},"을 가리키는 것으로 확인할 수 있습니다.",{"type":17,"tag":18,"props":436,"children":437},{},[438,440,444,446,450],{"type":22,"value":439},"이러한 자기 참조적 특성은 JavaScript에서 ",{"type":17,"tag":31,"props":441,"children":442},{},[443],{"type":22,"value":419},{"type":22,"value":445},"이 매우 독특한 역할을 한다는 것을 의미합니다. ",{"type":17,"tag":31,"props":447,"children":448},{},[449],{"type":22,"value":419},{"type":22,"value":451},"은 모든 함수의 기본이 되는 생성자 함수이며, 동시에 자신의 인스턴스이기도 합니다. 이는 JavaScript의 프로토타입 기반 상속과 객체 모델의 일부로, 이 언어의 독특한 특성 중 하나입니다.",{"type":17,"tag":18,"props":453,"children":454},{},[455],{"type":22,"value":39},{"type":17,"tag":393,"props":457,"children":458},{},[],{"type":17,"tag":319,"props":460,"children":462},{"id":461},"참고",[463],{"type":22,"value":461},{"type":17,"tag":96,"props":465,"children":466},{},[467],{"type":17,"tag":100,"props":468,"children":469},{},[470],{"type":17,"tag":49,"props":471,"children":472},{},[473],{"type":22,"value":474},"이웅모, 「모던 자바스크립트 Deep Dive」, 위키북스, 2020",{"title":7,"searchDepth":476,"depth":476,"links":477},2,[478,480,481,482,483,484],{"id":91,"depth":479,"text":94},3,{"id":134,"depth":479,"text":137},{"id":162,"depth":479,"text":165},{"id":321,"depth":476,"text":324},{"id":350,"depth":476,"text":353},{"id":461,"depth":476,"text":461},"markdown","content:posts:7ada091c-3330-42a3-9990-528ebddc39eb.md","content","posts/7ada091c-3330-42a3-9990-528ebddc39eb.md","md",1719041868614]