[{"data":1,"prerenderedAt":409},["Reactive",2],{"content-query-E6NQ1we8Fc":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"tags":10,"date":12,"body":13,"_type":404,"_id":405,"_source":406,"_file":407,"_extension":408},"/posts/62b25952-eab1-4faf-b3ec-9b0928301bb6","posts",false,"","자바스크립트 - 18. this","this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다.",[11],"javascript","2024-02-26T00:00:00.000Z",{"type":14,"children":15,"toc":391},"root",[16,23,28,35,40,50,55,62,67,72,84,88,93,102,106,111,120,124,129,136,145,151,160,166,175,181,186,195,200,205,209,214,223,227,232,241,245,251,256,265,271,280,284,289,293,298,307,311,316,325,329,334,343,348,357,366,370,374,379],{"type":17,"tag":18,"props":19,"children":20},"element","p",{},[21],{"type":22,"value":9},"text",{"type":17,"tag":18,"props":24,"children":25},{},[26],{"type":22,"value":27},"자바스크립트 this는 함수가 호출되는 방식에 따라 this에 바인딩될 값, 즉 this 바인딩이 동적으로 결정된다.",{"type":17,"tag":29,"props":30,"children":32},"h1",{"id":31},"함수-호출-방식과-this-바인딩",[33],{"type":22,"value":34},"함수 호출 방식과 this 바인딩",{"type":17,"tag":18,"props":36,"children":37},{},[38],{"type":22,"value":39},"렉시컬 스코프와 this 바인딩은 결정 시기가 다르다.",{"type":17,"tag":41,"props":42,"children":43},"ul",{},[44],{"type":17,"tag":45,"props":46,"children":47},"li",{},[48],{"type":22,"value":49},"함수의 상위 스코프를 결정하는 방식인 렉시컬 스코프는 함수 정의가 평가되어 함수 객체가 생성되는 시점에 상위 스코프를 결정한다. 하지만 this 바인딩은 함수 호출 시점에 결정된다.",{"type":17,"tag":18,"props":51,"children":52},{},[53],{"type":22,"value":54},"\\n",{"type":17,"tag":56,"props":57,"children":59},"h2",{"id":58},"일반-함수-호출",[60],{"type":22,"value":61},"일반 함수 호출",{"type":17,"tag":18,"props":63,"children":64},{},[65],{"type":22,"value":66},"기본적으로 this에는 전역 객체(global object)가 바인딩된다.",{"type":17,"tag":18,"props":68,"children":69},{},[70],{"type":22,"value":71},"전역 함수는 물론이고 중첩 함수를 일반 함수로 호출하면 함수 내부의 this에는 전역 객체가 바인딩된다.",{"type":17,"tag":73,"props":74,"children":78},"pre",{"className":75,"code":77,"language":11,"meta":7},[76],"language-javascript","function foo() {\n    console.log(\"foo's this: \", this); // window\n    function bar() {\n        console.log(\"bar's this: \", this); // window\n    }\n    bar();\n}\nfoo();\n",[79],{"type":17,"tag":80,"props":81,"children":82},"code",{"__ignoreMap":7},[83],{"type":22,"value":77},{"type":17,"tag":18,"props":85,"children":86},{},[87],{"type":22,"value":54},{"type":17,"tag":18,"props":89,"children":90},{},[91],{"type":22,"value":92},"메서드(객체 안에 함수) 내에서 정의한 중첩 함수도 일반 함수로 호출되면 중첩 함수 내부의 this에는 전역 객체가 바인딩된다.",{"type":17,"tag":73,"props":94,"children":97},{"className":95,"code":96,"language":11,"meta":7},[76],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        consoel.log(this.value); // 100\n\n        function bar() {\n            console.log(this); // window\n            console.log(this.value); // 1\n        }\n        bar();\n    }\n}\n",[98],{"type":17,"tag":80,"props":99,"children":100},{"__ignoreMap":7},[101],{"type":22,"value":96},{"type":17,"tag":18,"props":103,"children":104},{},[105],{"type":22,"value":54},{"type":17,"tag":18,"props":107,"children":108},{},[109],{"type":22,"value":110},"콜백 함수가 일반 함수로 호출된다면 콜백 함수 내부의 this에도 전역 객체가 바인딩된다. 어떠한 함수라도 일반 함수로 호출되면 this에 전역 객체가 바인딩된다.",{"type":17,"tag":73,"props":112,"children":115},{"className":113,"code":114,"language":11,"meta":7},[76],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        setTimeout(function() {\n            console.log(this.value); // 1\n        })\n    }\n}\n",[116],{"type":17,"tag":80,"props":117,"children":118},{"__ignoreMap":7},[119],{"type":22,"value":114},{"type":17,"tag":18,"props":121,"children":122},{},[123],{"type":22,"value":54},{"type":17,"tag":18,"props":125,"children":126},{},[127],{"type":22,"value":128},"메서드 내부의 중첩 함수나 콜백 함수의 this 바인딩을 메서드의 this 바인딩과 일치시키기 위한 방법",{"type":17,"tag":130,"props":131,"children":133},"h3",{"id":132},"this를-변수에-할당",[134],{"type":22,"value":135},"this를 변수에 할당",{"type":17,"tag":73,"props":137,"children":140},{"className":138,"code":139,"language":11,"meta":7},[76],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        var that = this;\n        setTimeout(function() {\n            console.log(that.value); // 100\n        })\n    }\n}\n",[141],{"type":17,"tag":80,"props":142,"children":143},{"__ignoreMap":7},[144],{"type":22,"value":139},{"type":17,"tag":130,"props":146,"children":148},{"id":147},"apply-call-bind",[149],{"type":22,"value":150},"apply, call, bind",{"type":17,"tag":73,"props":152,"children":155},{"className":153,"code":154,"language":11,"meta":7},[76],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(function() {\n            console.log(this.value); // 100\n        }.bind(this))\n    }\n}\n",[156],{"type":17,"tag":80,"props":157,"children":158},{"__ignoreMap":7},[159],{"type":22,"value":154},{"type":17,"tag":130,"props":161,"children":163},{"id":162},"화살표-함수",[164],{"type":22,"value":165},"화살표 함수",{"type":17,"tag":73,"props":167,"children":170},{"className":168,"code":169,"language":11,"meta":7},[76],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(() => {\n            console.log(this.value); // 100\n        })\n    }\n}\n",[171],{"type":17,"tag":80,"props":172,"children":173},{"__ignoreMap":7},[174],{"type":22,"value":169},{"type":17,"tag":56,"props":176,"children":178},{"id":177},"메서드-호출",[179],{"type":22,"value":180},"메서드 호출",{"type":17,"tag":18,"props":182,"children":183},{},[184],{"type":22,"value":185},"메서드 내부의 this에는 메서드를 호출한 객체, 즉 메서드를 호출할 때 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩된다. 주의할 것은 메서드 내부의 this는 메서드를 소유한 객체가 아닌 메서드를 호출한 객체에 바인딩된다는 것이다.",{"type":17,"tag":73,"props":187,"children":190},{"className":188,"code":189,"language":11,"meta":7},[76],"const person = {\n    name: 'Lee',\n    getName() {\n        return this.name;\n    }\n}\nconsole.log(person.getName());\n",[191],{"type":17,"tag":80,"props":192,"children":193},{"__ignoreMap":7},[194],{"type":22,"value":189},{"type":17,"tag":18,"props":196,"children":197},{},[198],{"type":22,"value":199},"오해하면 안되는게 getName의 함수 객체는 person의 포함된게 아니라 독립적으로 존재하는 별도의 객체(메모리에 별도로)다. getName 프로퍼티가 함수 객체를 가리키고 있을 뿐이다.",{"type":17,"tag":201,"props":202,"children":204},"img",{"src":203},"/blog/images/1be99fb9-d92b-4c1a-9673-66579147815c.png",[],{"type":17,"tag":18,"props":206,"children":207},{},[208],{"type":22,"value":54},{"type":17,"tag":18,"props":210,"children":211},{},[212],{"type":22,"value":213},"따라서 getName 프로퍼티가 가리키는 함수 객체, 즉 getName 메서드는 다른 객체의 프로퍼티에 할당하는 것으로 다른 객체의 메서드가 될 수도 있고 일반 변수에 할당하여 일반 함수로 호출될 수도 있다.",{"type":17,"tag":73,"props":215,"children":218},{"className":216,"code":217,"language":11,"meta":7},[76],"const person = {\n  name: 'Lee',\n  getName() {\n    return this.name;\n  }\n}\nconst annotherPerson = {\n  name: 'kim'\n}\nannotherPerson.getName = person.getName;\nconsole.log(annotherPerson.getName()); // kim\n\nlet getName = person.getName;\nconsole.log(getName()); // ''\n",[219],{"type":17,"tag":80,"props":220,"children":221},{"__ignoreMap":7},[222],{"type":22,"value":217},{"type":17,"tag":18,"props":224,"children":225},{},[226],{"type":22,"value":54},{"type":17,"tag":18,"props":228,"children":229},{},[230],{"type":22,"value":231},"프로토타입 메서드 내부에서 사용된 this도 일반 메서드와 마찬가지로 해당 메서드를 호출한 객체에 바인딩된다.",{"type":17,"tag":73,"props":233,"children":236},{"className":234,"code":235,"language":11,"meta":7},[76],"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.getName = funciton() {\n    return this.name;\n};\n\nconst me = new Person('Lee');\n\nconsole.log(me.getName()); // Lee\n\nPerson.prototype.name = \"kim\";\nconsole.log(person.prototype.getName()); // kim\n",[237],{"type":17,"tag":80,"props":238,"children":239},{"__ignoreMap":7},[240],{"type":22,"value":235},{"type":17,"tag":18,"props":242,"children":243},{},[244],{"type":22,"value":54},{"type":17,"tag":56,"props":246,"children":248},{"id":247},"생성자-함수-호출",[249],{"type":22,"value":250},"생성자 함수 호출",{"type":17,"tag":18,"props":252,"children":253},{},[254],{"type":22,"value":255},"생성자 함수 내부의 this에는 생성자 함수가 (미래에) 생성할 인스턴스가 바인딩된다.",{"type":17,"tag":73,"props":257,"children":260},{"className":258,"code":259,"language":11,"meta":7},[76],"function Circle(radius) {\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n\nconst circle1 = new Circle(5);\n\n// 만약 new 연산자와 함께 호출하지 않으면 생성자 함수로 동작하지 않는다. 일반적인 함수의 호출이다.\nconst circle2 = Circle(15); // 이때 this는 window이므로 window.radius = 15가 된다.\nconsole.log(radius); // 15\n",[261],{"type":17,"tag":80,"props":262,"children":263},{"__ignoreMap":7},[264],{"type":22,"value":259},{"type":17,"tag":56,"props":266,"children":268},{"id":267},"funcitonprototypeapplycallbind-메서드에-의한-간접-호출",[269],{"type":22,"value":270},"Funciton.prototype.apply/call/bind 메서드에 의한 간접 호출",{"type":17,"tag":73,"props":272,"children":275},{"className":273,"code":274,"language":11,"meta":7},[76],"function getThisBinding() {\n    return this;\n}\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding()); // window\n\nconsole.log(getThisBinding.call(thisArg)); // {a: 1};\nconsole.log(getThisBinding.apply(thisArg)); // {a: 1};\n",[276],{"type":17,"tag":80,"props":277,"children":278},{"__ignoreMap":7},[279],{"type":22,"value":274},{"type":17,"tag":18,"props":281,"children":282},{},[283],{"type":22,"value":54},{"type":17,"tag":18,"props":285,"children":286},{},[287],{"type":22,"value":288},"apply와 call 메서드의 본질적인 기능은 함수를 호출하는 것이다. apply와 call 메서드는 함수를 호출하면서 첫 번째 인수로 전달한 특정 객체를 호출한 함수의 this에 바인딩한다.",{"type":17,"tag":18,"props":290,"children":291},{},[292],{"type":22,"value":54},{"type":17,"tag":18,"props":294,"children":295},{},[296],{"type":22,"value":297},"apply와 call은 인수를 전달하는 방식만 다를뿐 동일하게 동작한다.",{"type":17,"tag":73,"props":299,"children":302},{"className":300,"code":301,"language":11,"meta":7},[76],"function getThisBinding() {\n    console.log(arguments);\n    return this;\n}\n\nconst thisArg = {a: 1};\n\nconsole.log(getThisBinding.apply(thisArg, [1, 2, 3]);\nconsole.log(getThisBinding.call(thisArg, 1, 2, 3);\n",[303],{"type":17,"tag":80,"props":304,"children":305},{"__ignoreMap":7},[306],{"type":22,"value":301},{"type":17,"tag":18,"props":308,"children":309},{},[310],{"type":22,"value":54},{"type":17,"tag":18,"props":312,"children":313},{},[314],{"type":22,"value":315},"대표적인 용도는 arguments 객체와 같은 유사 배열 객체에 배열 메서드를 사용하는 경우다. arguments 객체는 배열이 아니기 때문에 Array.prototype.slice 같은 배열의 메서드를 사용할 수 없으나 apply와 call 메서드를 이용하면 가능하다.",{"type":17,"tag":73,"props":317,"children":320},{"className":318,"code":319,"language":11,"meta":7},[76],"function convertArgsToArray() {\n    const arr = Array.prototype.slice.call(arguments);\n\n    return arr;\n}\n",[321],{"type":17,"tag":80,"props":322,"children":323},{"__ignoreMap":7},[324],{"type":22,"value":319},{"type":17,"tag":18,"props":326,"children":327},{},[328],{"type":22,"value":54},{"type":17,"tag":18,"props":330,"children":331},{},[332],{"type":22,"value":333},"bind 메서드는 apply와 call 메서드와 달리 함수를 호출하지 않고 this로 사용할 객체만 전달한다.",{"type":17,"tag":73,"props":335,"children":338},{"className":336,"code":337,"language":11,"meta":7},[76],"function getThisBinding() {\n    return this;\n}\n\nconst thisArg = {a:1};\n\nconsole.log(getThisBinding.bind(thisArg)); // getThisBinding\nconsole.log(getThisBidning.bind(thisArg)()); // {a:1}\n",[339],{"type":17,"tag":80,"props":340,"children":341},{"__ignoreMap":7},[342],{"type":22,"value":337},{"type":17,"tag":18,"props":344,"children":345},{},[346],{"type":22,"value":347},"bind 메서드는 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치하는 문제를 해결하기 위해 유용하게 사용된다.",{"type":17,"tag":73,"props":349,"children":352},{"className":350,"code":351,"language":11,"meta":7},[76],"const person = {\n    name: 'Lee',\n    foo(callback) {\n        setTimeout(callback, 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // window\n})\n",[353],{"type":17,"tag":80,"props":354,"children":355},{"__ignoreMap":7},[356],{"type":22,"value":351},{"type":17,"tag":73,"props":358,"children":361},{"className":359,"code":360,"language":11,"meta":7},[76],"const person = {\n    name: 'Lee',\n    foo(callback) {\n        // callback 함수의 this는 여기 this야\n        // bind는 apply와 call과 달리 호출을 하지 않기 때문에 가능\n        setTimeout(callback.bind(this), 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // {name: 'Lee', foo: f}\n})\n",[362],{"type":17,"tag":80,"props":363,"children":364},{"__ignoreMap":7},[365],{"type":22,"value":360},{"type":17,"tag":18,"props":367,"children":368},{},[369],{"type":22,"value":54},{"type":17,"tag":371,"props":372,"children":373},"hr",{},[],{"type":17,"tag":56,"props":375,"children":377},{"id":376},"참고",[378],{"type":22,"value":376},{"type":17,"tag":41,"props":380,"children":381},{},[382],{"type":17,"tag":45,"props":383,"children":384},{},[385],{"type":17,"tag":386,"props":387,"children":388},"strong",{},[389],{"type":22,"value":390},"이웅모, 「모던 자바스크립트 Deep Dive」, 위키북스, 2020",{"title":7,"searchDepth":392,"depth":392,"links":393},2,[394,400,401,402,403],{"id":58,"depth":392,"text":61,"children":395},[396,398,399],{"id":132,"depth":397,"text":135},3,{"id":147,"depth":397,"text":150},{"id":162,"depth":397,"text":165},{"id":177,"depth":392,"text":180},{"id":247,"depth":392,"text":250},{"id":267,"depth":392,"text":270},{"id":376,"depth":392,"text":376},"markdown","content:posts:62b25952-eab1-4faf-b3ec-9b0928301bb6.md","content","posts/62b25952-eab1-4faf-b3ec-9b0928301bb6.md","md",1719041868613]