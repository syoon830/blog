[{"data":1,"prerenderedAt":625},["Reactive",2],{"content-query-1BS74BHHcZ":3},[4,373],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":13,"body":14,"_type":368,"_id":369,"_source":370,"_file":371,"_extension":372},"/posts/f8128924-3314-4bbc-9acd-4e7fcab8969a","posts",false,"","화살표 함수(=>)","function 키워드 대신 화살표(=>)를 사용하는 방식의 함수",[12],"ES6","2024-01-14T00:00:00.000Z",{"type":15,"children":16,"toc":352},"root",[17,24,37,42,48,57,63,68,75,84,89,99,104,113,118,124,130,148,157,172,181,196,205,211,224,233,246,254,260,269,275,288,297,310,319,324,328,334,348],{"type":18,"tag":19,"props":20,"children":21},"element","p",{},[22],{"type":23,"value":10},"text",{"type":18,"tag":25,"props":26,"children":31},"pre",{"className":27,"code":29,"language":30,"meta":8},[28],"language-javascript","// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n","javascript",[32],{"type":18,"tag":33,"props":34,"children":35},"code",{"__ignoreMap":8},[36],{"type":23,"value":29},{"type":18,"tag":19,"props":38,"children":39},{},[40],{"type":23,"value":41},"※ 그렇다고 모든 경우에 화살표 함수를 사용하면 안 됨 (아래에서 확인)",{"type":18,"tag":43,"props":44,"children":46},"h2",{"id":45},"문법",[47],{"type":23,"value":45},{"type":18,"tag":25,"props":49,"children":52},{"className":50,"code":51,"language":30,"meta":8},[28],"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n",[53],{"type":18,"tag":33,"props":54,"children":55},{"__ignoreMap":8},[56],{"type":23,"value":51},{"type":18,"tag":43,"props":58,"children":60},{"id":59},"일반-함수funciton와-화살표-함수-차이점",[61],{"type":23,"value":62},"일반 함수(funciton)와 화살표 함수(=>) 차이점",{"type":18,"tag":19,"props":64,"children":65},{},[66],{"type":23,"value":67},"가장 큰 차이점은 this인데 코드를 보며 확인해 보자.",{"type":18,"tag":69,"props":70,"children":72},"h3",{"id":71},"일반-함수function",[73],{"type":23,"value":74},"일반 함수(function)",{"type":18,"tag":25,"props":76,"children":79},{"className":77,"code":78,"language":30,"meta":8},[28],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n",[80],{"type":18,"tag":33,"props":81,"children":82},{"__ignoreMap":8},[83],{"type":23,"value":78},{"type":18,"tag":19,"props":85,"children":86},{},[87],{"type":23,"value":88},"위 코드를 보게 되면 map 안에 this를 찍어보면 Window를 가르키고 있다. 기본적으로 내부 함수 this는 Window를 가르킨다.",{"type":18,"tag":90,"props":91,"children":92},"ul",{},[93],{"type":18,"tag":94,"props":95,"children":96},"li",{},[97],{"type":23,"value":98},"생성자 함수와 객체의 메소드를 제외한 모든 함수(내부 함수, 콜백 함수 포함) 내부의 this는 전역 객체(Window)를 가르키기 때문이다.",{"type":18,"tag":69,"props":100,"children":102},{"id":101},"화살표-함수",[103],{"type":23,"value":9},{"type":18,"tag":25,"props":105,"children":108},{"className":106,"code":107,"language":30,"meta":8},[28],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n",[109],{"type":18,"tag":33,"props":110,"children":111},{"__ignoreMap":8},[112],{"type":23,"value":107},{"type":18,"tag":19,"props":114,"children":115},{},[116],{"type":23,"value":117},"위 코드와 다르게 map 안에 this는 Prexier를 가르킨다. 이는 화살표 함수의 this는 언제나 상위 스코프의 this를 가르키기 때문이다.",{"type":18,"tag":43,"props":119,"children":121},{"id":120},"화살표-함수를-사용해서는-안되는-경우",[122],{"type":23,"value":123},"화살표 함수를 사용해서는 안되는 경우",{"type":18,"tag":69,"props":125,"children":127},{"id":126},"_1-메소드",[128],{"type":23,"value":129},"1. 메소드",{"type":18,"tag":131,"props":132,"children":133},"blockquote",{},[134],{"type":18,"tag":19,"props":135,"children":136},{},[137],{"type":18,"tag":138,"props":139,"children":140},"b",{},[141],{"type":18,"tag":142,"props":143,"children":145},"font",{"color":144},"red",[146],{"type":23,"value":147},"bad",{"type":18,"tag":25,"props":149,"children":152},{"className":150,"code":151,"language":30,"meta":8},[28],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n",[153],{"type":18,"tag":33,"props":154,"children":155},{"__ignoreMap":8},[156],{"type":23,"value":151},{"type":18,"tag":131,"props":158,"children":159},{},[160],{"type":18,"tag":19,"props":161,"children":162},{},[163],{"type":18,"tag":138,"props":164,"children":165},{},[166],{"type":18,"tag":142,"props":167,"children":169},{"color":168},"green",[170],{"type":23,"value":171},"good",{"type":18,"tag":25,"props":173,"children":176},{"className":174,"code":175,"language":30,"meta":8},[28],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[177],{"type":18,"tag":33,"props":178,"children":179},{"__ignoreMap":8},[180],{"type":23,"value":175},{"type":18,"tag":131,"props":182,"children":183},{},[184],{"type":18,"tag":19,"props":185,"children":186},{},[187],{"type":18,"tag":138,"props":188,"children":189},{},[190],{"type":18,"tag":142,"props":191,"children":193},{"color":192},"blue",[194],{"type":23,"value":195},"best",{"type":18,"tag":25,"props":197,"children":200},{"className":198,"code":199,"language":30,"meta":8},[28],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[201],{"type":18,"tag":33,"props":202,"children":203},{"__ignoreMap":8},[204],{"type":23,"value":199},{"type":18,"tag":69,"props":206,"children":208},{"id":207},"_2-prototype",[209],{"type":23,"value":210},"2. prototype",{"type":18,"tag":131,"props":212,"children":213},{},[214],{"type":18,"tag":19,"props":215,"children":216},{},[217],{"type":18,"tag":138,"props":218,"children":219},{},[220],{"type":18,"tag":142,"props":221,"children":222},{"color":144},[223],{"type":23,"value":147},{"type":18,"tag":25,"props":225,"children":228},{"className":226,"code":227,"language":30,"meta":8},[28],"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n",[229],{"type":18,"tag":33,"props":230,"children":231},{"__ignoreMap":8},[232],{"type":23,"value":227},{"type":18,"tag":131,"props":234,"children":235},{},[236],{"type":18,"tag":19,"props":237,"children":238},{},[239],{"type":18,"tag":138,"props":240,"children":241},{},[242],{"type":18,"tag":142,"props":243,"children":244},{"color":168},[245],{"type":23,"value":171},{"type":18,"tag":25,"props":247,"children":249},{"className":248,"code":227,"language":30,"meta":8},[28],[250],{"type":18,"tag":33,"props":251,"children":252},{"__ignoreMap":8},[253],{"type":23,"value":227},{"type":18,"tag":69,"props":255,"children":257},{"id":256},"_3-생성자-함수",[258],{"type":23,"value":259},"3. 생성자 함수",{"type":18,"tag":25,"props":261,"children":264},{"className":262,"code":263,"language":30,"meta":8},[28],"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n",[265],{"type":18,"tag":33,"props":266,"children":267},{"__ignoreMap":8},[268],{"type":23,"value":263},{"type":18,"tag":69,"props":270,"children":272},{"id":271},"_4-addeventlistener-함수의-콜백-함수",[273],{"type":23,"value":274},"4. addEventListener 함수의 콜백 함수",{"type":18,"tag":131,"props":276,"children":277},{},[278],{"type":18,"tag":19,"props":279,"children":280},{},[281],{"type":18,"tag":138,"props":282,"children":283},{},[284],{"type":18,"tag":142,"props":285,"children":286},{"color":144},[287],{"type":23,"value":147},{"type":18,"tag":25,"props":289,"children":292},{"className":290,"code":291,"language":30,"meta":8},[28],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n",[293],{"type":18,"tag":33,"props":294,"children":295},{"__ignoreMap":8},[296],{"type":23,"value":291},{"type":18,"tag":131,"props":298,"children":299},{},[300],{"type":18,"tag":19,"props":301,"children":302},{},[303],{"type":18,"tag":138,"props":304,"children":305},{},[306],{"type":18,"tag":142,"props":307,"children":308},{"color":168},[309],{"type":23,"value":171},{"type":18,"tag":25,"props":311,"children":314},{"className":312,"code":313,"language":30,"meta":8},[28],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n",[315],{"type":18,"tag":33,"props":316,"children":317},{"__ignoreMap":8},[318],{"type":23,"value":313},{"type":18,"tag":19,"props":320,"children":321},{},[322],{"type":23,"value":323},"\\n",{"type":18,"tag":325,"props":326,"children":327},"hr",{},[],{"type":18,"tag":69,"props":329,"children":331},{"id":330},"참고",[332],{"type":23,"value":333},"참고:",{"type":18,"tag":90,"props":335,"children":336},{},[337],{"type":18,"tag":94,"props":338,"children":339},{},[340],{"type":18,"tag":341,"props":342,"children":346},"a",{"href":343,"rel":344},"https://poiemaweb.com/es6-arrow-function",[345],"nofollow",[347],{"type":23,"value":343},{"type":18,"tag":19,"props":349,"children":350},{},[351],{"type":23,"value":323},{"title":8,"searchDepth":353,"depth":353,"links":354},2,[355,356,361],{"id":45,"depth":353,"text":45},{"id":59,"depth":353,"text":62,"children":357},[358,360],{"id":71,"depth":359,"text":74},3,{"id":101,"depth":359,"text":9},{"id":120,"depth":353,"text":123,"children":362},[363,364,365,366,367],{"id":126,"depth":359,"text":129},{"id":207,"depth":359,"text":210},{"id":256,"depth":359,"text":259},{"id":271,"depth":359,"text":274},{"id":330,"depth":359,"text":333},"markdown","content:posts:f8128924-3314-4bbc-9acd-4e7fcab8969a.md","content","posts/f8128924-3314-4bbc-9acd-4e7fcab8969a.md","md",{"_path":374,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":375,"description":376,"tags":377,"date":378,"body":379,"_type":368,"_id":623,"_source":370,"_file":624,"_extension":372},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[12],"2023-12-28T00:00:00.000Z",{"type":15,"children":380,"toc":614},[381,385,391,404,417,422,443,448,457,486,492,498,503,512,517,523,528,537,543,548,557,561,564,568,610],{"type":18,"tag":19,"props":382,"children":383},{},[384],{"type":23,"value":376},{"type":18,"tag":69,"props":386,"children":388},{"id":387},"클래스와-인스턴스객체",[389],{"type":23,"value":390},"클래스와 인스턴스(객체)",{"type":18,"tag":19,"props":392,"children":393},{},[394,396,402],{"type":23,"value":395},"클래스는 일종의 ",{"type":18,"tag":142,"props":397,"children":399},{"color":398},"purple",[400],{"type":23,"value":401},"설계도이고",{"type":23,"value":403}," 인스턴스는 클래스를 사용하여 생성한 실제 물건이다.",{"type":18,"tag":90,"props":405,"children":406},{},[407,412],{"type":18,"tag":94,"props":408,"children":409},{},[410],{"type":23,"value":411},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":18,"tag":94,"props":413,"children":414},{},[415],{"type":23,"value":416},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":18,"tag":19,"props":418,"children":419},{},[420],{"type":23,"value":421},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":18,"tag":90,"props":423,"children":424},{},[425,438],{"type":18,"tag":94,"props":426,"children":427},{},[428,430,436],{"type":23,"value":429},"무선 전화기(클래스) - ",{"type":18,"tag":431,"props":432,"children":433},"i",{},[434],{"type":23,"value":435},"스마트폰",{"type":23,"value":437},"(인스턴스)",{"type":18,"tag":94,"props":439,"children":440},{},[441],{"type":23,"value":442},"이동수단(클래스) - 자동차(인스턴스)",{"type":18,"tag":19,"props":444,"children":445},{},[446],{"type":23,"value":447},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":18,"tag":25,"props":449,"children":452},{"className":450,"code":451,"language":30,"meta":8},[28],"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n",[453],{"type":18,"tag":33,"props":454,"children":455},{"__ignoreMap":8},[456],{"type":23,"value":451},{"type":18,"tag":131,"props":458,"children":459},{},[460],{"type":18,"tag":90,"props":461,"children":462},{},[463],{"type":18,"tag":94,"props":464,"children":465},{},[466,468,473,475,484],{"type":23,"value":467},"이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 ",{"type":18,"tag":138,"props":469,"children":470},{},[471],{"type":23,"value":472},"추상화(Abstarction)",{"type":23,"value":474},"라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 ",{"type":18,"tag":431,"props":476,"children":477},{},[478],{"type":18,"tag":142,"props":479,"children":481},{"color":480},"pink_background",[482],{"type":23,"value":483},"포착하는 것을 의미한다.",{"type":23,"value":485}," (필요한 관점만을 추출하는 행위)",{"type":18,"tag":43,"props":487,"children":489},{"id":488},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[490],{"type":23,"value":491},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":18,"tag":69,"props":493,"children":495},{"id":494},"상속inheritance",[496],{"type":23,"value":497},"상속(inheritance)",{"type":18,"tag":19,"props":499,"children":500},{},[501],{"type":23,"value":502},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":18,"tag":25,"props":504,"children":507},{"className":505,"code":506,"language":30,"meta":8},[28],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[508],{"type":18,"tag":33,"props":509,"children":510},{"__ignoreMap":8},[511],{"type":23,"value":506},{"type":18,"tag":19,"props":513,"children":514},{},[515],{"type":23,"value":516},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":18,"tag":69,"props":518,"children":520},{"id":519},"다형성polymorphism",[521],{"type":23,"value":522},"다형성(Polymorphism)",{"type":18,"tag":19,"props":524,"children":525},{},[526],{"type":23,"value":527},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":18,"tag":25,"props":529,"children":532},{"className":530,"code":531,"language":30,"meta":8},[28],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[533],{"type":18,"tag":33,"props":534,"children":535},{"__ignoreMap":8},[536],{"type":23,"value":531},{"type":18,"tag":69,"props":538,"children":540},{"id":539},"캡슐화encapsulation",[541],{"type":23,"value":542},"캡슐화(Encapsulation)",{"type":18,"tag":19,"props":544,"children":545},{},[546],{"type":23,"value":547},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":18,"tag":25,"props":549,"children":552},{"className":550,"code":551,"language":30,"meta":8},[28],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[553],{"type":18,"tag":33,"props":554,"children":555},{"__ignoreMap":8},[556],{"type":23,"value":551},{"type":18,"tag":19,"props":558,"children":559},{},[560],{"type":23,"value":323},{"type":18,"tag":325,"props":562,"children":563},{},[],{"type":18,"tag":69,"props":565,"children":566},{"id":330},[567],{"type":23,"value":330},{"type":18,"tag":90,"props":569,"children":570},{},[571,576,588,601],{"type":18,"tag":94,"props":572,"children":573},{},[574],{"type":23,"value":575},"인사이드 자바스크립트",{"type":18,"tag":94,"props":577,"children":578},{},[579],{"type":18,"tag":142,"props":580,"children":581},{"color":192},[582],{"type":18,"tag":341,"props":583,"children":586},{"href":584,"rel":585},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[345],[587],{"type":23,"value":584},{"type":18,"tag":94,"props":589,"children":590},{},[591],{"type":18,"tag":142,"props":592,"children":593},{"color":192},[594],{"type":18,"tag":341,"props":595,"children":598},{"href":596,"rel":597},"http://www.opentutorials.org/module/2495/14037",[345],[599],{"type":23,"value":600},"www.opentutorials.org/module/2495/14037",{"type":18,"tag":94,"props":602,"children":603},{},[604],{"type":18,"tag":341,"props":605,"children":608},{"href":606,"rel":607},"https://victorydntmd.tistory.com/117",[345],[609],{"type":23,"value":606},{"type":18,"tag":19,"props":611,"children":612},{},[613],{"type":23,"value":323},{"title":8,"searchDepth":353,"depth":353,"links":615},[616,617],{"id":387,"depth":359,"text":390},{"id":488,"depth":353,"text":491,"children":618},[619,620,621,622],{"id":494,"depth":359,"text":497},{"id":519,"depth":359,"text":522},{"id":539,"depth":359,"text":542},{"id":330,"depth":359,"text":330},"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md",1705245478760]