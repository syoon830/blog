[{"data":1,"prerenderedAt":231},["Reactive",2],{"content-query-1BS74BHHcZ":3},[4],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":13,"body":14,"_type":226,"_id":227,"_source":228,"_file":229,"_extension":230},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","posts",false,"","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[12],"ES6","2023-12-06T00:00:00.000Z",{"type":15,"children":16,"toc":215},"root",[17,24,35,40,55,60,73,78,91,103,113,122,127,136,141,150,155,165,174,179,190,199,207],{"type":18,"tag":19,"props":20,"children":21},"element","p",{},[22],{"type":23,"value":10},"text",{"type":18,"tag":25,"props":26,"children":28},"h3",{"id":27},"클래스와-인스턴스객체",[29],{"type":18,"tag":30,"props":31,"children":32},"strong",{},[33],{"type":23,"value":34},"클래스와 인스턴스(객체)",{"type":18,"tag":19,"props":36,"children":37},{},[38],{"type":23,"value":39},"클래스는 일종의 설계도이고 인스턴스는 클래스를 사용하여 생성한 실제 물건이다.",{"type":18,"tag":41,"props":42,"children":43},"ul",{},[44,50],{"type":18,"tag":45,"props":46,"children":47},"li",{},[48],{"type":23,"value":49},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":18,"tag":45,"props":51,"children":52},{},[53],{"type":23,"value":54},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":18,"tag":19,"props":56,"children":57},{},[58],{"type":23,"value":59},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":18,"tag":41,"props":61,"children":62},{},[63,68],{"type":18,"tag":45,"props":64,"children":65},{},[66],{"type":23,"value":67},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":18,"tag":45,"props":69,"children":70},{},[71],{"type":23,"value":72},"이동수단(클래스) - 자동차(인스턴스)",{"type":18,"tag":19,"props":74,"children":75},{},[76],{"type":23,"value":77},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":18,"tag":79,"props":80,"children":85},"pre",{"code":81,"language":82,"meta":8,"className":83},"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n","javascript",[84],"language-javascript",[86],{"type":18,"tag":87,"props":88,"children":89},"code",{"__ignoreMap":8},[90],{"type":23,"value":81},{"type":18,"tag":92,"props":93,"children":94},"blockquote",{},[95],{"type":18,"tag":41,"props":96,"children":97},{},[98],{"type":18,"tag":45,"props":99,"children":100},{},[101],{"type":23,"value":102},"이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 **추상화(Abstarction)**라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 포착하는 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":18,"tag":104,"props":105,"children":107},"h2",{"id":106},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[108],{"type":18,"tag":30,"props":109,"children":110},{},[111],{"type":23,"value":112},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":18,"tag":25,"props":114,"children":116},{"id":115},"상속inheritance",[117],{"type":18,"tag":30,"props":118,"children":119},{},[120],{"type":23,"value":121},"상속(inheritance)",{"type":18,"tag":19,"props":123,"children":124},{},[125],{"type":23,"value":126},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":18,"tag":79,"props":128,"children":131},{"code":129,"language":82,"meta":8,"className":130},"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[84],[132],{"type":18,"tag":87,"props":133,"children":134},{"__ignoreMap":8},[135],{"type":23,"value":129},{"type":18,"tag":19,"props":137,"children":138},{},[139],{"type":23,"value":140},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":18,"tag":25,"props":142,"children":144},{"id":143},"다형성polymorphism",[145],{"type":18,"tag":30,"props":146,"children":147},{},[148],{"type":23,"value":149},"다형성(Polymorphism)",{"type":18,"tag":19,"props":151,"children":152},{},[153],{"type":23,"value":154},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":18,"tag":79,"props":156,"children":160},{"code":157,"language":23,"meta":8,"className":158},"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[159],"language-text",[161],{"type":18,"tag":87,"props":162,"children":163},{"__ignoreMap":8},[164],{"type":23,"value":157},{"type":18,"tag":25,"props":166,"children":168},{"id":167},"캡슐화encapsulation",[169],{"type":18,"tag":30,"props":170,"children":171},{},[172],{"type":23,"value":173},"캡슐화(Encapsulation)",{"type":18,"tag":19,"props":175,"children":176},{},[177],{"type":23,"value":178},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":18,"tag":79,"props":180,"children":185},{"code":181,"language":182,"meta":8,"className":183},"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n","java",[184],"language-java",[186],{"type":18,"tag":87,"props":187,"children":188},{"__ignoreMap":8},[189],{"type":23,"value":181},{"type":18,"tag":25,"props":191,"children":193},{"id":192},"참고",[194],{"type":18,"tag":30,"props":195,"children":196},{},[197],{"type":23,"value":198},"참고:",{"type":18,"tag":92,"props":200,"children":201},{},[202],{"type":18,"tag":19,"props":203,"children":204},{},[205],{"type":23,"value":206},"인사이드 자바스크립트",{"type":18,"tag":79,"props":208,"children":210},{"code":209},"vandbt.tistory.com/10\n\n\nevan-moon.github.io/2019/08/24/what-is-object-oriented-programming/ [www.opentutorials.org/module/2495/14037](http://www.opentutorials.org/module/2495/14037) victorydntmd.tistory.com/117\n",[211],{"type":18,"tag":87,"props":212,"children":213},{"__ignoreMap":8},[214],{"type":23,"value":209},{"title":8,"searchDepth":216,"depth":216,"links":217},2,[218,220],{"id":27,"depth":219,"text":34},3,{"id":106,"depth":216,"text":112,"children":221},[222,223,224,225],{"id":115,"depth":219,"text":121},{"id":143,"depth":219,"text":149},{"id":167,"depth":219,"text":173},{"id":192,"depth":219,"text":198},"markdown","content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","content","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","md",1705067757014]