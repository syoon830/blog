[{"data":1,"prerenderedAt":575},["Reactive",2],{"content-query-1BS74BHHcZ":3},[4,348],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":13,"body":14,"_type":343,"_id":344,"_source":345,"_file":346,"_extension":347},"/posts/f8128924-3314-4bbc-9acd-4e7fcab8969a","posts",false,"","화살표 함수(=>)","function 키워드 대신 화살표(=>)를 사용하는 방식의 함수",[12],"ES6","2024-01-14T00:00:00.000Z",{"type":15,"children":16,"toc":327},"root",[17,24,37,42,48,57,63,68,75,84,89,99,104,113,118,124,130,143,152,163,172,183,192,198,208,217,227,235,241,250,256,266,275,285,294,299,303,309,323],{"type":18,"tag":19,"props":20,"children":21},"element","p",{},[22],{"type":23,"value":10},"text",{"type":18,"tag":25,"props":26,"children":31},"pre",{"className":27,"code":29,"language":30,"meta":8},[28],"language-javascript","// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n","javascript",[32],{"type":18,"tag":33,"props":34,"children":35},"code",{"__ignoreMap":8},[36],{"type":23,"value":29},{"type":18,"tag":19,"props":38,"children":39},{},[40],{"type":23,"value":41},"※ 그렇다고 모든 경우에 화살표 함수를 사용하면 안 됨 (아래에서 확인)",{"type":18,"tag":43,"props":44,"children":46},"h2",{"id":45},"문법",[47],{"type":23,"value":45},{"type":18,"tag":25,"props":49,"children":52},{"className":50,"code":51,"language":30,"meta":8},[28],"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n",[53],{"type":18,"tag":33,"props":54,"children":55},{"__ignoreMap":8},[56],{"type":23,"value":51},{"type":18,"tag":43,"props":58,"children":60},{"id":59},"일반-함수funciton와-화살표-함수-차이점",[61],{"type":23,"value":62},"일반 함수(funciton)와 화살표 함수(=>) 차이점",{"type":18,"tag":19,"props":64,"children":65},{},[66],{"type":23,"value":67},"가장 큰 차이점은 this인데 코드를 보며 확인해 보자.",{"type":18,"tag":69,"props":70,"children":72},"h3",{"id":71},"일반-함수function",[73],{"type":23,"value":74},"일반 함수(function)",{"type":18,"tag":25,"props":76,"children":79},{"className":77,"code":78,"language":30,"meta":8},[28],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n",[80],{"type":18,"tag":33,"props":81,"children":82},{"__ignoreMap":8},[83],{"type":23,"value":78},{"type":18,"tag":19,"props":85,"children":86},{},[87],{"type":23,"value":88},"위 코드를 보게 되면 map 안에 this를 찍어보면 Window를 가르키고 있다. 기본적으로 내부 함수 this는 Window를 가르킨다.",{"type":18,"tag":90,"props":91,"children":92},"ul",{},[93],{"type":18,"tag":94,"props":95,"children":96},"li",{},[97],{"type":23,"value":98},"생성자 함수와 객체의 메소드를 제외한 모든 함수(내부 함수, 콜백 함수 포함) 내부의 this는 전역 객체(Window)를 가르키기 때문이다.",{"type":18,"tag":69,"props":100,"children":102},{"id":101},"화살표-함수",[103],{"type":23,"value":9},{"type":18,"tag":25,"props":105,"children":108},{"className":106,"code":107,"language":30,"meta":8},[28],"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n",[109],{"type":18,"tag":33,"props":110,"children":111},{"__ignoreMap":8},[112],{"type":23,"value":107},{"type":18,"tag":19,"props":114,"children":115},{},[116],{"type":23,"value":117},"위 코드와 다르게 map 안에 this는 Prexier를 가르킨다. 이는 화살표 함수의 this는 언제나 상위 스코프의 this를 가르키기 때문이다.",{"type":18,"tag":43,"props":119,"children":121},{"id":120},"화살표-함수를-사용해서는-안되는-경우",[122],{"type":23,"value":123},"화살표 함수를 사용해서는 안되는 경우",{"type":18,"tag":69,"props":125,"children":127},{"id":126},"_1-메소드",[128],{"type":23,"value":129},"1. 메소드",{"type":18,"tag":131,"props":132,"children":133},"blockquote",{},[134],{"type":18,"tag":19,"props":135,"children":136},{},[137],{"type":18,"tag":138,"props":139,"children":140},"strong",{},[141],{"type":23,"value":142},"bad",{"type":18,"tag":25,"props":144,"children":147},{"className":145,"code":146,"language":30,"meta":8},[28],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n",[148],{"type":18,"tag":33,"props":149,"children":150},{"__ignoreMap":8},[151],{"type":23,"value":146},{"type":18,"tag":131,"props":153,"children":154},{},[155],{"type":18,"tag":19,"props":156,"children":157},{},[158],{"type":18,"tag":138,"props":159,"children":160},{},[161],{"type":23,"value":162},"good",{"type":18,"tag":25,"props":164,"children":167},{"className":165,"code":166,"language":30,"meta":8},[28],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[168],{"type":18,"tag":33,"props":169,"children":170},{"__ignoreMap":8},[171],{"type":23,"value":166},{"type":18,"tag":131,"props":173,"children":174},{},[175],{"type":18,"tag":19,"props":176,"children":177},{},[178],{"type":18,"tag":138,"props":179,"children":180},{},[181],{"type":23,"value":182},"best",{"type":18,"tag":25,"props":184,"children":187},{"className":185,"code":186,"language":30,"meta":8},[28],"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n",[188],{"type":18,"tag":33,"props":189,"children":190},{"__ignoreMap":8},[191],{"type":23,"value":186},{"type":18,"tag":69,"props":193,"children":195},{"id":194},"_2-prototype",[196],{"type":23,"value":197},"2. prototype",{"type":18,"tag":131,"props":199,"children":200},{},[201],{"type":18,"tag":19,"props":202,"children":203},{},[204],{"type":18,"tag":138,"props":205,"children":206},{},[207],{"type":23,"value":142},{"type":18,"tag":25,"props":209,"children":212},{"className":210,"code":211,"language":30,"meta":8},[28],"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n",[213],{"type":18,"tag":33,"props":214,"children":215},{"__ignoreMap":8},[216],{"type":23,"value":211},{"type":18,"tag":131,"props":218,"children":219},{},[220],{"type":18,"tag":19,"props":221,"children":222},{},[223],{"type":18,"tag":138,"props":224,"children":225},{},[226],{"type":23,"value":162},{"type":18,"tag":25,"props":228,"children":230},{"className":229,"code":211,"language":30,"meta":8},[28],[231],{"type":18,"tag":33,"props":232,"children":233},{"__ignoreMap":8},[234],{"type":23,"value":211},{"type":18,"tag":69,"props":236,"children":238},{"id":237},"_3-생성자-함수",[239],{"type":23,"value":240},"3. 생성자 함수",{"type":18,"tag":25,"props":242,"children":245},{"className":243,"code":244,"language":30,"meta":8},[28],"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n",[246],{"type":18,"tag":33,"props":247,"children":248},{"__ignoreMap":8},[249],{"type":23,"value":244},{"type":18,"tag":69,"props":251,"children":253},{"id":252},"_4-addeventlistener-함수의-콜백-함수",[254],{"type":23,"value":255},"4. addEventListener 함수의 콜백 함수",{"type":18,"tag":131,"props":257,"children":258},{},[259],{"type":18,"tag":19,"props":260,"children":261},{},[262],{"type":18,"tag":138,"props":263,"children":264},{},[265],{"type":23,"value":142},{"type":18,"tag":25,"props":267,"children":270},{"className":268,"code":269,"language":30,"meta":8},[28],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n",[271],{"type":18,"tag":33,"props":272,"children":273},{"__ignoreMap":8},[274],{"type":23,"value":269},{"type":18,"tag":131,"props":276,"children":277},{},[278],{"type":18,"tag":19,"props":279,"children":280},{},[281],{"type":18,"tag":138,"props":282,"children":283},{},[284],{"type":23,"value":162},{"type":18,"tag":25,"props":286,"children":289},{"className":287,"code":288,"language":30,"meta":8},[28],"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n",[290],{"type":18,"tag":33,"props":291,"children":292},{"__ignoreMap":8},[293],{"type":23,"value":288},{"type":18,"tag":19,"props":295,"children":296},{},[297],{"type":23,"value":298},"\\n",{"type":18,"tag":300,"props":301,"children":302},"hr",{},[],{"type":18,"tag":69,"props":304,"children":306},{"id":305},"참고",[307],{"type":23,"value":308},"참고:",{"type":18,"tag":90,"props":310,"children":311},{},[312],{"type":18,"tag":94,"props":313,"children":314},{},[315],{"type":18,"tag":316,"props":317,"children":321},"a",{"href":318,"rel":319},"https://poiemaweb.com/es6-arrow-function",[320],"nofollow",[322],{"type":23,"value":318},{"type":18,"tag":19,"props":324,"children":325},{},[326],{"type":23,"value":298},{"title":8,"searchDepth":328,"depth":328,"links":329},2,[330,331,336],{"id":45,"depth":328,"text":45},{"id":59,"depth":328,"text":62,"children":332},[333,335],{"id":71,"depth":334,"text":74},3,{"id":101,"depth":334,"text":9},{"id":120,"depth":328,"text":123,"children":337},[338,339,340,341,342],{"id":126,"depth":334,"text":129},{"id":194,"depth":334,"text":197},{"id":237,"depth":334,"text":240},{"id":252,"depth":334,"text":255},{"id":305,"depth":334,"text":308},"markdown","content:posts:f8128924-3314-4bbc-9acd-4e7fcab8969a.md","content","posts/f8128924-3314-4bbc-9acd-4e7fcab8969a.md","md",{"_path":349,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":350,"description":351,"tags":352,"date":353,"body":354,"_type":343,"_id":573,"_source":345,"_file":574,"_extension":347},"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","객체지향 프로그래밍 (with. ES6)","프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법",[12],"2023-12-28T00:00:00.000Z",{"type":15,"children":355,"toc":564},[356,360,366,378,391,396,409,414,423,446,452,458,463,472,477,483,488,497,503,508,517,520,524,560],{"type":18,"tag":19,"props":357,"children":358},{},[359],{"type":23,"value":351},{"type":18,"tag":69,"props":361,"children":363},{"id":362},"클래스와-인스턴스객체",[364],{"type":23,"value":365},"클래스와 인스턴스(객체)",{"type":18,"tag":19,"props":367,"children":368},{},[369,371,376],{"type":23,"value":370},"클래스는 일종의 설계도이고 ",{"type":18,"tag":138,"props":372,"children":373},{},[374],{"type":23,"value":375},"인스턴스는",{"type":23,"value":377}," 클래스를 사용하여 생성한 실제 물건이다.",{"type":18,"tag":90,"props":379,"children":380},{},[381,386],{"type":18,"tag":94,"props":382,"children":383},{},[384],{"type":23,"value":385},"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)",{"type":18,"tag":94,"props":387,"children":388},{},[389],{"type":23,"value":390},"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)",{"type":18,"tag":19,"props":392,"children":393},{},[394],{"type":23,"value":395},"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다.",{"type":18,"tag":90,"props":397,"children":398},{},[399,404],{"type":18,"tag":94,"props":400,"children":401},{},[402],{"type":23,"value":403},"무선 전화기(클래스) - 스마트폰(인스턴스)",{"type":18,"tag":94,"props":405,"children":406},{},[407],{"type":23,"value":408},"이동수단(클래스) - 자동차(인스턴스)",{"type":18,"tag":19,"props":410,"children":411},{},[412],{"type":23,"value":413},"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다.",{"type":18,"tag":25,"props":415,"children":418},{"className":416,"code":417,"language":30,"meta":8},[28],"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n",[419],{"type":18,"tag":33,"props":420,"children":421},{"__ignoreMap":8},[422],{"type":23,"value":417},{"type":18,"tag":131,"props":424,"children":425},{},[426],{"type":18,"tag":19,"props":427,"children":428},{},[429,431,437,439,444],{"type":23,"value":430},"+ 이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 추상화(Abstarction)라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 ",{"type":18,"tag":432,"props":433,"children":434},"em",{},[435],{"type":23,"value":436},"가려내어",{"type":23,"value":438}," ",{"type":18,"tag":432,"props":440,"children":441},{},[442],{"type":23,"value":443},"포착하는",{"type":23,"value":445}," 것을 의미한다. (필요한 관점만을 추출하는 행위)",{"type":18,"tag":43,"props":447,"children":449},{"id":448},"객체지향-프로그래밍은-아래의-특징을-가지고-있다",[450],{"type":23,"value":451},"객체지향 프로그래밍은 아래의 특징을 가지고 있다.",{"type":18,"tag":69,"props":453,"children":455},{"id":454},"상속inheritance",[456],{"type":23,"value":457},"상속(inheritance)",{"type":18,"tag":19,"props":459,"children":460},{},[461],{"type":23,"value":462},"속성 및 기능을 물려받아 확장 할 수 있다.",{"type":18,"tag":25,"props":464,"children":467},{"className":465,"code":466,"language":30,"meta":8},[28],"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n",[468],{"type":18,"tag":33,"props":469,"children":470},{"__ignoreMap":8},[471],{"type":23,"value":466},{"type":18,"tag":19,"props":473,"children":474},{},[475],{"type":23,"value":476},"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다.",{"type":18,"tag":69,"props":478,"children":480},{"id":479},"다형성polymorphism",[481],{"type":23,"value":482},"다형성(Polymorphism)",{"type":18,"tag":19,"props":484,"children":485},{},[486],{"type":23,"value":487},"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)",{"type":18,"tag":25,"props":489,"children":492},{"className":490,"code":491,"language":30,"meta":8},[28],"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n",[493],{"type":18,"tag":33,"props":494,"children":495},{"__ignoreMap":8},[496],{"type":23,"value":491},{"type":18,"tag":69,"props":498,"children":500},{"id":499},"캡슐화encapsulation",[501],{"type":23,"value":502},"캡슐화(Encapsulation)",{"type":18,"tag":19,"props":504,"children":505},{},[506],{"type":23,"value":507},"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다.",{"type":18,"tag":25,"props":509,"children":512},{"className":510,"code":511,"language":30,"meta":8},[28],"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n",[513],{"type":18,"tag":33,"props":514,"children":515},{"__ignoreMap":8},[516],{"type":23,"value":511},{"type":18,"tag":300,"props":518,"children":519},{},[],{"type":18,"tag":69,"props":521,"children":522},{"id":305},[523],{"type":23,"value":305},{"type":18,"tag":90,"props":525,"children":526},{},[527,532,541,551],{"type":18,"tag":94,"props":528,"children":529},{},[530],{"type":23,"value":531},"인사이드 자바스크립트",{"type":18,"tag":94,"props":533,"children":534},{},[535],{"type":18,"tag":316,"props":536,"children":539},{"href":537,"rel":538},"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/",[320],[540],{"type":23,"value":537},{"type":18,"tag":94,"props":542,"children":543},{},[544],{"type":18,"tag":316,"props":545,"children":548},{"href":546,"rel":547},"http://www.opentutorials.org/module/2495/14037",[320],[549],{"type":23,"value":550},"www.opentutorials.org/module/2495/14037",{"type":18,"tag":94,"props":552,"children":553},{},[554],{"type":18,"tag":316,"props":555,"children":558},{"href":556,"rel":557},"https://victorydntmd.tistory.com/117",[320],[559],{"type":23,"value":556},{"type":18,"tag":19,"props":561,"children":562},{},[563],{"type":23,"value":298},{"title":8,"searchDepth":328,"depth":328,"links":565},[566,567],{"id":362,"depth":334,"text":365},{"id":448,"depth":328,"text":451,"children":568},[569,570,571,572],{"id":454,"depth":334,"text":457},{"id":479,"depth":334,"text":482},{"id":499,"depth":334,"text":502},{"id":305,"depth":334,"text":305},"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md",1705911073864]