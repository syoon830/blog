[{"data":1,"prerenderedAt":6984},["Reactive",2],{"content-query-y68BiRpcNm":3},[4,459,1033,1414,1639,2457,2651,3112,3346,3715,3822,4070,4840,5382,5533,5800,5896,6056,6225,6428,6847,6895],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":8,"tags":10,"date":12,"body":13,"_type":454,"_id":455,"_source":456,"_file":457,"_extension":458},"/posts/2c99fd61-ec92-45ab-993c-7bd3c85dbfc8","posts",false,"","자바스크립트 - 20. 클로저",[11],"javascript","2024-03-01T00:00:00.000Z",{"type":14,"children":15,"toc":450},"root",[16,34,39,44,49,54,58,71,78,83,95,99,104,109,114,118,123,129,134,140,149,154,159,164,168,173,178,184,189,193,198,207,212,227,232,236,241,250,255,264,276,281,286,292,297,302,311,315,320,325,330,339,344,349,353,358,367,373,382,387,391,396,405,410,414,419,428,432,438],{"type":17,"tag":18,"props":19,"children":20},"element","details",{},[21,28],{"type":17,"tag":22,"props":23,"children":24},"summary",{},[25],{"type":26,"value":27},"text","chat gpt",{"type":17,"tag":29,"props":30,"children":31},"p",{},[32],{"type":26,"value":33},"“프로그래밍에서 클로저는 외부 함수에서 선언된 변수에 내부 함수가 접근할 수 있도록 '닫혀 있는' 환경을 만들어, 그 변수들이 외부 함수가 종료된 후에도 계속 유지될 수 있게 합니다. 즉, 내부 함수는 외부 함수의 지역 변수에 '닫혀 있는' 상태로 접근할 수 있으며, 이로 인해 해당 변수들은 외부 함수가 실행을 마친 이후에도 사라지지 않고 접근 가능한 상태로 남아 있습니다. 이처럼, 클로저는 데이터를 '닫아서(enclose)' 보존하고, 필요할 때 언제든지 해당 데이터를 사용할 수 있게 해주는 프로그래밍 구조입니다.“",{"type":17,"tag":29,"props":35,"children":36},{},[37],{"type":26,"value":38},"클로저는 실행 컨텍스트에 대한 사전 지식이 있으면 이해하기 어려운 개념은 아니다.",{"type":17,"tag":29,"props":40,"children":41},{},[42],{"type":26,"value":43},"\\n",{"type":17,"tag":29,"props":45,"children":46},{},[47],{"type":26,"value":48},"MDN에서는 클로저에 대해 다음과 같이 정의하고 있다.",{"type":17,"tag":29,"props":50,"children":51},{},[52],{"type":26,"value":53},"“클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다”",{"type":17,"tag":29,"props":55,"children":56},{},[57],{"type":26,"value":43},{"type":17,"tag":29,"props":59,"children":60},{},[61,63,69],{"type":26,"value":62},"무슨 말인지 잘 모르겠는데 우선 먼저 이해해야할 핵심 키워드는 ",{"type":17,"tag":64,"props":65,"children":66},"strong",{},[67],{"type":26,"value":68},"“함수가 선언된 렉시컬 환경”",{"type":26,"value":70},"이다.",{"type":17,"tag":72,"props":73,"children":75},"h1",{"id":74},"렉시컬-스코프",[76],{"type":26,"value":77},"렉시컬 스코프",{"type":17,"tag":29,"props":79,"children":80},{},[81],{"type":26,"value":82},"자바스크립트 엔진은 함수를 어디서 호출했는지가 함수를 어디에 정의했는지에 따라 상위 스코프를 결정한다. 이를 렉시컬 스코프(정적 스코프)라 한다.",{"type":17,"tag":84,"props":85,"children":89},"pre",{"className":86,"code":88,"language":11,"meta":8},[87],"language-javascript","const x = 1;\n\nfunction foo() {\n    const x = 10;\n    bar();\n}\n\nfunction bar() {\n    console.log(x);\n}\n\nfoo(); // ?\nbar(); // ?\n",[90],{"type":17,"tag":91,"props":92,"children":93},"code",{"__ignoreMap":8},[94],{"type":26,"value":88},{"type":17,"tag":29,"props":96,"children":97},{},[98],{"type":26,"value":43},{"type":17,"tag":29,"props":100,"children":101},{},[102],{"type":26,"value":103},"“실행 컨텍스트”에서 살펴보았듯이 스코프의 실체는 실행 컨텍스트의 렉시컬 환경이다. 이 렉시컬 환경은 자신의 “외부 렉시컬 환경에 대한 참조”(파란색 동그라미 친거)를 통해 상위 렉시컬 환경과 연결된다. 이것이 바로 스코프 체인이다.",{"type":17,"tag":29,"props":105,"children":106},{},[107],{"type":26,"value":108},"따라서 “함수의 상위 스코프를 결정한다”는 것은 “렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 저장할 참조값을 결정한다”는 것과 같다.",{"type":17,"tag":110,"props":111,"children":113},"img",{"src":112},"/blog/images/8a73a570-15b5-4b77-993b-55033266b6ed.png",[],{"type":17,"tag":29,"props":115,"children":116},{},[117],{"type":26,"value":43},{"type":17,"tag":29,"props":119,"children":120},{},[121],{"type":26,"value":122},"렉시컬 환경의 “외부 렉시컬 환경에 대한 참조”에 저장할 참조값, 즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정된다. 이것이 바로 렉시컬 스코프다.",{"type":17,"tag":72,"props":124,"children":126},{"id":125},"함수-객체의-내부-슬롯",[127],{"type":26,"value":128},"함수 객체의 내부 슬롯",{"type":17,"tag":29,"props":130,"children":131},{},[132],{"type":26,"value":133},"함수는 자신의 내부 슬롯 [[Environment]]에 자신이 정의된 환경, 즉 상위 스코프 참조를 저장한다.",{"type":17,"tag":72,"props":135,"children":137},{"id":136},"클로저와-렉시컬-환경",[138],{"type":26,"value":139},"클로저와 렉시컬 환경",{"type":17,"tag":84,"props":141,"children":144},{"className":142,"code":143,"language":11,"meta":8},[87],"const x = 1;\n\n// 1\nfunction outer() {\n    const x = 10;\n    // 2\n    const inner = function() {\n        console.log(x);\n    }\n    return inner;\n}\n\n// 3\nconst innerFunc = outer();\n// 4\ninnerFunc();\n",[145],{"type":17,"tag":91,"props":146,"children":147},{"__ignoreMap":8},[148],{"type":26,"value":143},{"type":17,"tag":29,"props":150,"children":151},{},[152],{"type":26,"value":153},"outer 함수를 호출(3)하면 outer 함수는 중첩 함수 inner를 반환하고 생명 주기를 마감한다. 즉 outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 제거된다. 이러면 otuer에 x는 생명 주기를 마감하고 따라서 outer함수에 x는 더는 유효하지 않고 접근할 방법이 없어 보인다.",{"type":17,"tag":29,"props":155,"children":156},{},[157],{"type":26,"value":158},"근데 실행결과(4)를 보면 10이 호출되는걸 볼 수 있다. 마치 outer 함수에 x가 부활이라도 한 듯",{"type":17,"tag":29,"props":160,"children":161},{},[162],{"type":26,"value":163},"이처럼 외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩 함수는 이미 생명 주기가 종료한 외부 함수의 변수를 참조할 수 있다. 이러한 중첩 함수를 클로저라고 부른다.",{"type":17,"tag":29,"props":165,"children":166},{},[167],{"type":26,"value":43},{"type":17,"tag":29,"props":169,"children":170},{},[171],{"type":26,"value":172},"outer 함수의 실행 컨텍스트는 실행 컨텍스트 스택에서 제거되지만 outer 함수의 렉시컬 환경까지 소멸하는 것은 아니다.",{"type":17,"tag":29,"props":174,"children":175},{},[176],{"type":26,"value":177},"outer 함수의 렉시컬 환경은 inner 함수의 [[Environment]] 내부 슬롯에 의해 참조되고 있고 inner 함수는 전역 변수 innerFunc에 의해 참조되고 있으므로 가비지 컬렉션의 대상이 되지 않기 때문이다. 가비지 컬렉터는 누군가 참조하고 있는 메모리 공간을 함부로 해제하지 않는다.",{"type":17,"tag":72,"props":179,"children":181},{"id":180},"클로저의-활용",[182],{"type":26,"value":183},"클로저의 활용",{"type":17,"tag":29,"props":185,"children":186},{},[187],{"type":26,"value":188},"클로저는 상태를 안전하게 변경하고 유지하기 위해 사용한다. 다시 말해, 상태가 의도치 않게 변경되지 않도록 상태를 은닉하고 특정 함수에게만 상태 변경을 허용하기 위해 사용한다.",{"type":17,"tag":29,"props":190,"children":191},{},[192],{"type":26,"value":43},{"type":17,"tag":29,"props":194,"children":195},{},[196],{"type":26,"value":197},"다음과 같은 코드가 있다.",{"type":17,"tag":84,"props":199,"children":202},{"className":200,"code":201,"language":11,"meta":8},[87],"let num = 0;\n\nconst increase = function () {\n    return ++num;\n}\n\nconsole.log(increase()); // 1\nconsole.log(increase()); // 2\nconsole.log(increase()); // 3\n",[203],{"type":17,"tag":91,"props":204,"children":205},{"__ignoreMap":8},[206],{"type":26,"value":201},{"type":17,"tag":29,"props":208,"children":209},{},[210],{"type":26,"value":211},"이 코드는 좋지 않은 코드다.",{"type":17,"tag":213,"props":214,"children":215},"ol",{},[216,222],{"type":17,"tag":217,"props":218,"children":219},"li",{},[220],{"type":26,"value":221},"num은 increase 함수가 호출되기 전까지 변경되지 않고 유지되어야 한다.",{"type":17,"tag":217,"props":223,"children":224},{},[225],{"type":26,"value":226},"이를 위해 num 변수는 increase 함수만이 변경할 수 있어야 한다.",{"type":17,"tag":29,"props":228,"children":229},{},[230],{"type":26,"value":231},"하지만 전역 변수이기 때문에 누구나 접근하고 변경할 수 있다.",{"type":17,"tag":29,"props":233,"children":234},{},[235],{"type":26,"value":43},{"type":17,"tag":29,"props":237,"children":238},{},[239],{"type":26,"value":240},"전역 변수 num를 increase 함수의 지역 변수로 바꾸어 의도치 않는 상태 변경을 방지해보자.",{"type":17,"tag":84,"props":242,"children":245},{"className":243,"code":244,"language":11,"meta":8},[87],"const increase = function() {\n    let num = 0;\n    \n    return ++num;\n}\n\nconsole.log(increase()); // 1\nconsole.log(increase()); // 1\nconsole.log(increase()); // 1\n",[246],{"type":17,"tag":91,"props":247,"children":248},{"__ignoreMap":8},[249],{"type":26,"value":244},{"type":17,"tag":29,"props":251,"children":252},{},[253],{"type":26,"value":254},"num 변수가 안전하긴 하지만 함수가 호출 될 때마다 지역 변수 num은 다시 선언되고 0으로 초기화 되기 때문에 출력 결과는 언제나 1이다. 다시 말해 상태가 변경되기 이전 상태를 유지하지 못한다. 이전 상태를 유지할 수 있도록 클로저를 사용해보자.",{"type":17,"tag":84,"props":256,"children":259},{"className":257,"code":258,"language":11,"meta":8},[87],"const increase = (function() {\n    let num = 0;\n    \n    // 클로저\n    return function () {\n        return ++num;\n    }\n}())\n\nconsole.log(increase()); // 1\nconsole.log(increase()); // 2\nconsole.log(increase()); // 3\n",[260],{"type":17,"tag":91,"props":261,"children":262},{"__ignoreMap":8},[263],{"type":26,"value":258},{"type":17,"tag":29,"props":265,"children":266},{},[267,269,274],{"type":26,"value":268},"즉시 실행 함수가 실행되고, 즉시 실행 함수가 반환한 함수가 increase 변수에 할당된다. increase 변수에 할당된 함수는 자신이 정의된 위치에 의해 결정된 상위 스코프인 ",{"type":17,"tag":64,"props":270,"children":271},{},[272],{"type":26,"value":273},"즉시 실행 함수의 렉시컬 환경을 기억하는 클로저",{"type":26,"value":275},"다.",{"type":17,"tag":29,"props":277,"children":278},{},[279],{"type":26,"value":280},"즉시 실행 함수는 호출된 이후 소멸되지만 즉시 실행 함수가 반환한 클로저는 increase 변수에 할당되어 호출된다. 이때 즉시 실행 함수가 반환한 클로저는 자신이 정의된 위치에 의해 결정된 상위 스코프인 즉시 실행 함수의 렉시컬 환경을 기억하고 있다. 따라서 즉시 실행 함수가 반환한 클로저는 카운트 상태를 유지하기 위한 자유 변수 num을 언제 어디서 호출하든지 참조하고 변경할 수 있다.",{"type":17,"tag":29,"props":282,"children":283},{},[284],{"type":26,"value":285},"이처럼 클로저는 상태가 의도치 않게 변경되지 않도록 안전하게 은닉하고 특정 함수에게만 상태 변경을 허용하여 상태를 안전하게 변경하고 유지하기 위해 사용한다.",{"type":17,"tag":72,"props":287,"children":289},{"id":288},"캡슐화와-정보-은닉",[290],{"type":26,"value":291},"캡슐화와 정보 은닉",{"type":17,"tag":29,"props":293,"children":294},{},[295],{"type":26,"value":296},"캡슐화는 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작인 메서드를 하나로 묶는 것을 말한다. 캡슐화는 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 하는데 이를 정보 은닉이라 한다.",{"type":17,"tag":29,"props":298,"children":299},{},[300],{"type":26,"value":301},"정보 은닉은 외부에 공개할 필요가 없는 구현의 일부를 외부에 공개되지 않도록 감추어 적절치 못한 접근으로부터 객체의 상태가 변경되는 것을 방지해 정보를 보호하고, 객체 간의 상호 의존성, 즉 결합도를 낮추는 효과가 있다.",{"type":17,"tag":84,"props":303,"children":306},{"className":304,"code":305,"language":11,"meta":8},[87],"const Person(function() {\n    let _age = 0; // private\n    \n    function Person(name, age) {\n        this.name = name; // public\n        _age = age;\n    }\n    \n    Person.prototype.sayHi = function() {\n        console.log(`Hi! My name is ${this.name}. I am ${_age}`);\n    }\n    \n    return Person;\n}());\n\nconst me = new Person(\"Lee\", 20);\nme.sayHi(); // Hi! My name is Lee. I am 20\nconst you = new Person(\"Kim\", 30);\nyou.sayHi(); // Hi! My name is Lee. I am 30\n",[307],{"type":17,"tag":91,"props":308,"children":309},{"__ignoreMap":8},[310],{"type":26,"value":305},{"type":17,"tag":29,"props":312,"children":313},{},[314],{"type":26,"value":43},{"type":17,"tag":29,"props":316,"children":317},{},[318],{"type":26,"value":319},"위 패턴을 사용하면 public, private, protected 같은 접근 제한자를 제공하지 않느 자바스크립트에서도 정보 은닉이 가능한 것처럼 보인다.",{"type":17,"tag":29,"props":321,"children":322},{},[323],{"type":26,"value":324},"하지만 위 코드도 문제가 있다. Person 생성자 함수가 여러 개의 인스턴스를 생성할 경우 _age 변수의 상태가 유지 되지 않는다는 것이다.",{"type":17,"tag":29,"props":326,"children":327},{},[328],{"type":26,"value":329},"다시 me.sayHi()를 호출하면",{"type":17,"tag":84,"props":331,"children":334},{"className":332,"code":333,"language":11,"meta":8},[87],"me.sayHi(); // Hi! My name is Lee. I am 30\n",[335],{"type":17,"tag":91,"props":336,"children":337},{"__ignoreMap":8},[338],{"type":26,"value":333},{"type":17,"tag":29,"props":340,"children":341},{},[342],{"type":26,"value":343},"me의 age가 바뀐걸 볼수 있다.",{"type":17,"tag":29,"props":345,"children":346},{},[347],{"type":26,"value":348},"이처럼 자바스크립트는 정보 은닉을 완전하게 지원하지 않는다.",{"type":17,"tag":29,"props":350,"children":351},{},[352],{"type":26,"value":43},{"type":17,"tag":29,"props":354,"children":355},{},[356],{"type":26,"value":357},"! 현재 최신 문법에서는 #을 사용하여 private를 지원하고 있다",{"type":17,"tag":84,"props":359,"children":362},{"className":360,"code":361,"language":11,"meta":8},[87],"class Person {\n    #age = 0;\n}\n",[363],{"type":17,"tag":91,"props":364,"children":365},{"__ignoreMap":8},[366],{"type":26,"value":361},{"type":17,"tag":72,"props":368,"children":370},{"id":369},"자주-발생하는-실수",[371],{"type":26,"value":372},"자주 발생하는 실수",{"type":17,"tag":84,"props":374,"children":377},{"className":375,"code":376,"language":11,"meta":8},[87],"var funcs = [];\n\nfor (var i = 0; i \u003C 3; i++) {\n    funcs[i] = function() { return i };\n}\nfor (var j = 0; j \u003C funcs.length; j++) {\n    console.log(funcs[j]()); \n}\n\noutput:\n3\n3\n3\n",[378],{"type":17,"tag":91,"props":379,"children":380},{"__ignoreMap":8},[381],{"type":26,"value":376},{"type":17,"tag":29,"props":383,"children":384},{},[385],{"type":26,"value":386},"var는 함수 레벨 스코프만 갖기 때문에 전역 변수다.",{"type":17,"tag":29,"props":388,"children":389},{},[390],{"type":26,"value":43},{"type":17,"tag":29,"props":392,"children":393},{},[394],{"type":26,"value":395},"클로저를 사용해 보자",{"type":17,"tag":84,"props":397,"children":400},{"className":398,"code":399,"language":11,"meta":8},[87],"var funcs = [];\n\nfor (var i = 0; i \u003C 3; i++) {\n    funcs[i] = (function(id) {\n       return function() {\n        return id;\n       } \n    }(i));\n}\nfor (var j = 0; j \u003C funcs.length; j++) {\n    console.log(funcs[j]());\n}\n\noutput:\n0\n1\n2\n",[401],{"type":17,"tag":91,"props":402,"children":403},{"__ignoreMap":8},[404],{"type":26,"value":399},{"type":17,"tag":29,"props":406,"children":407},{},[408],{"type":26,"value":409},"자세한 동작 흐름은 교재 참고",{"type":17,"tag":29,"props":411,"children":412},{},[413],{"type":26,"value":43},{"type":17,"tag":29,"props":415,"children":416},{},[417],{"type":26,"value":418},"근데 let을 쓰면 깔끔하게 해결할수 있다.",{"type":17,"tag":84,"props":420,"children":423},{"className":421,"code":422,"language":11,"meta":8},[87],"var funcs = [];\n\nfor (let i = 0; i \u003C 3; i++) {\n    funcs[i] = function() { return i };\n}\nfor (let i = 0; i \u003C funcs.length; i++) {\n    console.log(funcs[i]()); \n}\n\noutput:\n0\n1\n2\n",[424],{"type":17,"tag":91,"props":425,"children":426},{"__ignoreMap":8},[427],{"type":26,"value":422},{"type":17,"tag":429,"props":430,"children":431},"hr",{},[],{"type":17,"tag":433,"props":434,"children":436},"h2",{"id":435},"참고",[437],{"type":26,"value":435},{"type":17,"tag":439,"props":440,"children":441},"ul",{},[442],{"type":17,"tag":217,"props":443,"children":444},{},[445],{"type":17,"tag":64,"props":446,"children":447},{},[448],{"type":26,"value":449},"이웅모, 「모던 자바스크립트 Deep Dive」, 위키북스, 2020",{"title":8,"searchDepth":451,"depth":451,"links":452},2,[453],{"id":435,"depth":451,"text":435},"markdown","content:posts:2c99fd61-ec92-45ab-993c-7bd3c85dbfc8.md","content","posts/2c99fd61-ec92-45ab-993c-7bd3c85dbfc8.md","md",{"_path":460,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":461,"description":462,"tags":463,"date":464,"body":465,"_type":454,"_id":1031,"_source":456,"_file":1032,"_extension":458},"/posts/c1c34454-3dfe-4bbf-bea0-97b3cfc73165","자바스크립트 - 19. 실행 컨텍스트","실행 컨텍스트는 자바스크립트의 동작 원리를 담고 있는 핵심 개념",[11],"2024-02-28T00:00:00.000Z",{"type":14,"children":466,"toc":1028},[467,471,477,482,487,491,496,502,507,526,531,535,540,544,553,558,563,569,574,583,668,672,677,695,699,711,721,725,737,749,754,763,768,836,840,845,850,855,860,865,869,874,878,897,903,947,951,956,962,971,975,980,985,989,994,998,1003,1007,1011,1014,1018],{"type":17,"tag":29,"props":468,"children":469},{},[470],{"type":26,"value":462},{"type":17,"tag":72,"props":472,"children":474},{"id":473},"소스코드-타입",[475],{"type":26,"value":476},"소스코드 타입",{"type":17,"tag":29,"props":478,"children":479},{},[480],{"type":26,"value":481},"4가지 타입으로 구분",{"type":17,"tag":29,"props":483,"children":484},{},[485],{"type":26,"value":486},"전역 코드, 함수 코드, eval 코드, 모듈 코드",{"type":17,"tag":29,"props":488,"children":489},{},[490],{"type":26,"value":43},{"type":17,"tag":29,"props":492,"children":493},{},[494],{"type":26,"value":495},"여기서 주의깊게 볼것은 전역 코드와 함수 코드, 전역 코드는 전역 실행 컨텍스트를 생성하고 함수 코드는 함수 실행 컨텍스트를 생성한다.",{"type":17,"tag":72,"props":497,"children":499},{"id":498},"소스코드의-평가와-실행",[500],{"type":26,"value":501},"소스코드의 평가와 실행",{"type":17,"tag":29,"props":503,"children":504},{},[505],{"type":26,"value":506},"모든 소스코드는 실행에 앞서 평가 과정을 거치며 코드를 실행하기 위한 준비를 한다.",{"type":17,"tag":29,"props":508,"children":509},{},[510,512,517,519,524],{"type":26,"value":511},"소스코드 평가 과정에서 ",{"type":17,"tag":91,"props":513,"children":514},{},[515],{"type":26,"value":516},"실행 컨텍스트를 생성",{"type":26,"value":518},"하고 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 ",{"type":17,"tag":91,"props":520,"children":521},{},[522],{"type":26,"value":523},"스코프(렉시컬 환경의 환경 레코드)",{"type":26,"value":525},"에 등록한다.",{"type":17,"tag":29,"props":527,"children":528},{},[529],{"type":26,"value":530},"평가 과정이 끝나면 소스코드가 순차적으로 실행. 즉 런타임이 시작된다. 이때 소스코드 실행(변수에 값을 할당 등)시 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득하고 할당한다.",{"type":17,"tag":29,"props":532,"children":533},{},[534],{"type":26,"value":43},{"type":17,"tag":29,"props":536,"children":537},{},[538],{"type":26,"value":539},"그러니까 쉽게 자바스크립트 실행하면 소스코드를 한줄한줄 실행하기에 앞서 소스코드를 먼저 평가해, 이때 실행컨텍스트 생성하고 여기 안에 렉시컬 환경이 구성되고, 이 렉시컬 환경에 변수나 함수 식별자 등록을 해. 그다음에 소스코드 실행 단계(소스코드 한줄 한줄 실행, 즉 런타임)에서 실행컨텍스트 가져와서 렉시컬환경 안에 식별자 검색한다음 값을 할당해",{"type":17,"tag":29,"props":541,"children":542},{},[543],{"type":26,"value":43},{"type":17,"tag":84,"props":545,"children":548},{"className":546,"code":547,"language":11,"meta":8},[87],"var x;\nx = 1;\n",[549],{"type":17,"tag":91,"props":550,"children":551},{"__ignoreMap":8},[552],{"type":26,"value":547},{"type":17,"tag":29,"props":554,"children":555},{},[556],{"type":26,"value":557},"이런 코드가 있을때",{"type":17,"tag":29,"props":559,"children":560},{},[561],{"type":26,"value":562},"자바스크립트는 평가단계에서 전역 실행컨텍스트 생성하고 여기에 렉시컬 환경이 구성이 돼, 그리고 렉시컬 환경에 x 식별자 등록하고 undeinfed 할당(var 변수라서), 실행단계에서 전역 실행컨텍스트 안에 렉시컬 환경에 x 있는지 찾아서 x에 1 할당",{"type":17,"tag":72,"props":564,"children":566},{"id":565},"실행-컨텍스트의-역할",[567],{"type":26,"value":568},"실행 컨텍스트의 역할",{"type":17,"tag":29,"props":570,"children":571},{},[572],{"type":26,"value":573},"다음 코드는 자바스크립트 엔진이 어떻게 평가하고 실행할까?",{"type":17,"tag":84,"props":575,"children":578},{"className":576,"code":577,"language":11,"meta":8},[87],"const x = 1;\nconst y = 2;\n\nfunction foo(a) {\n    const x = 10;\n    const y = 20;\n    \n    console.log(a + x + y);\n}\n\nfoo(100);\n\nconsole.log(x + y);\n",[579],{"type":17,"tag":91,"props":580,"children":581},{"__ignoreMap":8},[582],{"type":26,"value":577},{"type":17,"tag":213,"props":584,"children":585},{},[586,604,622,640],{"type":17,"tag":217,"props":587,"children":588},{},[589,591],{"type":26,"value":590},"전역 코드 평가\n",{"type":17,"tag":213,"props":592,"children":593},{},[594,599],{"type":17,"tag":217,"props":595,"children":596},{},[597],{"type":26,"value":598},"선언문만 먼저 실행",{"type":17,"tag":217,"props":600,"children":601},{},[602],{"type":26,"value":603},"전역 변수(const x, y), 전역 함수(foo)가 실행 컨텍스트가 관리하는 전역 스코프에 등록 됨",{"type":17,"tag":217,"props":605,"children":606},{},[607,609],{"type":26,"value":608},"전역 코드 실행\n",{"type":17,"tag":213,"props":610,"children":611},{},[612,617],{"type":17,"tag":217,"props":613,"children":614},{},[615],{"type":26,"value":616},"전역 코드가 순차적으로 실행, 이때 전역 변수(const x, y)에 값이 할당되고 함수가 호출(foo(100))됨",{"type":17,"tag":217,"props":618,"children":619},{},[620],{"type":26,"value":621},"순차적으로 실행되던 전역 코드의 실행을 일시 중단, 함수 내부로 진입",{"type":17,"tag":217,"props":623,"children":624},{},[625,627],{"type":26,"value":626},"함수 코드 평가\n",{"type":17,"tag":213,"props":628,"children":629},{},[630,635],{"type":17,"tag":217,"props":631,"children":632},{},[633],{"type":26,"value":634},"매개변수와 지역 선언문이 먼저 실행되고, 실행 컨텍스트가 관리하는 지역 스코프에 등록된다.",{"type":17,"tag":217,"props":636,"children":637},{},[638],{"type":26,"value":639},"함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체가 생성되어 지역 스코프에 등록되고 this 바인딩도 결정된다.",{"type":17,"tag":217,"props":641,"children":642},{},[643,645],{"type":26,"value":644},"함수 코드 실행\n",{"type":17,"tag":213,"props":646,"children":647},{},[648,653,658,663],{"type":17,"tag":217,"props":649,"children":650},{},[651],{"type":26,"value":652},"함수 코드가 순차적으로 실행되기 시작, 이때 매개변수와 지역 변수에 값이 할당되고 console.log 메서드가 호출된다.",{"type":17,"tag":217,"props":654,"children":655},{},[656],{"type":26,"value":657},"console.log 메서드를 호출하기 위해 먼저 식별자인 console을 스코프 체인을 통해 검색한다.",{"type":17,"tag":217,"props":659,"children":660},{},[661],{"type":26,"value":662},"a,x,y 식별자는 스코프 체인을 통해 검색한다.",{"type":17,"tag":217,"props":664,"children":665},{},[666],{"type":26,"value":667},"console.log 실행이 종료되면 함수 코드 실행 과정이 종료되고 함수 호출 이전으로 되돌아가 전역 코드 실행을 계속한다.",{"type":17,"tag":29,"props":669,"children":670},{},[671],{"type":26,"value":43},{"type":17,"tag":29,"props":673,"children":674},{},[675],{"type":26,"value":676},"함수 호출이 종료되면 함수 호출 이전으로 되돌아가기 위해 현재 실행중인 코드와 이전에 실행하던 코드를 구분하여 관리해야 한다. 이처럼 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.",{"type":17,"tag":213,"props":678,"children":679},{},[680,685,690],{"type":17,"tag":217,"props":681,"children":682},{},[683],{"type":26,"value":684},"선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프를 구분하여 등록하고 상태 변화(식별자에 바인딩된 값의 변화)를 지속적으로 관리할 수 있어야 한다.",{"type":17,"tag":217,"props":686,"children":687},{},[688],{"type":26,"value":689},"스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상위 스코프로 이동하여 식별자를 검색할 수 있어야 한다.",{"type":17,"tag":217,"props":691,"children":692},{},[693],{"type":26,"value":694},"현재 실행 중인 코드의 실행 순서를 변경(예를 들어, 함수 호출에 의한 실행 순서 변경)할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.",{"type":17,"tag":29,"props":696,"children":697},{},[698],{"type":26,"value":43},{"type":17,"tag":29,"props":700,"children":701},{},[702,704,709],{"type":26,"value":703},"이 모든 것을 관리하는 것이 바로 ",{"type":17,"tag":64,"props":705,"children":706},{},[707],{"type":26,"value":708},"실행 컨텍스트",{"type":26,"value":710},"다. 실행 컨텍스트는 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.",{"type":17,"tag":29,"props":712,"children":713},{},[714,716],{"type":26,"value":715},"구체적으로 실행 컨텍스트는 ",{"type":17,"tag":64,"props":717,"children":718},{},[719],{"type":26,"value":720},"식별자를 등록하고 관리하는 스코프와 코드 실행 순서를 구현한 내부 메커니즘으로, 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.",{"type":17,"tag":29,"props":722,"children":723},{},[724],{"type":26,"value":43},{"type":17,"tag":29,"props":726,"children":727},{},[728,730,735],{"type":26,"value":729},"식별자와 스코프는 실행 컨텍스트의 ",{"type":17,"tag":64,"props":731,"children":732},{},[733],{"type":26,"value":734},"렉시컬 환경",{"type":26,"value":736},"으로 관리하고",{"type":17,"tag":29,"props":738,"children":739},{},[740,742,747],{"type":26,"value":741},"코드 실행 순서는 ",{"type":17,"tag":64,"props":743,"children":744},{},[745],{"type":26,"value":746},"실행 컨텍스트 스택",{"type":26,"value":748},"으로 관리한다.",{"type":17,"tag":72,"props":750,"children":752},{"id":751},"실행-컨텍스트-스택",[753],{"type":26,"value":746},{"type":17,"tag":84,"props":755,"children":758},{"className":756,"code":757,"language":11,"meta":8},[87],"const x = 1;\n\nfunction foo() {\n    const y = 2;\n    \n    function bar() {\n        const z = 3;\n        console.log(x, y, z);\n    }\n    bar();\n}\nfoo();\n",[759],{"type":17,"tag":91,"props":760,"children":761},{"__ignoreMap":8},[762],{"type":26,"value":757},{"type":17,"tag":29,"props":764,"children":765},{},[766],{"type":26,"value":767},"자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성한다. 그리고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성한다. 이때 생성된 실행 컨텍스트는 스택 자료구조로 관리된다.",{"type":17,"tag":213,"props":769,"children":770},{},[771,784,797,810,823],{"type":17,"tag":217,"props":772,"children":773},{},[774,776],{"type":26,"value":775},"전역 코드의 평가와 실행\n",{"type":17,"tag":213,"props":777,"children":778},{},[779],{"type":17,"tag":217,"props":780,"children":781},{},[782],{"type":26,"value":783},"전역 실행 컨텍스트를 생성하고, 스택에 푸시, 이때 x와 foo는 전역 실행 컨텍스트에 등록, 전역 코드가 실행되기 시작하여 x에 값이 할당되고 전역 함수 foo가 호출 됨",{"type":17,"tag":217,"props":785,"children":786},{},[787,789],{"type":26,"value":788},"foo 함수 코드의 평가와 실행\n",{"type":17,"tag":213,"props":790,"children":791},{},[792],{"type":17,"tag":217,"props":793,"children":794},{},[795],{"type":26,"value":796},"전역 코드의 실행은 일시 중단되고 코드의 제어권이 foo 함수 내부로 이동, 엔진은 foo 함수 내부의 함수 코드를 평가하여 foo 함수 실행 컨텍스트를 생성하고 스택에 푸시, 이때 y와 bar가 foo 함수 실행 컨텍스트에 등록 됨, 이후 foo 함수 코드가 실행되기 시작하여 y에 값이 할당되고 bar가 호출 됨.",{"type":17,"tag":217,"props":798,"children":799},{},[800,802],{"type":26,"value":801},"bar 함수 코드의 평가와 실행\n",{"type":17,"tag":213,"props":803,"children":804},{},[805],{"type":17,"tag":217,"props":806,"children":807},{},[808],{"type":26,"value":809},"foo 함수 코드의 실행은 일시 중단되고 코드의 제어권이 bar 함수 내부로 이동, 엔진은 bar 함수 내부의 함수 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 스택에 푸시, 이때 z가 bar 함수 실행 컨텍스트에 등록 됨, 이후 bar 함수 코드가 실행되기 시작하며 x에 값이 할당되고 console.log 가 호출되고 bar 함수는 종료",{"type":17,"tag":217,"props":811,"children":812},{},[813,815],{"type":26,"value":814},"foo 함수 코드로 복귀\n",{"type":17,"tag":213,"props":816,"children":817},{},[818],{"type":17,"tag":217,"props":819,"children":820},{},[821],{"type":26,"value":822},"bar 함수가 종료되면 코드의 제어권이 foo 함수로 이동. bar 함수 실행 컨텍스트는 스택에서 제거, 그리고 foo 함수는 더 이상 실행할 코드가 없으므로 종료",{"type":17,"tag":217,"props":824,"children":825},{},[826,828],{"type":26,"value":827},"전역 코드로 복귀\n",{"type":17,"tag":213,"props":829,"children":830},{},[831],{"type":17,"tag":217,"props":832,"children":833},{},[834],{"type":26,"value":835},"foo 함수가 종료되면 코드의 제어권이 전역 코드로 이동. foo 함수 실행 컨텍스트는 스택에서 제거, 그리고 더 이상 실행할 코드가 남아 있지 않으므로 전역 실행 컨텍스트도 스택에서 제거",{"type":17,"tag":29,"props":837,"children":838},{},[839],{"type":26,"value":43},{"type":17,"tag":29,"props":841,"children":842},{},[843],{"type":26,"value":844},"이처럼 실행 컨텍스트 스택은 코드의 실행 순서를 관리",{"type":17,"tag":72,"props":846,"children":848},{"id":847},"렉시컬-환경",[849],{"type":26,"value":734},{"type":17,"tag":29,"props":851,"children":852},{},[853],{"type":26,"value":854},"렉시컬 환경은 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조로 실행 컨텍스트를 구성하는 컴포넌트다.",{"type":17,"tag":29,"props":856,"children":857},{},[858],{"type":26,"value":859},"실행 컨텍스트 스택이 코드의 실행 순서를 관리한다면",{"type":17,"tag":29,"props":861,"children":862},{},[863],{"type":26,"value":864},"렉시컬 환경은 스코프와 식별자를 관리한다.",{"type":17,"tag":29,"props":866,"children":867},{},[868],{"type":26,"value":43},{"type":17,"tag":29,"props":870,"children":871},{},[872],{"type":26,"value":873},"렉시컬 환경은 키와 값을 갖는 객체 형태의 스코프를 생성하여 식별자를 키로 등록하고 식별자에 바인딩된 값을 관리한다. 즉, 렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체다.",{"type":17,"tag":29,"props":875,"children":876},{},[877],{"type":26,"value":43},{"type":17,"tag":29,"props":879,"children":880},{},[881,883,888,890,895],{"type":26,"value":882},"렉시컬 환경은 ",{"type":17,"tag":91,"props":884,"children":885},{},[886],{"type":26,"value":887},"환경레코드",{"type":26,"value":889},"와 ",{"type":17,"tag":91,"props":891,"children":892},{},[893],{"type":26,"value":894},"외부 렉시컬 환경에 대한 참조",{"type":26,"value":896}," 두 개의 컴포넌트로 구성된다.",{"type":17,"tag":72,"props":898,"children":900},{"id":899},"실행-컨텍스트의-생성과-식별자-검색-과정",[901],{"type":26,"value":902},"실행 컨텍스트의 생성과 식별자 검색 과정",{"type":17,"tag":213,"props":904,"children":905},{},[906,911],{"type":17,"tag":217,"props":907,"children":908},{},[909],{"type":26,"value":910},"전역 실행 컨텍스트 생성",{"type":17,"tag":217,"props":912,"children":913},{},[914,916],{"type":26,"value":915},"전역 렉시컬 환경 생성\n",{"type":17,"tag":213,"props":917,"children":918},{},[919,937,942],{"type":17,"tag":217,"props":920,"children":921},{},[922,924],{"type":26,"value":923},"전역 환경 레코드 생성\n",{"type":17,"tag":213,"props":925,"children":926},{},[927,932],{"type":17,"tag":217,"props":928,"children":929},{},[930],{"type":26,"value":931},"객체 환경 레코드 생성",{"type":17,"tag":217,"props":933,"children":934},{},[935],{"type":26,"value":936},"선언적 환경 레코드 생성",{"type":17,"tag":217,"props":938,"children":939},{},[940],{"type":26,"value":941},"this 바인딩",{"type":17,"tag":217,"props":943,"children":944},{},[945],{"type":26,"value":946},"외부 렉시컬 환경에 대한 참조 결정",{"type":17,"tag":110,"props":948,"children":950},{"src":949},"/blog/images/3c8677b3-53e4-41d5-9ed4-0223902461db.png",[],{"type":17,"tag":29,"props":952,"children":953},{},[954],{"type":26,"value":955},"각 실행 과정에 대한 자세한 내용은 책 참고 (양이 엄청 많음 ㅠㅠ)",{"type":17,"tag":72,"props":957,"children":959},{"id":958},"실행-컨텍스트와-블록-레벨-스코프",[960],{"type":26,"value":961},"실행 컨텍스트와 블록 레벨 스코프",{"type":17,"tag":84,"props":963,"children":966},{"className":964,"code":965,"language":11,"meta":8},[87],"let x = 1;\n\nif (true) {\n    let x = 10;\n    console.log(x);\n}\nconsole.log(x);\n",[967],{"type":17,"tag":91,"props":968,"children":969},{"__ignoreMap":8},[970],{"type":26,"value":965},{"type":17,"tag":29,"props":972,"children":973},{},[974],{"type":26,"value":43},{"type":17,"tag":29,"props":976,"children":977},{},[978],{"type":26,"value":979},"if 문의 코드 블록 내에서 let 키워드로 변수가 선언 됨. 따라서 if 문의 코드 블록이 실행되면 if 문의 코드 블록을 위한 블록 레벨 스코프를 생성해야 함.",{"type":17,"tag":29,"props":981,"children":982},{},[983],{"type":26,"value":984},"이를 위해 선언적 환경 레코드(Declarative…)를 갖는 렉시컬 환경을 새롭게 생성",{"type":17,"tag":110,"props":986,"children":988},{"src":987},"/blog/images/62a8734e-57af-4c8d-90f5-3f4072c8cd3c.png",[],{"type":17,"tag":29,"props":990,"children":991},{},[992],{"type":26,"value":993},"기존에 렉시컬 환경을 교체",{"type":17,"tag":110,"props":995,"children":997},{"src":996},"/blog/images/212f86cc-e4e3-416c-a620-e56d550fa6c8.png",[],{"type":17,"tag":29,"props":999,"children":1000},{},[1001],{"type":26,"value":1002},"코드 블록의 실행이 종료되면 다시 돌림",{"type":17,"tag":110,"props":1004,"children":1006},{"src":1005},"/blog/images/1a7dfcbf-93af-4620-b18f-16eacde4b766.png",[],{"type":17,"tag":29,"props":1008,"children":1009},{},[1010],{"type":26,"value":43},{"type":17,"tag":429,"props":1012,"children":1013},{},[],{"type":17,"tag":433,"props":1015,"children":1016},{"id":435},[1017],{"type":26,"value":435},{"type":17,"tag":439,"props":1019,"children":1020},{},[1021],{"type":17,"tag":217,"props":1022,"children":1023},{},[1024],{"type":17,"tag":64,"props":1025,"children":1026},{},[1027],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":1029},[1030],{"id":435,"depth":451,"text":435},"content:posts:c1c34454-3dfe-4bbf-bea0-97b3cfc73165.md","posts/c1c34454-3dfe-4bbf-bea0-97b3cfc73165.md",{"_path":1034,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1035,"description":1036,"tags":1037,"date":1038,"body":1039,"_type":454,"_id":1412,"_source":456,"_file":1413,"_extension":458},"/posts/62b25952-eab1-4faf-b3ec-9b0928301bb6","자바스크립트 - 18. this","this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다.",[11],"2024-02-26T00:00:00.000Z",{"type":14,"children":1040,"toc":1400},[1041,1045,1050,1056,1061,1069,1073,1079,1084,1089,1098,1102,1107,1116,1120,1125,1134,1138,1143,1150,1159,1165,1174,1180,1189,1195,1200,1209,1214,1218,1222,1227,1236,1240,1245,1254,1258,1264,1269,1278,1284,1293,1297,1302,1306,1311,1320,1324,1329,1338,1342,1347,1356,1361,1370,1379,1383,1386,1390],{"type":17,"tag":29,"props":1042,"children":1043},{},[1044],{"type":26,"value":1036},{"type":17,"tag":29,"props":1046,"children":1047},{},[1048],{"type":26,"value":1049},"자바스크립트 this는 함수가 호출되는 방식에 따라 this에 바인딩될 값, 즉 this 바인딩이 동적으로 결정된다.",{"type":17,"tag":72,"props":1051,"children":1053},{"id":1052},"함수-호출-방식과-this-바인딩",[1054],{"type":26,"value":1055},"함수 호출 방식과 this 바인딩",{"type":17,"tag":29,"props":1057,"children":1058},{},[1059],{"type":26,"value":1060},"렉시컬 스코프와 this 바인딩은 결정 시기가 다르다.",{"type":17,"tag":439,"props":1062,"children":1063},{},[1064],{"type":17,"tag":217,"props":1065,"children":1066},{},[1067],{"type":26,"value":1068},"함수의 상위 스코프를 결정하는 방식인 렉시컬 스코프는 함수 정의가 평가되어 함수 객체가 생성되는 시점에 상위 스코프를 결정한다. 하지만 this 바인딩은 함수 호출 시점에 결정된다.",{"type":17,"tag":29,"props":1070,"children":1071},{},[1072],{"type":26,"value":43},{"type":17,"tag":433,"props":1074,"children":1076},{"id":1075},"일반-함수-호출",[1077],{"type":26,"value":1078},"일반 함수 호출",{"type":17,"tag":29,"props":1080,"children":1081},{},[1082],{"type":26,"value":1083},"기본적으로 this에는 전역 객체(global object)가 바인딩된다.",{"type":17,"tag":29,"props":1085,"children":1086},{},[1087],{"type":26,"value":1088},"전역 함수는 물론이고 중첩 함수를 일반 함수로 호출하면 함수 내부의 this에는 전역 객체가 바인딩된다.",{"type":17,"tag":84,"props":1090,"children":1093},{"className":1091,"code":1092,"language":11,"meta":8},[87],"function foo() {\n    console.log(\"foo's this: \", this); // window\n    function bar() {\n        console.log(\"bar's this: \", this); // window\n    }\n    bar();\n}\nfoo();\n",[1094],{"type":17,"tag":91,"props":1095,"children":1096},{"__ignoreMap":8},[1097],{"type":26,"value":1092},{"type":17,"tag":29,"props":1099,"children":1100},{},[1101],{"type":26,"value":43},{"type":17,"tag":29,"props":1103,"children":1104},{},[1105],{"type":26,"value":1106},"메서드(객체 안에 함수) 내에서 정의한 중첩 함수도 일반 함수로 호출되면 중첩 함수 내부의 this에는 전역 객체가 바인딩된다.",{"type":17,"tag":84,"props":1108,"children":1111},{"className":1109,"code":1110,"language":11,"meta":8},[87],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        consoel.log(this.value); // 100\n\n        function bar() {\n            console.log(this); // window\n            console.log(this.value); // 1\n        }\n        bar();\n    }\n}\n",[1112],{"type":17,"tag":91,"props":1113,"children":1114},{"__ignoreMap":8},[1115],{"type":26,"value":1110},{"type":17,"tag":29,"props":1117,"children":1118},{},[1119],{"type":26,"value":43},{"type":17,"tag":29,"props":1121,"children":1122},{},[1123],{"type":26,"value":1124},"콜백 함수가 일반 함수로 호출된다면 콜백 함수 내부의 this에도 전역 객체가 바인딩된다. 어떠한 함수라도 일반 함수로 호출되면 this에 전역 객체가 바인딩된다.",{"type":17,"tag":84,"props":1126,"children":1129},{"className":1127,"code":1128,"language":11,"meta":8},[87],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        setTimeout(function() {\n            console.log(this.value); // 1\n        })\n    }\n}\n",[1130],{"type":17,"tag":91,"props":1131,"children":1132},{"__ignoreMap":8},[1133],{"type":26,"value":1128},{"type":17,"tag":29,"props":1135,"children":1136},{},[1137],{"type":26,"value":43},{"type":17,"tag":29,"props":1139,"children":1140},{},[1141],{"type":26,"value":1142},"메서드 내부의 중첩 함수나 콜백 함수의 this 바인딩을 메서드의 this 바인딩과 일치시키기 위한 방법",{"type":17,"tag":1144,"props":1145,"children":1147},"h3",{"id":1146},"this를-변수에-할당",[1148],{"type":26,"value":1149},"this를 변수에 할당",{"type":17,"tag":84,"props":1151,"children":1154},{"className":1152,"code":1153,"language":11,"meta":8},[87],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        var that = this;\n        setTimeout(function() {\n            console.log(that.value); // 100\n        })\n    }\n}\n",[1155],{"type":17,"tag":91,"props":1156,"children":1157},{"__ignoreMap":8},[1158],{"type":26,"value":1153},{"type":17,"tag":1144,"props":1160,"children":1162},{"id":1161},"apply-call-bind",[1163],{"type":26,"value":1164},"apply, call, bind",{"type":17,"tag":84,"props":1166,"children":1169},{"className":1167,"code":1168,"language":11,"meta":8},[87],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(function() {\n            console.log(this.value); // 100\n        }.bind(this))\n    }\n}\n",[1170],{"type":17,"tag":91,"props":1171,"children":1172},{"__ignoreMap":8},[1173],{"type":26,"value":1168},{"type":17,"tag":1144,"props":1175,"children":1177},{"id":1176},"화살표-함수",[1178],{"type":26,"value":1179},"화살표 함수",{"type":17,"tag":84,"props":1181,"children":1184},{"className":1182,"code":1183,"language":11,"meta":8},[87],"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(() => {\n            console.log(this.value); // 100\n        })\n    }\n}\n",[1185],{"type":17,"tag":91,"props":1186,"children":1187},{"__ignoreMap":8},[1188],{"type":26,"value":1183},{"type":17,"tag":433,"props":1190,"children":1192},{"id":1191},"메서드-호출",[1193],{"type":26,"value":1194},"메서드 호출",{"type":17,"tag":29,"props":1196,"children":1197},{},[1198],{"type":26,"value":1199},"메서드 내부의 this에는 메서드를 호출한 객체, 즉 메서드를 호출할 때 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩된다. 주의할 것은 메서드 내부의 this는 메서드를 소유한 객체가 아닌 메서드를 호출한 객체에 바인딩된다는 것이다.",{"type":17,"tag":84,"props":1201,"children":1204},{"className":1202,"code":1203,"language":11,"meta":8},[87],"const person = {\n    name: 'Lee',\n    getName() {\n        return this.name;\n    }\n}\nconsole.log(person.getName());\n",[1205],{"type":17,"tag":91,"props":1206,"children":1207},{"__ignoreMap":8},[1208],{"type":26,"value":1203},{"type":17,"tag":29,"props":1210,"children":1211},{},[1212],{"type":26,"value":1213},"오해하면 안되는게 getName의 함수 객체는 person의 포함된게 아니라 독립적으로 존재하는 별도의 객체(메모리에 별도로)다. getName 프로퍼티가 함수 객체를 가리키고 있을 뿐이다.",{"type":17,"tag":110,"props":1215,"children":1217},{"src":1216},"/blog/images/1be99fb9-d92b-4c1a-9673-66579147815c.png",[],{"type":17,"tag":29,"props":1219,"children":1220},{},[1221],{"type":26,"value":43},{"type":17,"tag":29,"props":1223,"children":1224},{},[1225],{"type":26,"value":1226},"따라서 getName 프로퍼티가 가리키는 함수 객체, 즉 getName 메서드는 다른 객체의 프로퍼티에 할당하는 것으로 다른 객체의 메서드가 될 수도 있고 일반 변수에 할당하여 일반 함수로 호출될 수도 있다.",{"type":17,"tag":84,"props":1228,"children":1231},{"className":1229,"code":1230,"language":11,"meta":8},[87],"const person = {\n  name: 'Lee',\n  getName() {\n    return this.name;\n  }\n}\nconst annotherPerson = {\n  name: 'kim'\n}\nannotherPerson.getName = person.getName;\nconsole.log(annotherPerson.getName()); // kim\n\nlet getName = person.getName;\nconsole.log(getName()); // ''\n",[1232],{"type":17,"tag":91,"props":1233,"children":1234},{"__ignoreMap":8},[1235],{"type":26,"value":1230},{"type":17,"tag":29,"props":1237,"children":1238},{},[1239],{"type":26,"value":43},{"type":17,"tag":29,"props":1241,"children":1242},{},[1243],{"type":26,"value":1244},"프로토타입 메서드 내부에서 사용된 this도 일반 메서드와 마찬가지로 해당 메서드를 호출한 객체에 바인딩된다.",{"type":17,"tag":84,"props":1246,"children":1249},{"className":1247,"code":1248,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.getName = funciton() {\n    return this.name;\n};\n\nconst me = new Person('Lee');\n\nconsole.log(me.getName()); // Lee\n\nPerson.prototype.name = \"kim\";\nconsole.log(person.prototype.getName()); // kim\n",[1250],{"type":17,"tag":91,"props":1251,"children":1252},{"__ignoreMap":8},[1253],{"type":26,"value":1248},{"type":17,"tag":29,"props":1255,"children":1256},{},[1257],{"type":26,"value":43},{"type":17,"tag":433,"props":1259,"children":1261},{"id":1260},"생성자-함수-호출",[1262],{"type":26,"value":1263},"생성자 함수 호출",{"type":17,"tag":29,"props":1265,"children":1266},{},[1267],{"type":26,"value":1268},"생성자 함수 내부의 this에는 생성자 함수가 (미래에) 생성할 인스턴스가 바인딩된다.",{"type":17,"tag":84,"props":1270,"children":1273},{"className":1271,"code":1272,"language":11,"meta":8},[87],"function Circle(radius) {\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n\nconst circle1 = new Circle(5);\n\n// 만약 new 연산자와 함께 호출하지 않으면 생성자 함수로 동작하지 않는다. 일반적인 함수의 호출이다.\nconst circle2 = Circle(15); // 이때 this는 window이므로 window.radius = 15가 된다.\nconsole.log(radius); // 15\n",[1274],{"type":17,"tag":91,"props":1275,"children":1276},{"__ignoreMap":8},[1277],{"type":26,"value":1272},{"type":17,"tag":433,"props":1279,"children":1281},{"id":1280},"funcitonprototypeapplycallbind-메서드에-의한-간접-호출",[1282],{"type":26,"value":1283},"Funciton.prototype.apply/call/bind 메서드에 의한 간접 호출",{"type":17,"tag":84,"props":1285,"children":1288},{"className":1286,"code":1287,"language":11,"meta":8},[87],"function getThisBinding() {\n    return this;\n}\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding()); // window\n\nconsole.log(getThisBinding.call(thisArg)); // {a: 1};\nconsole.log(getThisBinding.apply(thisArg)); // {a: 1};\n",[1289],{"type":17,"tag":91,"props":1290,"children":1291},{"__ignoreMap":8},[1292],{"type":26,"value":1287},{"type":17,"tag":29,"props":1294,"children":1295},{},[1296],{"type":26,"value":43},{"type":17,"tag":29,"props":1298,"children":1299},{},[1300],{"type":26,"value":1301},"apply와 call 메서드의 본질적인 기능은 함수를 호출하는 것이다. apply와 call 메서드는 함수를 호출하면서 첫 번째 인수로 전달한 특정 객체를 호출한 함수의 this에 바인딩한다.",{"type":17,"tag":29,"props":1303,"children":1304},{},[1305],{"type":26,"value":43},{"type":17,"tag":29,"props":1307,"children":1308},{},[1309],{"type":26,"value":1310},"apply와 call은 인수를 전달하는 방식만 다를뿐 동일하게 동작한다.",{"type":17,"tag":84,"props":1312,"children":1315},{"className":1313,"code":1314,"language":11,"meta":8},[87],"function getThisBinding() {\n    console.log(arguments);\n    return this;\n}\n\nconst thisArg = {a: 1};\n\nconsole.log(getThisBinding.apply(thisArg, [1, 2, 3]);\nconsole.log(getThisBinding.call(thisArg, 1, 2, 3);\n",[1316],{"type":17,"tag":91,"props":1317,"children":1318},{"__ignoreMap":8},[1319],{"type":26,"value":1314},{"type":17,"tag":29,"props":1321,"children":1322},{},[1323],{"type":26,"value":43},{"type":17,"tag":29,"props":1325,"children":1326},{},[1327],{"type":26,"value":1328},"대표적인 용도는 arguments 객체와 같은 유사 배열 객체에 배열 메서드를 사용하는 경우다. arguments 객체는 배열이 아니기 때문에 Array.prototype.slice 같은 배열의 메서드를 사용할 수 없으나 apply와 call 메서드를 이용하면 가능하다.",{"type":17,"tag":84,"props":1330,"children":1333},{"className":1331,"code":1332,"language":11,"meta":8},[87],"function convertArgsToArray() {\n    const arr = Array.prototype.slice.call(arguments);\n\n    return arr;\n}\n",[1334],{"type":17,"tag":91,"props":1335,"children":1336},{"__ignoreMap":8},[1337],{"type":26,"value":1332},{"type":17,"tag":29,"props":1339,"children":1340},{},[1341],{"type":26,"value":43},{"type":17,"tag":29,"props":1343,"children":1344},{},[1345],{"type":26,"value":1346},"bind 메서드는 apply와 call 메서드와 달리 함수를 호출하지 않고 this로 사용할 객체만 전달한다.",{"type":17,"tag":84,"props":1348,"children":1351},{"className":1349,"code":1350,"language":11,"meta":8},[87],"function getThisBinding() {\n    return this;\n}\n\nconst thisArg = {a:1};\n\nconsole.log(getThisBinding.bind(thisArg)); // getThisBinding\nconsole.log(getThisBidning.bind(thisArg)()); // {a:1}\n",[1352],{"type":17,"tag":91,"props":1353,"children":1354},{"__ignoreMap":8},[1355],{"type":26,"value":1350},{"type":17,"tag":29,"props":1357,"children":1358},{},[1359],{"type":26,"value":1360},"bind 메서드는 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치하는 문제를 해결하기 위해 유용하게 사용된다.",{"type":17,"tag":84,"props":1362,"children":1365},{"className":1363,"code":1364,"language":11,"meta":8},[87],"const person = {\n    name: 'Lee',\n    foo(callback) {\n        setTimeout(callback, 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // window\n})\n",[1366],{"type":17,"tag":91,"props":1367,"children":1368},{"__ignoreMap":8},[1369],{"type":26,"value":1364},{"type":17,"tag":84,"props":1371,"children":1374},{"className":1372,"code":1373,"language":11,"meta":8},[87],"const person = {\n    name: 'Lee',\n    foo(callback) {\n        // callback 함수의 this는 여기 this야\n        // bind는 apply와 call과 달리 호출을 하지 않기 때문에 가능\n        setTimeout(callback.bind(this), 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // {name: 'Lee', foo: f}\n})\n",[1375],{"type":17,"tag":91,"props":1376,"children":1377},{"__ignoreMap":8},[1378],{"type":26,"value":1373},{"type":17,"tag":29,"props":1380,"children":1381},{},[1382],{"type":26,"value":43},{"type":17,"tag":429,"props":1384,"children":1385},{},[],{"type":17,"tag":433,"props":1387,"children":1388},{"id":435},[1389],{"type":26,"value":435},{"type":17,"tag":439,"props":1391,"children":1392},{},[1393],{"type":17,"tag":217,"props":1394,"children":1395},{},[1396],{"type":17,"tag":64,"props":1397,"children":1398},{},[1399],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":1401},[1402,1408,1409,1410,1411],{"id":1075,"depth":451,"text":1078,"children":1403},[1404,1406,1407],{"id":1146,"depth":1405,"text":1149},3,{"id":1161,"depth":1405,"text":1164},{"id":1176,"depth":1405,"text":1179},{"id":1191,"depth":451,"text":1194},{"id":1260,"depth":451,"text":1263},{"id":1280,"depth":451,"text":1283},{"id":435,"depth":451,"text":435},"content:posts:62b25952-eab1-4faf-b3ec-9b0928301bb6.md","posts/62b25952-eab1-4faf-b3ec-9b0928301bb6.md",{"_path":1415,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1416,"description":1417,"tags":1418,"date":1419,"body":1420,"_type":454,"_id":1637,"_source":456,"_file":1638,"_extension":458},"/posts/4820d5e9-d25c-4a0e-b217-82873d3ea748","자바스크립트 - 17. 빌트인 객체","자바스크립트 객체는 크게 3개의 객체로 분류",[11],"2024-02-24T00:00:00.000Z",{"type":14,"children":1421,"toc":1633},[1422,1426,1444,1450,1455,1464,1470,1475,1484,1488,1493,1505,1509,1518,1524,1529,1538,1542,1547,1556,1561,1570,1574,1580,1589,1594,1598,1603,1612,1616,1619,1623],{"type":17,"tag":29,"props":1423,"children":1424},{},[1425],{"type":26,"value":1417},{"type":17,"tag":439,"props":1427,"children":1428},{},[1429,1434,1439],{"type":17,"tag":217,"props":1430,"children":1431},{},[1432],{"type":26,"value":1433},"표준 빌트인 객체: ECMAScript 사양에 정의된 객체",{"type":17,"tag":217,"props":1435,"children":1436},{},[1437],{"type":26,"value":1438},"호스트 객체: ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행 환경(브라우저 또는 Node.js 환경)에서 추가로 제공하는 객체",{"type":17,"tag":217,"props":1440,"children":1441},{},[1442],{"type":26,"value":1443},"사용자 정의 객체: 사용자가 직접 정의한 객체",{"type":17,"tag":72,"props":1445,"children":1447},{"id":1446},"표준-빌트인-객체",[1448],{"type":26,"value":1449},"표준 빌트인 객체",{"type":17,"tag":29,"props":1451,"children":1452},{},[1453],{"type":26,"value":1454},"Number는 인스턴스 없이 정적으로 호출할 수 있는 정적 메서드를 제공한다.",{"type":17,"tag":84,"props":1456,"children":1459},{"className":1457,"code":1458,"language":11,"meta":8},[87],"const numObj = new Number(1.5);\n\n// toFixed는 Number.prototype의 프로토타입 메서드다\nconsole.log(numObj.toFixed());\n\n// isInteger는 Number의 정적 메서드다.\nconsole.log(Number.isInteger(0.5));\n",[1460],{"type":17,"tag":91,"props":1461,"children":1462},{"__ignoreMap":8},[1463],{"type":26,"value":1458},{"type":17,"tag":72,"props":1465,"children":1467},{"id":1466},"원시값과-래퍼-객체",[1468],{"type":26,"value":1469},"원시값과 래퍼 객체",{"type":17,"tag":29,"props":1471,"children":1472},{},[1473],{"type":26,"value":1474},"문자열이나 숫자, 불리언 등의 원시값이 있는데도 문자열, 숫자, 불리언 객체를 생성하는 String, Number, Boolean 등의 표준 빌트인 생성자 함수가 존재하는 이유는 무엇일까?",{"type":17,"tag":84,"props":1476,"children":1479},{"className":1477,"code":1478,"language":11,"meta":8},[87],"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n",[1480],{"type":17,"tag":91,"props":1481,"children":1482},{"__ignoreMap":8},[1483],{"type":26,"value":1478},{"type":17,"tag":29,"props":1485,"children":1486},{},[1487],{"type":26,"value":43},{"type":17,"tag":29,"props":1489,"children":1490},{},[1491],{"type":26,"value":1492},"이는 마침표 표기법으로 접근하면 자바스크립트 엔진이 일시적으로 원시값을 연관된 객체로 변환해 주기 때문이다. 프로퍼티에 접근하거나 메서드를 호출하고 다시 원시값으로 돌린다.",{"type":17,"tag":29,"props":1494,"children":1495},{},[1496,1498,1503],{"type":26,"value":1497},"이처럼 문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체를 ",{"type":17,"tag":64,"props":1499,"children":1500},{},[1501],{"type":26,"value":1502},"래퍼 객체",{"type":26,"value":1504},"라 한다.",{"type":17,"tag":29,"props":1506,"children":1507},{},[1508],{"type":26,"value":43},{"type":17,"tag":84,"props":1510,"children":1513},{"className":1511,"code":1512,"language":11,"meta":8},[87],"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n\n// 래퍼 객체로 프로퍼티에 접근하거나 메서드를 호출한 후, 다시 원시값으로 되돌린다.\nconsole.log(typeof str); // string\n",[1514],{"type":17,"tag":91,"props":1515,"children":1516},{"__ignoreMap":8},[1517],{"type":26,"value":1512},{"type":17,"tag":72,"props":1519,"children":1521},{"id":1520},"전역-객체",[1522],{"type":26,"value":1523},"전역 객체",{"type":17,"tag":29,"props":1525,"children":1526},{},[1527],{"type":26,"value":1528},"어떤 객체보다도 먼저 생성되는 특수한 객체. 지칭하는 이름이 제각각. 브라우저 환경에서는 window, Node.js 환경에서는 global",{"type":17,"tag":1530,"props":1531,"children":1532},"blockquote",{},[1533],{"type":17,"tag":29,"props":1534,"children":1535},{},[1536],{"type":26,"value":1537},"ES11부터는 통일된 globalThis 식별자를 사용한다.",{"type":17,"tag":29,"props":1539,"children":1540},{},[1541],{"type":26,"value":43},{"type":17,"tag":29,"props":1543,"children":1544},{},[1545],{"type":26,"value":1546},"var 키워드로 선언한 전역 변수와 선언하지 않은 변수에 값을 할당한 암묵적 전역",{"type":17,"tag":84,"props":1548,"children":1551},{"className":1549,"code":1550,"language":11,"meta":8},[87],"// var 키워드로 선언한 전역 변수\nvar foo = 1;\nconsole.log(window.foo); // 1\n\n// bar는 전역 변수가 아니라 전역 객체의 프로퍼티다.\nbar = 2;\nconsole.log(window.bar); // 2\n\nfunction baz() {}\nconsole.log(window.baz());\n",[1552],{"type":17,"tag":91,"props":1553,"children":1554},{"__ignoreMap":8},[1555],{"type":26,"value":1550},{"type":17,"tag":29,"props":1557,"children":1558},{},[1559],{"type":26,"value":1560},"let이나 const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. 즉, window.foo와 같이 접근할 수 없다. let이나 const 키워드로 선언한 전역 변수는 보이지 않는 개념적인 블록(전역 렉시컬 환경의 선언적 레코드) 내에 존재하게 된다.",{"type":17,"tag":84,"props":1562,"children":1565},{"className":1563,"code":1564,"language":11,"meta":8},[87],"let foo = 123;\nconsole.log(window.foo); // undefined\n",[1566],{"type":17,"tag":91,"props":1567,"children":1568},{"__ignoreMap":8},[1569],{"type":26,"value":1564},{"type":17,"tag":29,"props":1571,"children":1572},{},[1573],{"type":26,"value":43},{"type":17,"tag":433,"props":1575,"children":1577},{"id":1576},"암묵적-전역",[1578],{"type":26,"value":1579},"암묵적 전역",{"type":17,"tag":84,"props":1581,"children":1584},{"className":1582,"code":1583,"language":11,"meta":8},[87],"var x = 10;\n\nfunction foo() {\n    y = 20;\n}\n\nfoo();\nconsole.log(x + y); // 20\n",[1585],{"type":17,"tag":91,"props":1586,"children":1587},{"__ignoreMap":8},[1588],{"type":26,"value":1583},{"type":17,"tag":29,"props":1590,"children":1591},{},[1592],{"type":26,"value":1593},"y는 변수 선언 없이 단지 전역 객체의 프로퍼티로 추가되었을 뿐이다. 따라서 y는 변수가 아니다. y는 변수가 아니므로 변수 호이스팅이 발생하지 않는다.",{"type":17,"tag":29,"props":1595,"children":1596},{},[1597],{"type":26,"value":43},{"type":17,"tag":29,"props":1599,"children":1600},{},[1601],{"type":26,"value":1602},"y는 window의 객체의 프로퍼티이니 삭제가 가능하다. 전역 변수는 삭제 불가",{"type":17,"tag":84,"props":1604,"children":1607},{"className":1605,"code":1606,"language":11,"meta":8},[87],"var x = 10;\ny = 20; \nconsole.log(window.x); // 10\nconsole.log(window.y); // 20\ndelete x;\ndelete y;\nconsole.log(window.x); // 10\nconsole.log(window.y); // undefined\n",[1608],{"type":17,"tag":91,"props":1609,"children":1610},{"__ignoreMap":8},[1611],{"type":26,"value":1606},{"type":17,"tag":29,"props":1613,"children":1614},{},[1615],{"type":26,"value":43},{"type":17,"tag":429,"props":1617,"children":1618},{},[],{"type":17,"tag":433,"props":1620,"children":1621},{"id":435},[1622],{"type":26,"value":435},{"type":17,"tag":439,"props":1624,"children":1625},{},[1626],{"type":17,"tag":217,"props":1627,"children":1628},{},[1629],{"type":17,"tag":64,"props":1630,"children":1631},{},[1632],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":1634},[1635,1636],{"id":1576,"depth":451,"text":1579},{"id":435,"depth":451,"text":435},"content:posts:4820d5e9-d25c-4a0e-b217-82873d3ea748.md","posts/4820d5e9-d25c-4a0e-b217-82873d3ea748.md",{"_path":1640,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":1641,"description":8,"tags":1642,"date":1643,"body":1644,"_type":454,"_id":2455,"_source":456,"_file":2456,"_extension":458},"/posts/eefbc7dd-a0f6-4078-97f5-9b6f26a483f1","자바스크립트 - 16. 프로토타입",[11],"2024-02-23T00:00:00.000Z",{"type":14,"children":1645,"toc":2438},[1646,1655,1660,1665,1669,1673,1678,1683,1692,1701,1705,1711,1716,1721,1726,1731,1735,1740,1744,1750,1755,1759,1765,1769,1778,1784,1793,1802,1810,1816,1821,1830,1842,1848,1853,1857,1874,1878,1884,1889,1898,1907,1911,1919,1925,1934,1937,1943,1952,1957,1961,1966,1970,1978,1984,1989,1993,1998,2007,2011,2016,2025,2029,2034,2088,2092,2098,2104,2113,2119,2128,2134,2143,2149,2158,2163,2168,2173,2177,2181,2187,2196,2200,2205,2210,2216,2222,2231,2236,2240,2249,2255,2264,2268,2277,2281,2286,2292,2297,2306,2311,2320,2324,2329,2338,2342,2347,2356,2361,2367,2372,2376,2381,2390,2395,2400,2404,2413,2417,2421,2424,2428],{"type":17,"tag":84,"props":1647,"children":1650},{"className":1648,"code":1649,"language":11,"meta":8},[87],"function Circle(radius) {\n    this.radius = radius;\n    this.getArea = function() {\n        return Math.PI * this.radius ** 2;\n    }\n}\n\nconst circle1 = new Circle(1);\nconst circle2 = new Circle(2);\nconsole.log(circle1.getArea());\nconsole.log(circle2.getArea());\n",[1651],{"type":17,"tag":91,"props":1652,"children":1653},{"__ignoreMap":8},[1654],{"type":26,"value":1649},{"type":17,"tag":29,"props":1656,"children":1657},{},[1658],{"type":26,"value":1659},"radius 프로퍼티 값은 일반적으로 인스턴스마다 다르다.",{"type":17,"tag":29,"props":1661,"children":1662},{},[1663],{"type":26,"value":1664},"하지만 getArea 메서드는 모든 인스턴스가 동일한 내용의 메서드를 사용하므로 단 하나만 생성하여 모든 인스턴스가 공유해서 사용하는것이 바람직하다. (메모리를 불필요하게 낭비)",{"type":17,"tag":110,"props":1666,"children":1668},{"src":1667},"/blog/images/95877e39-5048-462a-bdd4-3fbc13139708.png",[],{"type":17,"tag":29,"props":1670,"children":1671},{},[1672],{"type":26,"value":43},{"type":17,"tag":29,"props":1674,"children":1675},{},[1676],{"type":26,"value":1677},"상속을 통해 불필요한 중복을 제거해 보자. 자바스크립트는 프로토타입을 기반으로 상속을 구현한다.",{"type":17,"tag":29,"props":1679,"children":1680},{},[1681],{"type":26,"value":1682},"! 여기서 상속의 개념이 ‘물려 받는다’ 보다는, 자식 객체가 부모 객체의 프로토타입을 참조하여 사용할 수 있다임",{"type":17,"tag":84,"props":1684,"children":1687},{"className":1685,"code":1686,"language":11,"meta":8},[87],"function Circle(radius) {\n    this.radius = radius;\n}\n\nCircle.prototype.getArea = function() {\n    return Math.PI * this.radius ** 2;\n}\n\nconst cirlce1 = new Circle(1);\nconst cirlce2 = new Circle(2);\n\nconsole.log(circle1.getArea());\nconsole.log(circle2.getArea());\n",[1688],{"type":17,"tag":91,"props":1689,"children":1690},{"__ignoreMap":8},[1691],{"type":26,"value":1686},{"type":17,"tag":84,"props":1693,"children":1696},{"className":1694,"code":1695,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconsole.log(Person.prototype === me.__proto__); // true\n",[1697],{"type":17,"tag":91,"props":1698,"children":1699},{"__ignoreMap":8},[1700],{"type":26,"value":1695},{"type":17,"tag":110,"props":1702,"children":1704},{"src":1703},"/blog/images/c1e70ab0-08be-457c-9ee1-b6aca3fb47fd.png",[],{"type":17,"tag":72,"props":1706,"children":1708},{"id":1707},"프로토타입-객체",[1709],{"type":26,"value":1710},"프로토타입 객체",{"type":17,"tag":29,"props":1712,"children":1713},{},[1714],{"type":26,"value":1715},"모든 객체는 [[Prototype]]이라는 내부 슬롯을 가진다.",{"type":17,"tag":29,"props":1717,"children":1718},{},[1719],{"type":26,"value":1720},"객체가 생성될때 객체 생성 방식에 따라 프로토타입이 결정되고 [[Prototype]]에 저장된다.",{"type":17,"tag":29,"props":1722,"children":1723},{},[1724],{"type":26,"value":1725},"예를 들어, 객체 리터럴에 의해 생성된 객체의 프로토타입은 Object.prototype이고",{"type":17,"tag":29,"props":1727,"children":1728},{},[1729],{"type":26,"value":1730},"생성자 함수에 의해 생성된 객체의 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩되어 있는 객체다.",{"type":17,"tag":29,"props":1732,"children":1733},{},[1734],{"type":26,"value":43},{"type":17,"tag":29,"props":1736,"children":1737},{},[1738],{"type":26,"value":1739},"모든 객체는 하나의 프로토타입을 갖는다. 그리고 모든 프로토타입은 생성자 함수와 연결되어 있다.",{"type":17,"tag":29,"props":1741,"children":1742},{},[1743],{"type":26,"value":43},{"type":17,"tag":433,"props":1745,"children":1747},{"id":1746},"__proto__접근자-프로퍼티",[1748],{"type":26,"value":1749},"__proto__접근자 프로퍼티",{"type":17,"tag":29,"props":1751,"children":1752},{},[1753],{"type":26,"value":1754},"__proto__접근자 프로퍼티를 통해 간접적으로 [[Prototype]] 내부 슬롯의 값에 접근할 수 있다.",{"type":17,"tag":29,"props":1756,"children":1757},{},[1758],{"type":26,"value":43},{"type":17,"tag":1144,"props":1760,"children":1762},{"id":1761},"__proto__는-접근자-프로퍼티다",[1763],{"type":26,"value":1764},"__proto__는 접근자 프로퍼티다.",{"type":17,"tag":110,"props":1766,"children":1768},{"src":1767},"/blog/images/9186ec4f-7afc-4e9b-9ab9-b221b67b8f81.png",[],{"type":17,"tag":84,"props":1770,"children":1773},{"className":1771,"code":1772,"language":11,"meta":8},[87],"const obj = {};\nconst parent = { x: 1 };\nobj.__proto__; // get __proto__가 호출됨\nobj.__proto__ = parent; // set __proto__가 호출됨\n\nconsole.log(obj.x);\n",[1774],{"type":17,"tag":91,"props":1775,"children":1776},{"__ignoreMap":8},[1777],{"type":26,"value":1772},{"type":17,"tag":1144,"props":1779,"children":1781},{"id":1780},"__proto__접근자-프로퍼티는-상속을-통해-사용된다",[1782],{"type":26,"value":1783},"__proto__접근자 프로퍼티는 상속을 통해 사용된다.",{"type":17,"tag":84,"props":1785,"children":1788},{"className":1786,"code":1787,"language":11,"meta":8},[87],"const person = { name: 'lee' };\n\n// person 객체는 __proto__ 프로퍼티를 소유하지 않는다.\nconsole.log(person.hasOwnProperty('__proto__')); // false\n\n// __proto__ 프로퍼티는 모든 객체의 프로토타입 객체인 Object.prototype의 접근자 프로퍼티다.\nconsole.log(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__'));\n// {get: f, set: f, ....}\n\n// 모든 객체는 Object.prototype의 접근자 프로퍼티 __proto__를 상속받아 사용할 수 있다.\nconsole.log({}.__proto__ === Object.prototype); // true\n",[1789],{"type":17,"tag":91,"props":1790,"children":1791},{"__ignoreMap":8},[1792],{"type":26,"value":1787},{"type":17,"tag":84,"props":1794,"children":1797},{"className":1795,"code":1796,"language":11,"meta":8},[87],"const parent = { x: 1 };\nfunction Person() {}\nconsole.log(parent.__proto__ === Object.prototype); // true\nconsole.log(Person.__proto__ === Function.prototype); // true\nconsole.log(Function.__proto__ === Function.prototype); // true\nconsole.log(Function.prototype.__proto__ === Object.prototype); // true\n",[1798],{"type":17,"tag":91,"props":1799,"children":1800},{"__ignoreMap":8},[1801],{"type":26,"value":1796},{"type":17,"tag":1530,"props":1803,"children":1804},{},[1805],{"type":17,"tag":29,"props":1806,"children":1807},{},[1808],{"type":26,"value":1809},"프로토타입 체인의 종점, 즉 프로토타입 체인의 최상위 객체는 Object.prototype이다.",{"type":17,"tag":1144,"props":1811,"children":1813},{"id":1812},"__proto__접근자-프로퍼티를-통해-프로토타입에-접근하는-이유",[1814],{"type":26,"value":1815},"__proto__접근자 프로퍼티를 통해 프로토타입에 접근하는 이유",{"type":17,"tag":29,"props":1817,"children":1818},{},[1819],{"type":26,"value":1820},"[[Prototype]] 내부 슬롯의 값, 즉 프로토타입에 접근하기 위해 접근자 프로퍼티를 사용하는 이유는 상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위해서다.",{"type":17,"tag":84,"props":1822,"children":1825},{"className":1823,"code":1824,"language":11,"meta":8},[87],"const parent = {};\nconst child = {};\n\nchild.__proto__ = parent;\nparent.__proto__ child; // TypeError: Cycle __proto__ value\n",[1826],{"type":17,"tag":91,"props":1827,"children":1828},{"__ignoreMap":8},[1829],{"type":26,"value":1824},{"type":17,"tag":29,"props":1831,"children":1832},{},[1833,1835,1840],{"type":26,"value":1834},"아무런 체크 없이 무조건적으로 프로토타입을 교체할 수 없도록 ",{"type":17,"tag":64,"props":1836,"children":1837},{},[1838],{"type":26,"value":1839},"proto",{"type":26,"value":1841}," 접근자 프로퍼티를 통해 프로토타입에 접근하고 교체하도록 구현되어 있다.",{"type":17,"tag":1144,"props":1843,"children":1845},{"id":1844},"__proto__접근자-프로퍼티를-코드-내에서-직접-사용하는-것은-권장하지-않는다",[1846],{"type":26,"value":1847},"__proto__접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장하지 않는다.",{"type":17,"tag":29,"props":1849,"children":1850},{},[1851],{"type":26,"value":1852},"Object.getPrototypeOf나 Object.setPrototypeOf 사용을 권장한다.",{"type":17,"tag":29,"props":1854,"children":1855},{},[1856],{"type":26,"value":43},{"type":17,"tag":1858,"props":1859,"children":1862},"aside",{"emogi":1860,"color":1861},"❗","purple",[1863,1865,1872],{"type":26,"value":1864},"헐 몰랐어… ",{"type":17,"tag":91,"props":1866,"children":1867},{},[1868],{"type":17,"tag":64,"props":1869,"children":1870},{},[1871],{"type":26,"value":11},{"type":26,"value":1873},"에서 prototype하고 [[prototype]]은 다른 개념이구나..\n아 ~ 생성자 함수에 의해 생성된 객체들은 [[Prototype]]을 통해 생성자 함수 prototype에 접근 가능하고…\n아~ person.greet()을 하면 person에는 greet 함수가 없으니까 프로토타입 체이닝을 통해 생성한 부모 함수로 가서 찾는거구나…",{"type":17,"tag":29,"props":1875,"children":1876},{},[1877],{"type":26,"value":43},{"type":17,"tag":433,"props":1879,"children":1881},{"id":1880},"함수-객체의-prototype-프로퍼티",[1882],{"type":26,"value":1883},"함수 객체의 prototype 프로퍼티",{"type":17,"tag":29,"props":1885,"children":1886},{},[1887],{"type":26,"value":1888},"함수 객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 프로토타입을 가리킨다.",{"type":17,"tag":84,"props":1890,"children":1893},{"className":1891,"code":1892,"language":11,"meta":8},[87],"// 함수 객체는 prototype 프로퍼티를 소유한다.\n(function() {}).hasOwnProperty('prototype'); // true\n// 일반 객체는 prototype 프로퍼티를 소유하지 않는다.\n({}).hasOwnProperty('prototype'); // false\n",[1894],{"type":17,"tag":91,"props":1895,"children":1896},{"__ignoreMap":8},[1897],{"type":26,"value":1892},{"type":17,"tag":84,"props":1899,"children":1902},{"className":1900,"code":1901,"language":11,"meta":8},[87],"// 화살표 함수는 prototype 프로퍼티를 소유하지 않음\nconst Person = name => {\n    this.name = name;\n}\n\nconsole.log(Person.hasOwnProperty('prototype')); // false\nconsole.log(Person.prototype); // undefined\n\nconst obj = {\n    foo() {}\n}\n\nconsole.log(obj.foo.hasOwnProperty('prototype')); // false\nconsole.log(obj.foo.prototype); // undefined\n",[1903],{"type":17,"tag":91,"props":1904,"children":1905},{"__ignoreMap":8},[1906],{"type":26,"value":1901},{"type":17,"tag":110,"props":1908,"children":1910},{"src":1909},"/blog/images/ea5d217a-839f-489b-800a-6099299097a8.png",[],{"type":17,"tag":84,"props":1912,"children":1914},{"className":1913,"code":1695,"language":11,"meta":8},[87],[1915],{"type":17,"tag":91,"props":1916,"children":1917},{"__ignoreMap":8},[1918],{"type":26,"value":1695},{"type":17,"tag":433,"props":1920,"children":1922},{"id":1921},"프로토타입의-constructor-프로퍼티와-생성자-함수",[1923],{"type":26,"value":1924},"프로토타입의 constructor 프로퍼티와 생성자 함수",{"type":17,"tag":84,"props":1926,"children":1929},{"className":1927,"code":1928,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\nconst me = new Person('Lee');\n\nconsole.log(me.constructor === Person);\n// me 나를 생성한 함수는 Person이다.\n\nconsole.log(Person.prototype.constructor);\n// Person에 prototype을 생성한 함수는 Person이다.\n",[1930],{"type":17,"tag":91,"props":1931,"children":1932},{"__ignoreMap":8},[1933],{"type":26,"value":1928},{"type":17,"tag":429,"props":1935,"children":1936},{},[],{"type":17,"tag":72,"props":1938,"children":1940},{"id":1939},"리터럴-표기법에-의해-생성된-객체와-생성자-함수와-프로토타입",[1941],{"type":26,"value":1942},"리터럴 표기법에 의해 생성된 객체와 생성자 함수와 프로토타입",{"type":17,"tag":84,"props":1944,"children":1947},{"className":1945,"code":1946,"language":11,"meta":8},[87],"const obj = {};\nconst add = function (a,b) { return a + b };\nconst arr = [1, 2, 3]\nconst regexp = /is/ig;\n",[1948],{"type":17,"tag":91,"props":1949,"children":1950},{"__ignoreMap":8},[1951],{"type":26,"value":1946},{"type":17,"tag":29,"props":1953,"children":1954},{},[1955],{"type":26,"value":1956},"리터럴 표기법에 의해 생성된 객체는 생성자 함수에 의해 생성된 객체는 아니다. 하지만 큰 틀에서 생각해 보면 리터럴 표기법으로 생성한 객체도 생성자 함수로 생성한 객체와 본질적인 면에서는 큰 차이는 없다.",{"type":17,"tag":29,"props":1958,"children":1959},{},[1960],{"type":26,"value":43},{"type":17,"tag":29,"props":1962,"children":1963},{},[1964],{"type":26,"value":1965},"객체 리터럴에 의해 생성된 객체와 Object 생성자 함수에 의해 생성한 객체는 생성 과정에서 미묘한 차이가 있지만 결국 객체로서 동일한 특성을 갖는다. 함수 리터럴에 의해 생성한 함수와 Function 생성자 함수에 의해 생성한 함수는 생성 과정과 스코프, 클로저 등의 차이가 있지만 결국 함수로서 동일한 특성을 갖는다.",{"type":17,"tag":29,"props":1967,"children":1968},{},[1969],{"type":26,"value":43},{"type":17,"tag":29,"props":1971,"children":1972},{},[1973],{"type":17,"tag":64,"props":1974,"children":1975},{},[1976],{"type":26,"value":1977},"객체 리터럴이 평가 될때는 추상 연산 OrdinaryObjectCreate가 호출 되는데 자세한건 교재에",{"type":17,"tag":72,"props":1979,"children":1981},{"id":1980},"프로토타입의-생성-시점",[1982],{"type":26,"value":1983},"프로토타입의 생성 시점",{"type":17,"tag":29,"props":1985,"children":1986},{},[1987],{"type":26,"value":1988},"프로토타입은 생서자 함수가 생성되는 시점에 더불어 생성된다.",{"type":17,"tag":29,"props":1990,"children":1991},{},[1992],{"type":26,"value":43},{"type":17,"tag":29,"props":1994,"children":1995},{},[1996],{"type":26,"value":1997},"생성자 함수로서 호출할 수 있는 함수, 즉 constructor는 함수 정의가 평가되어 함수 객체를 생성하는 시점에 프로토타입도 더불어 생성된다.",{"type":17,"tag":84,"props":1999,"children":2002},{"className":2000,"code":2001,"language":11,"meta":8},[87],"console.log(Person.prototype); // constructor: f\n\nfunction Person(name) {\n    this.name = name;\n}\n",[2003],{"type":17,"tag":91,"props":2004,"children":2005},{"__ignoreMap":8},[2006],{"type":26,"value":2001},{"type":17,"tag":29,"props":2008,"children":2009},{},[2010],{"type":26,"value":43},{"type":17,"tag":29,"props":2012,"children":2013},{},[2014],{"type":26,"value":2015},"생성자 함수로서 호출할 수 없는 함수, 즉 non-constructor는 프로토타입이 생성되지 않는다.",{"type":17,"tag":84,"props":2017,"children":2020},{"className":2018,"code":2019,"language":11,"meta":8},[87],"const Person = name => {\n    this.name = name;\n}\n\nconsole.log(Person.prototype); // undefined\n",[2021],{"type":17,"tag":91,"props":2022,"children":2023},{"__ignoreMap":8},[2024],{"type":26,"value":2019},{"type":17,"tag":29,"props":2026,"children":2027},{},[2028],{"type":26,"value":43},{"type":17,"tag":29,"props":2030,"children":2031},{},[2032],{"type":26,"value":2033},"함수 선언문은 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행된다고 했다. 평가되어 함수 객체가 될때 이때 프로토타입도 더불어 생성된다. 생성된 프로토타입은 생성자 함수의 prototype 프로퍼티에 바인딩 된다.",{"type":17,"tag":18,"props":2035,"children":2036},{},[2037,2042,2044],{"type":17,"tag":22,"props":2038,"children":2039},{},[2040],{"type":26,"value":2041},"chatgpt",{"type":26,"value":2043},"\n1. **Person 함수 객체 생성**: 자바스크립트 엔진은 **`Person`** 함수 선언을 평가하면서 **`Person`**이라는 이름의 함수 객체를 생성합니다.\n2. **Person.prototype 객체 생성**: 동시에 **`Person.prototype`** 객체도 생성됩니다. 이 객체는 기본적으로 **`constructor`** 프로퍼티를 가지고 있으며, 이 **`constructor`** 프로퍼티는 **`Person`** 함수 객체를 가리킵니다.\n3. **Person.prototype의 상속**: **`Person.prototype`** 객체는 **`Object.prototype`**을 상속합니다. 다시 말해, **`Person.prototype`**의 [[Prototype]] 내부 슬롯(또는 **`__proto__`** 프로퍼티)은 **`Object.prototype`** 객체를 가리킵니다. 이는 **`Person.prototype`**이 **`Object.prototype`**의 메소드와 프로퍼티에 접근할 수 있음을 의미합니다.\n4. **인스턴스 생성**: **`new Person('Lee')`**와 같이 **`Person`** 함수를 생성자로 사용하여 인스턴스를 생성할 때, 이 인스턴스는 **`Person.prototype`**을 상속받습니다. 즉, 생성된 객체의 [[Prototype]] 내부 슬롯(또는 **`__proto__`** 프로퍼티)는 **`Person.prototype`** 객체를 가리킵니다.\n",{"type":17,"tag":29,"props":2045,"children":2046},{},[2047,2049,2057,2059,2067,2069,2076,2078,2086],{"type":26,"value":2048},"따라서, ",{"type":17,"tag":91,"props":2050,"children":2051},{},[2052],{"type":17,"tag":64,"props":2053,"children":2054},{},[2055],{"type":26,"value":2056},"Person",{"type":26,"value":2058}," 함수 객체와 ",{"type":17,"tag":91,"props":2060,"children":2061},{},[2062],{"type":17,"tag":64,"props":2063,"children":2064},{},[2065],{"type":26,"value":2066},"Person.prototype",{"type":26,"value":2068}," 객체는 서로 다른 객체이며, ",{"type":17,"tag":91,"props":2070,"children":2071},{},[2072],{"type":17,"tag":64,"props":2073,"children":2074},{},[2075],{"type":26,"value":2066},{"type":26,"value":2077},"은 ",{"type":17,"tag":91,"props":2079,"children":2080},{},[2081],{"type":17,"tag":64,"props":2082,"children":2083},{},[2084],{"type":26,"value":2085},"Object.prototype",{"type":26,"value":2087},"을 상속받는 것이 맞습니다. 이러한 구조는 자바스크립트의 프로토타입 체인을 형성하며, 이 체인을 통해 객체는 상속된 프로퍼티와 메소드에 접근할 수 있습니다.",{"type":17,"tag":29,"props":2089,"children":2090},{},[2091],{"type":26,"value":43},{"type":17,"tag":72,"props":2093,"children":2095},{"id":2094},"객체-생성-방식과-프로토타입의-결정",[2096],{"type":26,"value":2097},"객체 생성 방식과 프로토타입의 결정",{"type":17,"tag":433,"props":2099,"children":2101},{"id":2100},"객체-리터럴에-의해-생성된-객체의-프로토타입",[2102],{"type":26,"value":2103},"객체 리터럴에 의해 생성된 객체의 프로토타입",{"type":17,"tag":84,"props":2105,"children":2108},{"className":2106,"code":2107,"language":11,"meta":8},[87],"const obj = { x: 1 };\n\n// obj에는 constructor와 hasOwnProperty가 없는데 어떻게 동작하는걸까?\n// 그 이유는 obj는 Object.property 객체를 상속 받았기 때문이다.\nconsole.log(obj.constructor); // Object\nconsole.log(obj.hasOwnProperty('x')); \n",[2109],{"type":17,"tag":91,"props":2110,"children":2111},{"__ignoreMap":8},[2112],{"type":26,"value":2107},{"type":17,"tag":433,"props":2114,"children":2116},{"id":2115},"object-생성자-함수에-의해-생성된-객체의-프로토타입",[2117],{"type":26,"value":2118},"Object 생성자 함수에 의해 생성된 객체의 프로토타입",{"type":17,"tag":84,"props":2120,"children":2123},{"className":2121,"code":2122,"language":11,"meta":8},[87],"const obj = new Object();\nobj.x = 1;\n\n// obj에는 constructor와 hasOwnProperty가 없는데 어떻게 동작하는걸까?\n// 그 이유는 obj는 Object.property 객체를 상속 받았기 때문이다.\nconsole.log(obj.constructor); // Object\nconsole.log(obj.hasOwnProperty('x')); \n",[2124],{"type":17,"tag":91,"props":2125,"children":2126},{"__ignoreMap":8},[2127],{"type":26,"value":2122},{"type":17,"tag":433,"props":2129,"children":2131},{"id":2130},"생성자-함수에-의해-생성된-객체의-프로토타입",[2132],{"type":26,"value":2133},"생성자 함수에 의해 생성된 객체의 프로토타입",{"type":17,"tag":84,"props":2135,"children":2138},{"className":2136,"code":2137,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    console.log(this.name);\n}\n\nconst me = new Person('Lee');\nconst you = new Person('Kim');\n\nme.sayHell();\nyou.sayHell();\n",[2139],{"type":17,"tag":91,"props":2140,"children":2141},{"__ignoreMap":8},[2142],{"type":26,"value":2137},{"type":17,"tag":72,"props":2144,"children":2146},{"id":2145},"프로토타입-체인",[2147],{"type":26,"value":2148},"프로토타입 체인",{"type":17,"tag":84,"props":2150,"children":2153},{"className":2151,"code":2152,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    console.log(this.name);\n}\n\nconst me = new Person('Lee');\nconst you = new Person('Kim');\n\n// hasOwnProperty는 Object.prototype의 메서드다.\n// me 객체는 프로토타입 체인을 따라 hasOwnProperty 메서드를 검색하여 사용한다.\nconsole.log(me.hasOwnProperty('name'));\n",[2154],{"type":17,"tag":91,"props":2155,"children":2156},{"__ignoreMap":8},[2157],{"type":26,"value":2152},{"type":17,"tag":29,"props":2159,"children":2160},{},[2161],{"type":26,"value":2162},"me의 [[prototype]]은 Person.prototype이다.",{"type":17,"tag":29,"props":2164,"children":2165},{},[2166],{"type":26,"value":2167},"Person.prototype의 [[prototype]]은 Object.prototype이다. (hasOwnProperty를 사용할수 있는 이유)",{"type":17,"tag":29,"props":2169,"children":2170},{},[2171],{"type":26,"value":2172},"Person의 [[prototype]]은 Function.prototype이다.",{"type":17,"tag":110,"props":2174,"children":2176},{"src":2175},"/blog/images/f792f763-bff8-4b4b-b35f-03b2d748a66c.png",[],{"type":17,"tag":29,"props":2178,"children":2179},{},[2180],{"type":26,"value":43},{"type":17,"tag":72,"props":2182,"children":2184},{"id":2183},"오버라이딩과-프로퍼티-섀도잉",[2185],{"type":26,"value":2186},"오버라이딩과 프로퍼티 섀도잉",{"type":17,"tag":84,"props":2188,"children":2191},{"className":2189,"code":2190,"language":11,"meta":8},[87],"const Person = (function() {\n    // 생성자 함수\n    function Person(name) {\n        this.name = name;\n    }\n    \n    // 프로토타입 메서드\n    Person.prototype.sayHello = function() {\n        console.log(`Hi! My name is ${this.name}`);\n    }\n    \n    // 생성자 함수를 반환\n    return Person;\n}());\n\nconst me = new Person(\"Lee\");\n\n// 인스턴스 메서드\nme.sayHello = function () {\n    console.log(`Hey! My name is ${this.name}`);\n}\n\n// 인스턴스 메서드가 호출된다. 프로토타입 메서드는 인스턴스 메서드에 의해 가려진다.\nme.sayHello(); // Hey! ...\n",[2192],{"type":17,"tag":91,"props":2193,"children":2194},{"__ignoreMap":8},[2195],{"type":26,"value":2190},{"type":17,"tag":29,"props":2197,"children":2198},{},[2199],{"type":26,"value":43},{"type":17,"tag":29,"props":2201,"children":2202},{},[2203],{"type":26,"value":2204},"프로토타입이 소유한 프로퍼티(메서드 포함)를 프로토타입 프로퍼티, 인스턴스가 소유한 프로퍼티를 인스턴스 프로퍼티라고 부른다.",{"type":17,"tag":29,"props":2206,"children":2207},{},[2208],{"type":26,"value":2209},"프로토타입 프로퍼티와 같은 이름의 프로퍼티를 인스턴스에 추가하면 프로토타입 체인을 따라 프로토타입 프로퍼티를 검색하여 프로토타입 프로퍼티를 덮어쓰는 것이 아니라 인스턴스 프로퍼티로 추가한다. 이때 인스턴스 메서드 sayHello는 프로토타입 메서드 sayHello를 오버라이딩했고 프로토타입 메서드 sayHello는 가려진다. 이처럼 상속 관계에 의해 프로퍼티가 가려지는 현상을 프로퍼티 섀도잉이라 한다.",{"type":17,"tag":72,"props":2211,"children":2213},{"id":2212},"프로토타입-교체",[2214],{"type":26,"value":2215},"프로토타입 교체",{"type":17,"tag":433,"props":2217,"children":2219},{"id":2218},"생성자-함수에-의한-프로토타입의-교체",[2220],{"type":26,"value":2221},"생성자 함수에 의한 프로토타입의 교체",{"type":17,"tag":84,"props":2223,"children":2226},{"className":2224,"code":2225,"language":11,"meta":8},[87],"const Person = (function() {\n    function Person(name) {\n        this.name = name;\n    }\n    \n    // 1. 생성자 함수의 prototype 프로퍼티를 통해 프로토타입을 교채\n    Person.prototype = {\n        sayHello() {\n            console.log(`Hi! My name is ${this.name}`);\n        }\n    }\n    \n    return Person;\n}());\n\nconst me = new Person('Lee');\n\n// 프로토타입을 교체하면 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴된다.\nconsole.log(me.constructor === Person); // false\n// 프로토타입 체인을 따라 Object.prototype의 constructor 프로퍼티가 검색된다.\nconsole.log(me.constructor === Object); // true\n",[2227],{"type":17,"tag":91,"props":2228,"children":2229},{"__ignoreMap":8},[2230],{"type":26,"value":2225},{"type":17,"tag":29,"props":2232,"children":2233},{},[2234],{"type":26,"value":2235},"Person.prototype을 객체 리터럴을 할당. 이는 Person 생성자 함수가 생성할 객체의 프로토타입을 객체 리터럴로 교체한 것.",{"type":17,"tag":110,"props":2237,"children":2239},{"src":2238},"/blog/images/5843e003-91cb-4fef-85ea-574656addbd2.png",[],{"type":17,"tag":84,"props":2241,"children":2244},{"className":2242,"code":2243,"language":11,"meta":8},[87],"const Person = (function() {\n    function Person(name) {\n        this.name = name;\n    }\n    \n    Person.prototype = {\n        constructor: Person,\n        sayHello() {\n            console.log(`Hi! My name is ${this.name}`);\n        }\n    }\n    \n    return Person;\n}());\n\nconst me = new Person('Lee');\n\nconsole.log(me.constructor === Person); // true\nconsole.log(me.constructor === Object); // false\n",[2245],{"type":17,"tag":91,"props":2246,"children":2247},{"__ignoreMap":8},[2248],{"type":26,"value":2243},{"type":17,"tag":433,"props":2250,"children":2252},{"id":2251},"인스턴스에-의한-프로토타입의-교체",[2253],{"type":26,"value":2254},"인스턴스에 의한 프로토타입의 교체",{"type":17,"tag":84,"props":2256,"children":2259},{"className":2257,"code":2258,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {\n    sayHello() {\n        console.log(`Hi! My name is ${this.name}`);\n    }\n}\n\n// me 객체의 프로토타입을 parent 객체로 교체한다.\nObject.setPrototypeOf(me, parent);\n// me.__proto__ = parent; 와 동일하게 동작\n\nme.sayHello();\n\nconsole.log(me.constructor === Person); // false\nconsole.log(me.constructor === Object); // true\n",[2260],{"type":17,"tag":91,"props":2261,"children":2262},{"__ignoreMap":8},[2263],{"type":26,"value":2258},{"type":17,"tag":110,"props":2265,"children":2267},{"src":2266},"/blog/images/21b81003-198a-4afd-a0fe-0a1be10bed35.png",[],{"type":17,"tag":84,"props":2269,"children":2272},{"className":2270,"code":2271,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {\n    constructor: Person,\n    sayHello() {\n        console.log(`Hi! My name is ${this.name}`);\n    }\n}\n\nPerson.prototype = parent;\n\nObject.setPrototypeOf(me, parent);\n\nme.sayHello();\n\nconsole.log(me.constructor === Person); // true\nconsole.log(me.constructor === Object); // false\n\nconsole.log(Person.prototype === Object.getPrototypeOf(me)); // true\n",[2273],{"type":17,"tag":91,"props":2274,"children":2275},{"__ignoreMap":8},[2276],{"type":26,"value":2271},{"type":17,"tag":29,"props":2278,"children":2279},{},[2280],{"type":26,"value":43},{"type":17,"tag":29,"props":2282,"children":2283},{},[2284],{"type":26,"value":2285},"결론: 프로토타입은 직접 교체하지 않는 것이 좋다. 상속 관계를 인위적으로 설정하려면 “직접 상속”에서 살펴볼 Object.create가 더 편리하고 안전하다. 또한 ES6에서 도입된 클래스를 사용하면 간편하고 직관적으로 상속관계를 구현할 수 있다.",{"type":17,"tag":72,"props":2287,"children":2289},{"id":2288},"instanceof-연산자",[2290],{"type":26,"value":2291},"instanceof 연산자",{"type":17,"tag":29,"props":2293,"children":2294},{},[2295],{"type":26,"value":2296},"우변의 생성자 함수의 prototype에 바인딩된 객체가 좌변의 객체의 프로토타입 체인 상에 존재하면 true로 평가되고, 그렇지 않은 경우에는 false로 평가된다.",{"type":17,"tag":84,"props":2298,"children":2301},{"className":2299,"code":2300,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconsole.log(me instanceof Person); // true\nconsole.log(me instanceof Object); // true\n",[2302],{"type":17,"tag":91,"props":2303,"children":2304},{"__ignoreMap":8},[2305],{"type":26,"value":2300},{"type":17,"tag":29,"props":2307,"children":2308},{},[2309],{"type":26,"value":2310},"instanceof 연산자가 어떻게 동작하는지 이해하기 위해 프로토타입을 교체해 보자",{"type":17,"tag":84,"props":2312,"children":2315},{"className":2313,"code":2314,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {};\n\nObject.setPrototypeOf(me, parent);\n\n// Person.prototype이 me 객체의 프로토타입 체인 상에 존재하지 않기 때문에 false로 평가\nconsole.log(me instanceof Person); // false\n// Object.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가\nconsole.log(me instanceof Object); // true\n",[2316],{"type":17,"tag":91,"props":2317,"children":2318},{"__ignoreMap":8},[2319],{"type":26,"value":2314},{"type":17,"tag":29,"props":2321,"children":2322},{},[2323],{"type":26,"value":43},{"type":17,"tag":29,"props":2325,"children":2326},{},[2327],{"type":26,"value":2328},"프로토타입으로 교체한 parent 객체를 Person 생성자 함수의 prototype 프로퍼티에 바인딩하면 me instanceof Person은 true로 평가될 것이다.",{"type":17,"tag":84,"props":2330,"children":2333},{"className":2331,"code":2332,"language":11,"meta":8},[87],"function Person(name) {\n    this.name = name;\n}\n\nconst me = new Person('Lee');\n\nconst parent = {};\n\nObject.setPrototypeOf(me, parent);\n\nPerson.prototype = parent;\n// Person.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가\nconsole.log(me instanceof Person); // true\n// Object.prototype이 me 객체의 프로토타입 체인 상에 존재하므로 true로 평가\nconsole.log(me instanceof Object); // true\n",[2334],{"type":17,"tag":91,"props":2335,"children":2336},{"__ignoreMap":8},[2337],{"type":26,"value":2332},{"type":17,"tag":29,"props":2339,"children":2340},{},[2341],{"type":26,"value":43},{"type":17,"tag":29,"props":2343,"children":2344},{},[2345],{"type":26,"value":2346},"생성자 함수에 의해 프로토타입이 교체되어 constructor 프로퍼티와 생성자 함수 간의 연결이 파괴되어도 생성자 함수의 prototype 프로퍼티와 프로토타입 간의 연결은 파괴되지 않으므로 instanceof는 아무런 영향을 받지 않는다.",{"type":17,"tag":84,"props":2348,"children":2351},{"className":2349,"code":2350,"language":11,"meta":8},[87],"const Person = (function() {\n    function Person(name) {\n        this.name = name;\n    }\n    \n    Person.prototype = {\n        sayHello() {\n            console.log(`Hi! My name is ${this.name}`);\n        }\n    }\n    \n    return Person;\n}());\n\nconst me = new Person('Lee');\n\n// constructor 프로퍼티와 생성자 함수 간의 연결이 파괴되어도 instanceof는 아무런 영향을 받지 않는다.\nconsole.log(me.constructor === Person); // false\n\nconsole.log(me instanceof Person); // true\nconsole.log(me instanceof Object); // true\n",[2352],{"type":17,"tag":91,"props":2353,"children":2354},{"__ignoreMap":8},[2355],{"type":26,"value":2350},{"type":17,"tag":72,"props":2357,"children":2359},{"id":2358},"직접상속",[2360],{"type":26,"value":2358},{"type":17,"tag":433,"props":2362,"children":2364},{"id":2363},"objectcreate에-의한-직접-상속",[2365],{"type":26,"value":2366},"Object.create에 의한 직접 상속",{"type":17,"tag":29,"props":2368,"children":2369},{},[2370],{"type":26,"value":2371},"Object.create 메서드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다.",{"type":17,"tag":29,"props":2373,"children":2374},{},[2375],{"type":26,"value":43},{"type":17,"tag":29,"props":2377,"children":2378},{},[2379],{"type":26,"value":2380},"Object.create 단계별 동작",{"type":17,"tag":84,"props":2382,"children":2385},{"className":2383,"code":2384,"language":11,"meta":8},[87],"// obj의 프로토타입은 null이다.\nlet obj = Object.create(null);\n// Object의 메서드들을 사용하지 못한다.\nconsole.log(obj.toString()); // TypeError\n\n// obj -> Object.prototype -> null\n// obj = {} 동일\nobj = Object.create(Object.prototype);\n\nconst myProto = { x: 10 };\n\n// obj -> myProto -> Object.prototype -> null\nobj = Object.create(myProto);\n\nfunction Person(name) {\n    this.name = name;\n}\n// obj -> Person.prototype -> Object.prototype -> null\nobj = Object.create(Person.prototype);\n",[2386],{"type":17,"tag":91,"props":2387,"children":2388},{"__ignoreMap":8},[2389],{"type":26,"value":2384},{"type":17,"tag":29,"props":2391,"children":2392},{},[2393],{"type":26,"value":2394},"위 코드는 과정을 보여주려고 null 부터 넣은거지 그냥 Object.create(myProto) 혹은 Object.create(Person) 바로 사용하면 됨",{"type":17,"tag":29,"props":2396,"children":2397},{},[2398],{"type":26,"value":2399},"프로토타입 체인은 종점은 null이다.",{"type":17,"tag":29,"props":2401,"children":2402},{},[2403],{"type":26,"value":43},{"type":17,"tag":84,"props":2405,"children":2408},{"className":2406,"code":2407,"language":11,"meta":8},[87],"const obj = Object.create(null);\nobj.a = 1;\n\nconsole.log(obj.a); // 1\nconsole.log(obj.hasOwnProperty('a')); // TypeError\n\nconsole.log(Object.hasOwnProperty(obj, 'a')); // true\n",[2409],{"type":17,"tag":91,"props":2410,"children":2411},{"__ignoreMap":8},[2412],{"type":26,"value":2407},{"type":17,"tag":29,"props":2414,"children":2415},{},[2416],{"type":26,"value":43},{"type":17,"tag":29,"props":2418,"children":2419},{},[2420],{"type":26,"value":43},{"type":17,"tag":429,"props":2422,"children":2423},{},[],{"type":17,"tag":433,"props":2425,"children":2426},{"id":435},[2427],{"type":26,"value":435},{"type":17,"tag":439,"props":2429,"children":2430},{},[2431],{"type":17,"tag":217,"props":2432,"children":2433},{},[2434],{"type":17,"tag":64,"props":2435,"children":2436},{},[2437],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":2439},[2440,2446,2447,2448,2449,2450,2451,2452,2453,2454],{"id":1746,"depth":451,"text":1749,"children":2441},[2442,2443,2444,2445],{"id":1761,"depth":1405,"text":1764},{"id":1780,"depth":1405,"text":1783},{"id":1812,"depth":1405,"text":1815},{"id":1844,"depth":1405,"text":1847},{"id":1880,"depth":451,"text":1883},{"id":1921,"depth":451,"text":1924},{"id":2100,"depth":451,"text":2103},{"id":2115,"depth":451,"text":2118},{"id":2130,"depth":451,"text":2133},{"id":2218,"depth":451,"text":2221},{"id":2251,"depth":451,"text":2254},{"id":2363,"depth":451,"text":2366},{"id":435,"depth":451,"text":435},"content:posts:eefbc7dd-a0f6-4078-97f5-9b6f26a483f1.md","posts/eefbc7dd-a0f6-4078-97f5-9b6f26a483f1.md",{"_path":2458,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":2459,"description":2460,"tags":2461,"date":2462,"body":2463,"_type":454,"_id":2649,"_source":456,"_file":2650,"_extension":458},"/posts/395ca83a-7b04-4f59-962a-1bc8cc05d1aa","자바스크립트 - 15. 함수와 일급 객체","일급 객체 조건",[11],"2024-02-22T00:00:00.000Z",{"type":14,"children":2464,"toc":2638},[2465,2469,2492,2496,2505,2509,2514,2518,2524,2529,2535,2540,2549,2555,2560,2566,2571,2577,2582,2587,2591,2596,2602,2607,2612,2617,2621,2624,2628],{"type":17,"tag":29,"props":2466,"children":2467},{},[2468],{"type":26,"value":2460},{"type":17,"tag":213,"props":2470,"children":2471},{},[2472,2477,2482,2487],{"type":17,"tag":217,"props":2473,"children":2474},{},[2475],{"type":26,"value":2476},"무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.",{"type":17,"tag":217,"props":2478,"children":2479},{},[2480],{"type":26,"value":2481},"변수나 자료구조(객체, 배열 등)에 저장할 수 있다.",{"type":17,"tag":217,"props":2483,"children":2484},{},[2485],{"type":26,"value":2486},"함수의 매개변수에 전달할 수 있다.",{"type":17,"tag":217,"props":2488,"children":2489},{},[2490],{"type":26,"value":2491},"함수의 반환값으로 사용할 수 있다.",{"type":17,"tag":29,"props":2493,"children":2494},{},[2495],{"type":26,"value":43},{"type":17,"tag":84,"props":2497,"children":2500},{"className":2498,"code":2499,"language":11,"meta":8},[87],"// 1. 함수는 무명의 리터럴로 생성할 수 있다.\n// 2. 함수는 변수에 저장할 수 있다.\n// 런타임(할당 단계)에 함수 리터럴이 평가되어 함수 객체가 생성되고 변수에 할당된다.\nconst increase = function (num) {\n    return ++num;\n}\n\nconst decrease = function (num) {\n    return --num;\n}\n\n// 2. 함수는 객체에 저장할 수 있다.\nconst predicates = {increase, decrease};\n\n// 3. 함수의 매개변수에 전달할 수 있다.\n// 4. 함수의 반환값으로 사용할 수 있다.\nfunction makeCount(predicate) {\n    let num = 0;\n    return funtion () {\n        num = predicate(num);\n        return num;\n    }\n}\n\n// 3. 함수는 매개변수에게 함수를 전달할 수 있따.\nconst increaser = makeCounter(predicates.increase);\nincreaser();\nincreaser();\n",[2501],{"type":17,"tag":91,"props":2502,"children":2503},{"__ignoreMap":8},[2504],{"type":26,"value":2499},{"type":17,"tag":29,"props":2506,"children":2507},{},[2508],{"type":26,"value":43},{"type":17,"tag":29,"props":2510,"children":2511},{},[2512],{"type":26,"value":2513},"함수가 일급 객체라는 것은 함수를 객체와 동일하게 사용할 수 있다는 의미다. 객체는 값이므로 함수는 값과 동일하게 취급할 수 있다. 따라서 함수는 값을 사용할 수 있는 곳이라면 어디서든지 리터럴로 정의할 수 있으며 런타임에 함수 객체로 평가된다.",{"type":17,"tag":29,"props":2515,"children":2516},{},[2517],{"type":26,"value":43},{"type":17,"tag":433,"props":2519,"children":2521},{"id":2520},"함수-객체의-프로퍼티",[2522],{"type":26,"value":2523},"함수 객체의 프로퍼티",{"type":17,"tag":29,"props":2525,"children":2526},{},[2527],{"type":26,"value":2528},"함수는 객체다. 따라서 함수도 프로퍼티를 가질 수 있다.",{"type":17,"tag":1144,"props":2530,"children":2532},{"id":2531},"arguments-프로퍼티",[2533],{"type":26,"value":2534},"arguments 프로퍼티",{"type":17,"tag":29,"props":2536,"children":2537},{},[2538],{"type":26,"value":2539},"매개변수 개수를 확정할 수 없는 가변 인자 함수를 구현할 때 유용",{"type":17,"tag":84,"props":2541,"children":2544},{"className":2542,"code":2543,"language":11,"meta":8},[87],"function sum() {\n    const array = Array.prototype.slice.call(arguments);\n    ...\n}\n\nsum(1,2);\nsum(1,2,3);\n\n// ES6에 rest 파라미터 사용하면 됨\nfunction sum(...args) {\n    return args.reduce...\n}\n",[2545],{"type":17,"tag":91,"props":2546,"children":2547},{"__ignoreMap":8},[2548],{"type":26,"value":2543},{"type":17,"tag":1144,"props":2550,"children":2552},{"id":2551},"caller-프로퍼티",[2553],{"type":26,"value":2554},"caller 프로퍼티",{"type":17,"tag":29,"props":2556,"children":2557},{},[2558],{"type":26,"value":2559},"비표준 프로퍼티. 알 필요 없음",{"type":17,"tag":1144,"props":2561,"children":2563},{"id":2562},"length-프로퍼티",[2564],{"type":26,"value":2565},"length 프로퍼티",{"type":17,"tag":29,"props":2567,"children":2568},{},[2569],{"type":26,"value":2570},"매개변수 개수",{"type":17,"tag":1144,"props":2572,"children":2574},{"id":2573},"name-프로퍼티",[2575],{"type":26,"value":2576},"name 프로퍼티",{"type":17,"tag":29,"props":2578,"children":2579},{},[2580],{"type":26,"value":2581},"함수 이름",{"type":17,"tag":29,"props":2583,"children":2584},{},[2585],{"type":26,"value":2586},"ES6이전까지는 비표준 ES6에서 정식 표준",{"type":17,"tag":1144,"props":2588,"children":2589},{"id":1746},[2590],{"type":26,"value":1749},{"type":17,"tag":29,"props":2592,"children":2593},{},[2594],{"type":26,"value":2595},"[[Prototype]]이라는 내부 슬롯에 간접적으로 접근하기 위한 프로퍼티",{"type":17,"tag":1144,"props":2597,"children":2599},{"id":2598},"prototype-프로퍼티",[2600],{"type":26,"value":2601},"prototype 프로퍼티",{"type":17,"tag":29,"props":2603,"children":2604},{},[2605],{"type":26,"value":2606},"생성자 함수로 호출할 수 있는 함수 객체, 즉 constructor만이 소유하는 프로퍼티",{"type":17,"tag":29,"props":2608,"children":2609},{},[2610],{"type":26,"value":2611},"일반 객체와 생성자 함수로 호출할 수 없는 non-constructor에는 prototype 프로퍼티가 없다.",{"type":17,"tag":29,"props":2613,"children":2614},{},[2615],{"type":26,"value":2616},"(이전 14. 생성자 함수에 의한 객체 생성 참고)",{"type":17,"tag":29,"props":2618,"children":2619},{},[2620],{"type":26,"value":43},{"type":17,"tag":429,"props":2622,"children":2623},{},[],{"type":17,"tag":433,"props":2625,"children":2626},{"id":435},[2627],{"type":26,"value":435},{"type":17,"tag":439,"props":2629,"children":2630},{},[2631],{"type":17,"tag":217,"props":2632,"children":2633},{},[2634],{"type":17,"tag":64,"props":2635,"children":2636},{},[2637],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":2639},[2640,2648],{"id":2520,"depth":451,"text":2523,"children":2641},[2642,2643,2644,2645,2646,2647],{"id":2531,"depth":1405,"text":2534},{"id":2551,"depth":1405,"text":2554},{"id":2562,"depth":1405,"text":2565},{"id":2573,"depth":1405,"text":2576},{"id":1746,"depth":1405,"text":1749},{"id":2598,"depth":1405,"text":2601},{"id":435,"depth":451,"text":435},"content:posts:395ca83a-7b04-4f59-962a-1bc8cc05d1aa.md","posts/395ca83a-7b04-4f59-962a-1bc8cc05d1aa.md",{"_path":2652,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":2653,"description":2654,"tags":2655,"date":2656,"body":2657,"_type":454,"_id":3110,"_source":456,"_file":3111,"_extension":458},"/posts/7ada091c-3330-42a3-9990-528ebddc39eb","자바스크립트 - 14. 생성자 함수에 의한 객체 생성","뒤에서 this 배울꺼지만 this 바인딩은 함수 호출 방식에 따라 동적으로 결정",[11],"2024-02-21T00:00:00.000Z",{"type":14,"children":2658,"toc":3102},[2659,2663,2672,2676,2681,2689,2695,2704,2709,2713,2718,2722,2728,2754,2763,2769,2782,2791,2797,2805,2814,2819,2828,2832,2837,2846,2850,2856,2861,2870,2874,2879,2884,2889,2894,2898,2903,2908,2917,2921,2926,2931,2936,2940,2945,2949,2955,2960,2965,2974,2978,2984,2989,2994,2999,3004,3009,3018,3022,3025,3030,3039,3064,3081,3085,3088,3092],{"type":17,"tag":29,"props":2660,"children":2661},{},[2662],{"type":26,"value":2654},{"type":17,"tag":84,"props":2664,"children":2667},{"className":2665,"code":2666,"language":11,"meta":8},[87],"function foo() {\n    console.log(this)\n}\n\nfoo(); // window\n\nconst obj = { foo };\n\nobj.foo(); // obj\n\nconst inst = new Foo(); // inst\n",[2668],{"type":17,"tag":91,"props":2669,"children":2670},{"__ignoreMap":8},[2671],{"type":26,"value":2666},{"type":17,"tag":29,"props":2673,"children":2674},{},[2675],{"type":26,"value":43},{"type":17,"tag":29,"props":2677,"children":2678},{},[2679],{"type":26,"value":2680},"생성자 함수는 이름 그대로 객체(인스턴스)를 생성하는 함수다.",{"type":17,"tag":29,"props":2682,"children":2683},{},[2684],{"type":17,"tag":64,"props":2685,"children":2686},{},[2687],{"type":26,"value":2688},"new 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작한다.",{"type":17,"tag":72,"props":2690,"children":2692},{"id":2691},"생성자-함수의-인스턴스-생성-과정",[2693],{"type":26,"value":2694},"생성자 함수의 인스턴스 생성 과정",{"type":17,"tag":84,"props":2696,"children":2699},{"className":2697,"code":2698,"language":11,"meta":8},[87],"function Circle(radius) {\n    // 인스턴스 초기화\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[2700],{"type":17,"tag":91,"props":2701,"children":2702},{"__ignoreMap":8},[2703],{"type":26,"value":2698},{"type":17,"tag":29,"props":2705,"children":2706},{},[2707],{"type":26,"value":2708},"생성자 함수 내부의 코드를 살펴보면 this에 프로퍼티를 추가하고 필요에 따라 전달된 인수를 프로퍼티의 초기값으로서 할당하여 인스턴스를 초기화한다. 하지만 인스턴스를 생성하고 반환하는 코드는 보이지 않는다.",{"type":17,"tag":29,"props":2710,"children":2711},{},[2712],{"type":26,"value":43},{"type":17,"tag":29,"props":2714,"children":2715},{},[2716],{"type":26,"value":2717},"자바스크립트 엔진은 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다. new 연산자와 함께 생성자 함수를 호출하면 자바스크립트 엔진은 다음과 같은 과정을 거친다.",{"type":17,"tag":29,"props":2719,"children":2720},{},[2721],{"type":26,"value":43},{"type":17,"tag":1144,"props":2723,"children":2725},{"id":2724},"_1-인스턴스-생성과-this-바인딩",[2726],{"type":26,"value":2727},"1. 인스턴스 생성과 this 바인딩",{"type":17,"tag":439,"props":2729,"children":2730},{},[2731,2736,2749],{"type":17,"tag":217,"props":2732,"children":2733},{},[2734],{"type":26,"value":2735},"암묵적으로 빈 객체가 생성된다. 이 객체가 바로(아직 완성X) 생성자 함수가 생성한 인스턴스",{"type":17,"tag":217,"props":2737,"children":2738},{},[2739,2741],{"type":26,"value":2740},"이 인스턴스는 this에 바인딩된다.\n",{"type":17,"tag":439,"props":2742,"children":2743},{},[2744],{"type":17,"tag":217,"props":2745,"children":2746},{},[2747],{"type":26,"value":2748},"바인딩이란 식별자와 값을 연결하는 과정을 의미한다. 예를 들어, 변수 선언은 변수 이름(식별자)과 확보된 메모리 공간의 주소를 바인딩하는 것이다. this 바인딩은 this와 this가 가리킬 객체를 바인딩하는 것이다.",{"type":17,"tag":217,"props":2750,"children":2751},{},[2752],{"type":26,"value":2753},"함수 몸체의 코드가 한 줄씩 실행되는 런타임 이전에 실행된다.",{"type":17,"tag":84,"props":2755,"children":2758},{"className":2756,"code":2757,"language":11,"meta":8},[87],"function Circle(radius) {\n    // 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 된다.\n    console.log(this); // Circle {}\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[2759],{"type":17,"tag":91,"props":2760,"children":2761},{"__ignoreMap":8},[2762],{"type":26,"value":2757},{"type":17,"tag":1144,"props":2764,"children":2766},{"id":2765},"_2-인스턴스-초기화",[2767],{"type":26,"value":2768},"2. 인스턴스 초기화",{"type":17,"tag":439,"props":2770,"children":2771},{},[2772,2777],{"type":17,"tag":217,"props":2773,"children":2774},{},[2775],{"type":26,"value":2776},"생성자 함수에 기술되어 있는 코드가 한 줄씩 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다.",{"type":17,"tag":217,"props":2778,"children":2779},{},[2780],{"type":26,"value":2781},"즉, this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가",{"type":17,"tag":84,"props":2783,"children":2786},{"className":2784,"code":2785,"language":11,"meta":8},[87],"function Circle(radius) {\n\n    // 2. this에 바인딩되어 있는 인스턴스를 초기화한다.\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n",[2787],{"type":17,"tag":91,"props":2788,"children":2789},{"__ignoreMap":8},[2790],{"type":26,"value":2785},{"type":17,"tag":1144,"props":2792,"children":2794},{"id":2793},"_3-인스턴스-반환",[2795],{"type":26,"value":2796},"3. 인스턴스 반환",{"type":17,"tag":439,"props":2798,"children":2799},{},[2800],{"type":17,"tag":217,"props":2801,"children":2802},{},[2803],{"type":26,"value":2804},"생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.",{"type":17,"tag":84,"props":2806,"children":2809},{"className":2807,"code":2808,"language":11,"meta":8},[87],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n    // 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(cirlce); // Circle{...}\n",[2810],{"type":17,"tag":91,"props":2811,"children":2812},{"__ignoreMap":8},[2813],{"type":26,"value":2808},{"type":17,"tag":29,"props":2815,"children":2816},{},[2817],{"type":26,"value":2818},"만약 this가 아닌 다른 객체를 명시적으로 반환하면 this가 반환되지 못하고 return 문에 명시한 객체가 반환된다.",{"type":17,"tag":84,"props":2820,"children":2823},{"className":2821,"code":2822,"language":11,"meta":8},[87],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return {}\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // {}\n",[2824],{"type":17,"tag":91,"props":2825,"children":2826},{"__ignoreMap":8},[2827],{"type":26,"value":2822},{"type":17,"tag":29,"props":2829,"children":2830},{},[2831],{"type":26,"value":43},{"type":17,"tag":29,"props":2833,"children":2834},{},[2835],{"type":26,"value":2836},"하지만 명시적으로 원시 값을 반환하면 원시 값 반환은 무시되고 암묵적으로 this가 반환된다.",{"type":17,"tag":84,"props":2838,"children":2841},{"className":2839,"code":2840,"language":11,"meta":8},[87],"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return 100;\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // Circle {}\n",[2842],{"type":17,"tag":91,"props":2843,"children":2844},{"__ignoreMap":8},[2845],{"type":26,"value":2840},{"type":17,"tag":29,"props":2847,"children":2848},{},[2849],{"type":26,"value":43},{"type":17,"tag":72,"props":2851,"children":2853},{"id":2852},"내부-메서드-call과-constructor",[2854],{"type":26,"value":2855},"내부 메서드 [[Call]]과 [[Constructor]]",{"type":17,"tag":29,"props":2857,"children":2858},{},[2859],{"type":26,"value":2860},"함수는 객체다. 그래서 일반 객체가 가지고 있는 내부 슬롯과 내부 메서드를 모두 가지고 있다.",{"type":17,"tag":84,"props":2862,"children":2865},{"className":2863,"code":2864,"language":11,"meta":8},[87],"function foo() {}\n\n// 함수는 객체이므로 프로퍼티를 소유할 수 있다.\nfoo.prop = 10;\n\n// 함수는 객체이므로 메서드를 소유할 수 있다.\nfoo.method = function() {\n    console.log(this.prop);\n}\n\nfoo.method(); // 10\n",[2866],{"type":17,"tag":91,"props":2867,"children":2868},{"__ignoreMap":8},[2869],{"type":26,"value":2864},{"type":17,"tag":29,"props":2871,"children":2872},{},[2873],{"type":26,"value":43},{"type":17,"tag":29,"props":2875,"children":2876},{},[2877],{"type":26,"value":2878},"하지만 함수만에 특징이 있으니 함수는 호출할 수 있다.",{"type":17,"tag":29,"props":2880,"children":2881},{},[2882],{"type":26,"value":2883},"그래서 함수 객체만 가지고 있는 내부 슬롯과 내부 메서드를 추가로 가지고 있다.",{"type":17,"tag":29,"props":2885,"children":2886},{},[2887],{"type":26,"value":2888},"[[Environment]], [[FormalParameters]] 내부슬롯과",{"type":17,"tag":29,"props":2890,"children":2891},{},[2892],{"type":26,"value":2893},"[[Call]], [[Construct]] 내부 메서드",{"type":17,"tag":29,"props":2895,"children":2896},{},[2897],{"type":26,"value":43},{"type":17,"tag":29,"props":2899,"children":2900},{},[2901],{"type":26,"value":2902},"함수가 일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 호출되고",{"type":17,"tag":29,"props":2904,"children":2905},{},[2906],{"type":26,"value":2907},"new 연산자와 함께 생성자 함수로서 호출되면 내부 메서드 [[Construct]]가 호출된다.",{"type":17,"tag":84,"props":2909,"children":2912},{"className":2910,"code":2911,"language":11,"meta":8},[87],"function foo() {}\n\n// 일반적인 함수로서 호출: [[Call]]이 호출된다.\nfoo();\n\n// 생성자 함수로서 호출: [[Constructor]]가 호출된다.\nnew foo();\n",[2913],{"type":17,"tag":91,"props":2914,"children":2915},{"__ignoreMap":8},[2916],{"type":26,"value":2911},{"type":17,"tag":29,"props":2918,"children":2919},{},[2920],{"type":26,"value":43},{"type":17,"tag":29,"props":2922,"children":2923},{},[2924],{"type":26,"value":2925},"[[Call]]을 갖는 함수 객체를 callable",{"type":17,"tag":29,"props":2927,"children":2928},{},[2929],{"type":26,"value":2930},"[[Construct]]를 갖는 함수 객체를 constructor",{"type":17,"tag":29,"props":2932,"children":2933},{},[2934],{"type":26,"value":2935},"[[Construct]]를 갖지 않는 함수 객체를 non-constructor",{"type":17,"tag":29,"props":2937,"children":2938},{},[2939],{"type":26,"value":43},{"type":17,"tag":29,"props":2941,"children":2942},{},[2943],{"type":26,"value":2944},"모든 함수는 callable이다. 하지만 모든 함수는 constructor아니면 non-constructor이다.",{"type":17,"tag":29,"props":2946,"children":2947},{},[2948],{"type":26,"value":43},{"type":17,"tag":433,"props":2950,"children":2952},{"id":2951},"constructor와-non-constructor-구분",[2953],{"type":26,"value":2954},"constructor와 non-constructor 구분",{"type":17,"tag":29,"props":2956,"children":2957},{},[2958],{"type":26,"value":2959},"constructor 함수 선언문, 함수 표현식, 클래스(클래스도 함수다)",{"type":17,"tag":29,"props":2961,"children":2962},{},[2963],{"type":26,"value":2964},"non-constructor: 메서드(ES6 메서드 축약 표현), 화살표 함수",{"type":17,"tag":84,"props":2966,"children":2969},{"className":2967,"code":2968,"language":11,"meta":8},[87],"function foo() {};\nconst bar = function() {};\n\nconst baz = {\n    x: function() {}\n}\n\nnew foo(); // -> foo {}\nnew bar(); // -> bar {}\nnew baz.x; // -> x {}\n\nconst arrow = () => {};\n\nnew arrow(); // TypeError: arrow is not a constructor\n\nconst obj = {\n    x() {}\n}\n\nnew obj.x; // TypeError: obj.x is not a constructor\n",[2970],{"type":17,"tag":91,"props":2971,"children":2972},{"__ignoreMap":8},[2973],{"type":26,"value":2968},{"type":17,"tag":29,"props":2975,"children":2976},{},[2977],{"type":26,"value":43},{"type":17,"tag":433,"props":2979,"children":2981},{"id":2980},"newtarget",[2982],{"type":26,"value":2983},"new.target",{"type":17,"tag":29,"props":2985,"children":2986},{},[2987],{"type":26,"value":2988},"생성자 함수가 new 연산자 없이 호출되는 것을 방지하기 위한 프로퍼티",{"type":17,"tag":29,"props":2990,"children":2991},{},[2992],{"type":26,"value":2993},"new.target은 this와 유사하게 constructor인 모든 함수 내부에서 암묵적인 지역 변수와 같이 사용되며 메타 프로퍼티라고 부른다.",{"type":17,"tag":29,"props":2995,"children":2996},{},[2997],{"type":26,"value":2998},"new.target을 사용하면 new 연산자와 함께 생성자 함수로서 호출되었는지 확인할 수 있다.",{"type":17,"tag":29,"props":3000,"children":3001},{},[3002],{"type":26,"value":3003},"new 연산자와 함께 생성자 함수로서 호출되면 함수 내부의 new.target은 함수 자신을 가리킨다.",{"type":17,"tag":29,"props":3005,"children":3006},{},[3007],{"type":26,"value":3008},"new 연산자 없이 일반 함수로서 호출된 함수 내부의 new.target은 undefined다.",{"type":17,"tag":84,"props":3010,"children":3013},{"className":3011,"code":3012,"language":11,"meta":8},[87],"function Circle(radius){\n    if (!new.target) {\n        return new Cricle(radius);\n    }\n    ....\n}\n\nconst circle = Circle(5);\n",[3014],{"type":17,"tag":91,"props":3015,"children":3016},{"__ignoreMap":8},[3017],{"type":26,"value":3012},{"type":17,"tag":29,"props":3019,"children":3020},{},[3021],{"type":26,"value":43},{"type":17,"tag":429,"props":3023,"children":3024},{},[],{"type":17,"tag":29,"props":3026,"children":3027},{},[3028],{"type":26,"value":3029},"Function의 생성자는 자기 자신이다",{"type":17,"tag":84,"props":3031,"children":3034},{"className":3032,"code":3033,"language":11,"meta":8},[87],"function func() {\n\n}\n\nlet test = new func();\n\nconsole.log(test.constructor); // Function func...\nconsole.log(Function.constructor); // Function\nconsole.log(Function.constructor.constructor); // Function\nconsole.log(Function.constructor.constructor.constructor); // Function\n\nconsole.log(Function.constructor === Function); // true\n",[3035],{"type":17,"tag":91,"props":3036,"children":3037},{"__ignoreMap":8},[3038],{"type":26,"value":3033},{"type":17,"tag":29,"props":3040,"children":3041},{},[3042,3044,3049,3051,3056,3058,3062],{"type":26,"value":3043},"JavaScript에서 ",{"type":17,"tag":91,"props":3045,"children":3046},{},[3047],{"type":26,"value":3048},"Function",{"type":26,"value":3050}," 객체는 매우 특별한데, 그것은 자기 자신을 생성하는 고유한 특성을 가지고 있습니다. 이는 ",{"type":17,"tag":91,"props":3052,"children":3053},{},[3054],{"type":26,"value":3055},"Function.constructor",{"type":26,"value":3057},"가 ",{"type":17,"tag":91,"props":3059,"children":3060},{},[3061],{"type":26,"value":3048},{"type":26,"value":3063},"을 가리키는 것으로 확인할 수 있습니다.",{"type":17,"tag":29,"props":3065,"children":3066},{},[3067,3069,3073,3075,3079],{"type":26,"value":3068},"이러한 자기 참조적 특성은 JavaScript에서 ",{"type":17,"tag":91,"props":3070,"children":3071},{},[3072],{"type":26,"value":3048},{"type":26,"value":3074},"이 매우 독특한 역할을 한다는 것을 의미합니다. ",{"type":17,"tag":91,"props":3076,"children":3077},{},[3078],{"type":26,"value":3048},{"type":26,"value":3080},"은 모든 함수의 기본이 되는 생성자 함수이며, 동시에 자신의 인스턴스이기도 합니다. 이는 JavaScript의 프로토타입 기반 상속과 객체 모델의 일부로, 이 언어의 독특한 특성 중 하나입니다.",{"type":17,"tag":29,"props":3082,"children":3083},{},[3084],{"type":26,"value":43},{"type":17,"tag":429,"props":3086,"children":3087},{},[],{"type":17,"tag":433,"props":3089,"children":3090},{"id":435},[3091],{"type":26,"value":435},{"type":17,"tag":439,"props":3093,"children":3094},{},[3095],{"type":17,"tag":217,"props":3096,"children":3097},{},[3098],{"type":17,"tag":64,"props":3099,"children":3100},{},[3101],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":3103},[3104,3105,3106,3107,3108,3109],{"id":2724,"depth":1405,"text":2727},{"id":2765,"depth":1405,"text":2768},{"id":2793,"depth":1405,"text":2796},{"id":2951,"depth":451,"text":2954},{"id":2980,"depth":451,"text":2983},{"id":435,"depth":451,"text":435},"content:posts:7ada091c-3330-42a3-9990-528ebddc39eb.md","posts/7ada091c-3330-42a3-9990-528ebddc39eb.md",{"_path":3113,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":3114,"description":8,"tags":3115,"date":3116,"body":3117,"_type":454,"_id":3344,"_source":456,"_file":3345,"_extension":458},"/posts/63c3dae1-1565-48b5-8b41-a2862e03e82f","자바스크립트 - 13. 프로퍼티 어트리뷰트",[11],"2024-02-20T00:00:00.000Z",{"type":14,"children":3118,"toc":3339},[3119,3125,3138,3142,3154,3159,3168,3174,3179,3184,3188,3193,3202,3208,3214,3219,3224,3229,3234,3243,3249,3254,3259,3263,3267,3276,3279,3283,3288,3297,3303,3308,3313,3318,3322,3325,3329],{"type":17,"tag":72,"props":3120,"children":3122},{"id":3121},"내부-슬롯-내부-메서드",[3123],{"type":26,"value":3124},"내부 슬롯, 내부 메서드",{"type":17,"tag":439,"props":3126,"children":3127},{},[3128,3133],{"type":17,"tag":217,"props":3129,"children":3130},{},[3131],{"type":26,"value":3132},"ECMAScript 사양에 등장하는 이중 대괄호",{"type":17,"tag":217,"props":3134,"children":3135},{},[3136],{"type":26,"value":3137},"개발자가 직접 접근할 수 있도록 외부로 공개된 객체의 프로퍼티는 아님 (간접적으로 접근할 수 있는 수단을 제공하기는 함)",{"type":17,"tag":29,"props":3139,"children":3140},{},[3141],{"type":26,"value":43},{"type":17,"tag":29,"props":3143,"children":3144},{},[3145,3147,3152],{"type":26,"value":3146},"모든 ",{"type":17,"tag":64,"props":3148,"children":3149},{},[3150],{"type":26,"value":3151},"객체",{"type":26,"value":3153},"는 [[Prototype]] 내부 슬롯을 갖는다.",{"type":17,"tag":29,"props":3155,"children":3156},{},[3157],{"type":26,"value":3158},"원칙적으로 접근할 수 없지만 __proto__를 통해 간접적으로 접근할 수 있다.",{"type":17,"tag":84,"props":3160,"children":3163},{"className":3161,"code":3162,"language":11,"meta":8},[87],"const o = {};\no.[[Prototype]]\no.__proto__\n",[3164],{"type":17,"tag":91,"props":3165,"children":3166},{"__ignoreMap":8},[3167],{"type":26,"value":3162},{"type":17,"tag":72,"props":3169,"children":3171},{"id":3170},"프로퍼티-어트리뷰트-프로퍼티-디스크립터-객체",[3172],{"type":26,"value":3173},"프로퍼티 어트리뷰트, 프로퍼티 디스크립터 객체",{"type":17,"tag":29,"props":3175,"children":3176},{},[3177],{"type":26,"value":3178},"자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의한다.",{"type":17,"tag":29,"props":3180,"children":3181},{},[3182],{"type":26,"value":3183},"프로퍼티 어트리뷰트는 자바스크립트 엔진이 관리하는 내부 상태 값(meta-property)인 내부 슬롯 [[Value]],[[Writeable]],[[Enumerable]],[[Configurable]]이다.",{"type":17,"tag":29,"props":3185,"children":3186},{},[3187],{"type":26,"value":43},{"type":17,"tag":29,"props":3189,"children":3190},{},[3191],{"type":26,"value":3192},"직접 접근할 수 없지만, 메서드를 사용하여 간접적으로 확인할 수 있다.",{"type":17,"tag":84,"props":3194,"children":3197},{"className":3195,"code":3196,"language":11,"meta":8},[87],"const person = {\n    name: 'Lee'\n}\n\nperson.age = 20;\n\nconsole.log(Object.getOwnPropertyDescriptor(person, 'name'));\n\nconsole.log(Object.getOwnPropertyDescriptors(person));\n",[3198],{"type":17,"tag":91,"props":3199,"children":3200},{"__ignoreMap":8},[3201],{"type":26,"value":3196},{"type":17,"tag":72,"props":3203,"children":3205},{"id":3204},"데이터-프로퍼티-접근자-프로퍼티",[3206],{"type":26,"value":3207},"데이터 프로퍼티, 접근자 프로퍼티",{"type":17,"tag":433,"props":3209,"children":3211},{"id":3210},"데이터-프로퍼티",[3212],{"type":26,"value":3213},"데이터 프로퍼티",{"type":17,"tag":29,"props":3215,"children":3216},{},[3217],{"type":26,"value":3218},"[[Value]]",{"type":17,"tag":29,"props":3220,"children":3221},{},[3222],{"type":26,"value":3223},"[[Writable]]",{"type":17,"tag":29,"props":3225,"children":3226},{},[3227],{"type":26,"value":3228},"[[Enumerable]]",{"type":17,"tag":29,"props":3230,"children":3231},{},[3232],{"type":26,"value":3233},"[[Configurable]]",{"type":17,"tag":84,"props":3235,"children":3238},{"className":3236,"code":3237,"language":11,"meta":8},[87],"const person = {\n    name: 'Lee'\n}\n\nconsole.log(Object.getOwnPropertyDescriptors(person));\n",[3239],{"type":17,"tag":91,"props":3240,"children":3241},{"__ignoreMap":8},[3242],{"type":26,"value":3237},{"type":17,"tag":433,"props":3244,"children":3246},{"id":3245},"접근자-프로퍼티",[3247],{"type":26,"value":3248},"접근자 프로퍼티",{"type":17,"tag":29,"props":3250,"children":3251},{},[3252],{"type":26,"value":3253},"[[Get]]",{"type":17,"tag":29,"props":3255,"children":3256},{},[3257],{"type":26,"value":3258},"[[Set]]",{"type":17,"tag":29,"props":3260,"children":3261},{},[3262],{"type":26,"value":3228},{"type":17,"tag":29,"props":3264,"children":3265},{},[3266],{"type":26,"value":3233},{"type":17,"tag":84,"props":3268,"children":3271},{"className":3269,"code":3270,"language":11,"meta":8},[87]," const person = {\n    firtName: 'Ungmo',\n    lastName: 'Lee',\n\n    get fullName() {\n      return `${this.firtName} ${this.lastName}`;\n    },\n    set fullName(name) {\n      [this.firtName, this.lastName] = name.split(' ');\n    }\n  }\n  console.log(Object.getOwnPropertyDescriptor(person, 'fullName'));\n",[3272],{"type":17,"tag":91,"props":3273,"children":3274},{"__ignoreMap":8},[3275],{"type":26,"value":3270},{"type":17,"tag":429,"props":3277,"children":3278},{},[],{"type":17,"tag":29,"props":3280,"children":3281},{},[3282],{"type":26,"value":43},{"type":17,"tag":29,"props":3284,"children":3285},{},[3286],{"type":26,"value":3287},"그러니까 객체 프로퍼티 변경이나 삭제 안되게 하고 싶거나 for..in문이나 Object.key에 안나오게 하고싶게 생성할때",{"type":17,"tag":84,"props":3289,"children":3292},{"className":3290,"code":3291,"language":11,"meta":8},[87],"Object.defineProperty(person, 'firstname', {\n    value: 'Seungyoon',\n    writable: false,\n    enumerable: false,\n    configurable: false\n});\n\nperson.name = 'test'; // writable이 false라 변경되지 않는다.\n\nconsole.log(Object.keys(person)); // [] enumerable이 false라 안나온다.\n\ndelete person.firstname; // configutable이 false라 삭제되지 않느다.\n\nconsole.log(person.name); // Seungyoon\n",[3293],{"type":17,"tag":91,"props":3294,"children":3295},{"__ignoreMap":8},[3296],{"type":26,"value":3291},{"type":17,"tag":72,"props":3298,"children":3300},{"id":3299},"객체-변경-방지",[3301],{"type":26,"value":3302},"객체 변경 방지",{"type":17,"tag":29,"props":3304,"children":3305},{},[3306],{"type":26,"value":3307},"Object.preventExtensions",{"type":17,"tag":29,"props":3309,"children":3310},{},[3311],{"type":26,"value":3312},"Object.seal",{"type":17,"tag":29,"props":3314,"children":3315},{},[3316],{"type":26,"value":3317},"Object.freeze",{"type":17,"tag":29,"props":3319,"children":3320},{},[3321],{"type":26,"value":43},{"type":17,"tag":429,"props":3323,"children":3324},{},[],{"type":17,"tag":433,"props":3326,"children":3327},{"id":435},[3328],{"type":26,"value":435},{"type":17,"tag":439,"props":3330,"children":3331},{},[3332],{"type":17,"tag":217,"props":3333,"children":3334},{},[3335],{"type":17,"tag":64,"props":3336,"children":3337},{},[3338],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":3340},[3341,3342,3343],{"id":3210,"depth":451,"text":3213},{"id":3245,"depth":451,"text":3248},{"id":435,"depth":451,"text":435},"content:posts:63c3dae1-1565-48b5-8b41-a2862e03e82f.md","posts/63c3dae1-1565-48b5-8b41-a2862e03e82f.md",{"_path":3347,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":3348,"description":8,"tags":3349,"date":3350,"body":3351,"_type":454,"_id":3713,"_source":456,"_file":3714,"_extension":458},"/posts/2c7bdebd-8baa-46a1-b05b-61bda16d93f4","자바스크립트 - 12. let, const 키워드와 블록 레벨 스코프",[11],"2024-02-19T00:00:00.000Z",{"type":14,"children":3352,"toc":3699},[3353,3359,3365,3373,3382,3388,3396,3405,3414,3420,3429,3435,3441,3450,3456,3465,3470,3491,3500,3504,3522,3531,3537,3558,3567,3573,3579,3588,3594,3603,3609,3618,3624,3645,3654,3666,3670,3678,3682,3685,3689],{"type":17,"tag":72,"props":3354,"children":3356},{"id":3355},"var-키워드의-문제점",[3357],{"type":26,"value":3358},"var 키워드의 문제점",{"type":17,"tag":433,"props":3360,"children":3362},{"id":3361},"_1-변수-중복-선언-허용",[3363],{"type":26,"value":3364},"1. 변수 중복 선언 허용",{"type":17,"tag":439,"props":3366,"children":3367},{},[3368],{"type":17,"tag":217,"props":3369,"children":3370},{},[3371],{"type":26,"value":3372},"이미 선언된 변수의 값이 변경되는 부작용 발생",{"type":17,"tag":84,"props":3374,"children":3377},{"className":3375,"code":3376,"language":11,"meta":8},[87],"var x = 1;\nvar y = 1;\n\n// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.\n// 초기화문이 있는 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.\nvar x = 100;\n// 초기화가 없는 변수 선언문은 무시된다.\nvar y;\n\nconsole.log(x); // 100\nconsole.log(y); // 1\n",[3378],{"type":17,"tag":91,"props":3379,"children":3380},{"__ignoreMap":8},[3381],{"type":26,"value":3376},{"type":17,"tag":433,"props":3383,"children":3385},{"id":3384},"_2-함수-레벨-스코프",[3386],{"type":26,"value":3387},"2. 함수 레벨 스코프",{"type":17,"tag":439,"props":3389,"children":3390},{},[3391],{"type":17,"tag":217,"props":3392,"children":3393},{},[3394],{"type":26,"value":3395},"오로지 함수의 코드 블록만을 지역 스코프로 인정한다.",{"type":17,"tag":84,"props":3397,"children":3400},{"className":3398,"code":3399,"language":11,"meta":8},[87],"var x = 1;\n\nif (true) {\n    var x = 10;\n}\nconsole.log(x); // 10\n",[3401],{"type":17,"tag":91,"props":3402,"children":3403},{"__ignoreMap":8},[3404],{"type":26,"value":3399},{"type":17,"tag":84,"props":3406,"children":3409},{"className":3407,"code":3408,"language":11,"meta":8},[87],"var i = 10;\n\nfor (var i = 0; i \u003C 5; i++) {\n    console.log(i); // 0 1 2 3 4 5\n}\nconsole.log(i); // 5\n",[3410],{"type":17,"tag":91,"props":3411,"children":3412},{"__ignoreMap":8},[3413],{"type":26,"value":3408},{"type":17,"tag":433,"props":3415,"children":3417},{"id":3416},"_3-변수-호이스팅",[3418],{"type":26,"value":3419},"3. 변수 호이스팅",{"type":17,"tag":84,"props":3421,"children":3424},{"className":3422,"code":3423,"language":11,"meta":8},[87],"console.log(foo);\n\nfoo = 123;\n\nconsole.log(foo);\n\nvar foo;\n",[3425],{"type":17,"tag":91,"props":3426,"children":3427},{"__ignoreMap":8},[3428],{"type":26,"value":3423},{"type":17,"tag":72,"props":3430,"children":3432},{"id":3431},"let-키워드",[3433],{"type":26,"value":3434},"let 키워드",{"type":17,"tag":433,"props":3436,"children":3438},{"id":3437},"_1-변수-중복-선언-금지",[3439],{"type":26,"value":3440},"1. 변수 중복 선언 금지",{"type":17,"tag":84,"props":3442,"children":3445},{"className":3443,"code":3444,"language":11,"meta":8},[87],"var foo = 123;\nvar foo = 456;\n\nlet bar = 123;\nlet bar = 123; // SyntaxError\n",[3446],{"type":17,"tag":91,"props":3447,"children":3448},{"__ignoreMap":8},[3449],{"type":26,"value":3444},{"type":17,"tag":433,"props":3451,"children":3453},{"id":3452},"_2-블록-레벨-스코프",[3454],{"type":26,"value":3455},"2. 블록 레벨 스코프",{"type":17,"tag":84,"props":3457,"children":3460},{"className":3458,"code":3459,"language":11,"meta":8},[87],"let foo = 1;\n\n{\n    let foo = 2;\n    let bar = 3;\n}\nconsole.log(foo); // 1\nconsole.log(bar); // ReferenceError\n",[3461],{"type":17,"tag":91,"props":3462,"children":3463},{"__ignoreMap":8},[3464],{"type":26,"value":3459},{"type":17,"tag":433,"props":3466,"children":3468},{"id":3467},"_3-변수-호이스팅-1",[3469],{"type":26,"value":3419},{"type":17,"tag":439,"props":3471,"children":3472},{},[3473,3478],{"type":17,"tag":217,"props":3474,"children":3475},{},[3476],{"type":26,"value":3477},"var 키워드는 런타임 이전에 선언 단계와 초기화 단계가 한번에 진행됨",{"type":17,"tag":217,"props":3479,"children":3480},{},[3481,3483],{"type":26,"value":3482},"let 키워드는 런타임 이전에 선언 단계와 초기화 단계가 분리되어 진행\n",{"type":17,"tag":439,"props":3484,"children":3485},{},[3486],{"type":17,"tag":217,"props":3487,"children":3488},{},[3489],{"type":26,"value":3490},"let 키워드로 선언한 변수는 스코프의 시작 지점부터 초기화 단계 시작 지점(변수 선언문)까지 변수를 참조할 수 없다. 스코프의 시작 지점부터 초기화 시작 시작 지점까지 변수를 참조할 수 없는 구간을 일시적 사각지대(TDZ)라고 부른다.",{"type":17,"tag":84,"props":3492,"children":3495},{"className":3493,"code":3494,"language":11,"meta":8},[87],"console.log(foo); // ReferenceError\nlet foo;\n",[3496],{"type":17,"tag":91,"props":3497,"children":3498},{"__ignoreMap":8},[3499],{"type":26,"value":3494},{"type":17,"tag":29,"props":3501,"children":3502},{},[3503],{"type":26,"value":43},{"type":17,"tag":439,"props":3505,"children":3506},{},[3507,3512,3517],{"type":17,"tag":217,"props":3508,"children":3509},{},[3510],{"type":26,"value":3511},"let 키워드는 호이스팅이 발생하지 않는 것처럼 보인다. 하지만 그렇지 않다. 아래 코드를 보면 호이스팅이 발생하지 않는다면 1이 출력 되어야 하는데 참조 에러가 발생한다.",{"type":17,"tag":217,"props":3513,"children":3514},{},[3515],{"type":26,"value":3516},"자바스크립트는 모든 선언을 호이스팅한다. (단, let, const class를 사용한 선언문은 호이스팅이 발생하지 않는 것처럼 동작한다.)",{"type":17,"tag":217,"props":3518,"children":3519},{},[3520],{"type":26,"value":3521},"간단히 말해서, let과 const는 선언된 블록 스코프 내에서 선언 지점 이전에는 \"존재하지 않는 것\"처럼 취급된다. 이 구간을 TDZ라고 한다.",{"type":17,"tag":84,"props":3523,"children":3526},{"className":3524,"code":3525,"language":11,"meta":8},[87],"let foo = 1;\n{\n    console.log(foo); // TDZ\n    let foo = 2; // 초기화 시작 지점\n}\n",[3527],{"type":17,"tag":91,"props":3528,"children":3529},{"__ignoreMap":8},[3530],{"type":26,"value":3525},{"type":17,"tag":433,"props":3532,"children":3534},{"id":3533},"_4-전역-객체와-let",[3535],{"type":26,"value":3536},"4. 전역 객체와 let",{"type":17,"tag":439,"props":3538,"children":3539},{},[3540,3545],{"type":17,"tag":217,"props":3541,"children":3542},{},[3543],{"type":26,"value":3544},"전역으로 선언한 var는 window 객체에 프로퍼티가 된다.",{"type":17,"tag":217,"props":3546,"children":3547},{},[3548,3550],{"type":26,"value":3549},"let 키워드로 선언한 전연 변수는 window 객체에 프로퍼티가 아니다.\n",{"type":17,"tag":439,"props":3551,"children":3552},{},[3553],{"type":17,"tag":217,"props":3554,"children":3555},{},[3556],{"type":26,"value":3557},"let 전역 변수는 보이지 않는 개념적인 블록내에 존재한다.",{"type":17,"tag":84,"props":3559,"children":3562},{"className":3560,"code":3561,"language":11,"meta":8},[87],"var x = 1;\ny = 2;\n\nfunction foo(){}\n\nconsole.log(window.x);\nconsole.log(window.y);\nconsole.log(window.foo);\n\n-------\n\nlet x = 1;\nconsole.log(window.x); // undefined\n",[3563],{"type":17,"tag":91,"props":3564,"children":3565},{"__ignoreMap":8},[3566],{"type":26,"value":3561},{"type":17,"tag":72,"props":3568,"children":3570},{"id":3569},"const-키워드",[3571],{"type":26,"value":3572},"const 키워드",{"type":17,"tag":433,"props":3574,"children":3576},{"id":3575},"_1-선언과-초기화",[3577],{"type":26,"value":3578},"1. 선언과 초기화",{"type":17,"tag":84,"props":3580,"children":3583},{"className":3581,"code":3582,"language":11,"meta":8},[87],"const foo = 1;\n\nconst foo; // SyntaxError\n",[3584],{"type":17,"tag":91,"props":3585,"children":3586},{"__ignoreMap":8},[3587],{"type":26,"value":3582},{"type":17,"tag":433,"props":3589,"children":3591},{"id":3590},"_2-재할당-금지",[3592],{"type":26,"value":3593},"2. 재할당 금지",{"type":17,"tag":84,"props":3595,"children":3598},{"className":3596,"code":3597,"language":11,"meta":8},[87],"const foo = 1;\nfoo = 2; // TypeError\n",[3599],{"type":17,"tag":91,"props":3600,"children":3601},{"__ignoreMap":8},[3602],{"type":26,"value":3597},{"type":17,"tag":433,"props":3604,"children":3606},{"id":3605},"_3-상수",[3607],{"type":26,"value":3608},"3. 상수",{"type":17,"tag":84,"props":3610,"children":3613},{"className":3611,"code":3612,"language":11,"meta":8},[87],"const TAX_RATE = 0.1;\n\nlet preTaxPrice = 100;\n\nlet afterTaxPrice = preTaxPrice + (preTaxPrice * TAX_RATE);\n",[3614],{"type":17,"tag":91,"props":3615,"children":3616},{"__ignoreMap":8},[3617],{"type":26,"value":3612},{"type":17,"tag":433,"props":3619,"children":3621},{"id":3620},"_4-const-키워드와-객체",[3622],{"type":26,"value":3623},"4. const 키워드와 객체",{"type":17,"tag":439,"props":3625,"children":3626},{},[3627],{"type":17,"tag":217,"props":3628,"children":3629},{},[3630,3632],{"type":26,"value":3631},"const 키워드로 선언된 변수에 원시 값을 할당한 경우 값을 변경할 수 없다. 하지만 객체를 할당한 경우 값을 변경할 수 있다.\n",{"type":17,"tag":439,"props":3633,"children":3634},{},[3635,3640],{"type":17,"tag":217,"props":3636,"children":3637},{},[3638],{"type":26,"value":3639},"그 이유는 원시 값은 변경 불가능한 값이지만",{"type":17,"tag":217,"props":3641,"children":3642},{},[3643],{"type":26,"value":3644},"객체는 변경 가능한 값이기 때문에 재할당 없이 직접 변경이 가능하다.",{"type":17,"tag":84,"props":3646,"children":3649},{"className":3647,"code":3648,"language":11,"meta":8},[87],"const person = {\n    name: 'Lee'\n};\n\nperson.name = 'kim';\n\nconsole.log(person.name); // kim\n",[3650],{"type":17,"tag":91,"props":3651,"children":3652},{"__ignoreMap":8},[3653],{"type":26,"value":3648},{"type":17,"tag":29,"props":3655,"children":3656},{},[3657,3659,3664],{"type":26,"value":3658},"const는 재할당을 금지할 뿐 “",{"type":17,"tag":64,"props":3660,"children":3661},{},[3662],{"type":26,"value":3663},"불변",{"type":26,"value":3665},"”을 의미하지는 않는다.",{"type":17,"tag":29,"props":3667,"children":3668},{},[3669],{"type":26,"value":43},{"type":17,"tag":29,"props":3671,"children":3672},{},[3673],{"type":17,"tag":64,"props":3674,"children":3675},{},[3676],{"type":26,"value":3677},"결론: ES6를 사용한다면 var를 쓸 이유는 없다.",{"type":17,"tag":29,"props":3679,"children":3680},{},[3681],{"type":26,"value":43},{"type":17,"tag":429,"props":3683,"children":3684},{},[],{"type":17,"tag":433,"props":3686,"children":3687},{"id":435},[3688],{"type":26,"value":435},{"type":17,"tag":439,"props":3690,"children":3691},{},[3692],{"type":17,"tag":217,"props":3693,"children":3694},{},[3695],{"type":17,"tag":64,"props":3696,"children":3697},{},[3698],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":3700},[3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712],{"id":3361,"depth":451,"text":3364},{"id":3384,"depth":451,"text":3387},{"id":3416,"depth":451,"text":3419},{"id":3437,"depth":451,"text":3440},{"id":3452,"depth":451,"text":3455},{"id":3467,"depth":451,"text":3419},{"id":3533,"depth":451,"text":3536},{"id":3575,"depth":451,"text":3578},{"id":3590,"depth":451,"text":3593},{"id":3605,"depth":451,"text":3608},{"id":3620,"depth":451,"text":3623},{"id":435,"depth":451,"text":435},"content:posts:2c7bdebd-8baa-46a1-b05b-61bda16d93f4.md","posts/2c7bdebd-8baa-46a1-b05b-61bda16d93f4.md",{"_path":3716,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":3717,"description":3718,"tags":3719,"date":3720,"body":3721,"_type":454,"_id":3820,"_source":456,"_file":3821,"_extension":458},"/posts/bd0acd00-ce9b-41ec-9a85-ef3e1d671c1c","자바스크립트 - 11. 전역 변수의 문제점","함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가 한 줄씩 순차적으로 실행되기 이전에 자바스크립트 엔진에 의해 먼저 실행된다.",[11],"2024-02-18T00:00:00.000Z",{"type":14,"children":3722,"toc":3817},[3723,3727,3731,3740,3744,3749,3754,3759,3764,3768,3777,3782,3787,3791,3796,3800,3803,3807],{"type":17,"tag":29,"props":3724,"children":3725},{},[3726],{"type":26,"value":3718},{"type":17,"tag":29,"props":3728,"children":3729},{},[3730],{"type":26,"value":43},{"type":17,"tag":84,"props":3732,"children":3735},{"className":3733,"code":3734,"language":11,"meta":8},[87],"function foo() {\n    var x = 'local';\n    console.log(x); // local\n    return x;\n}\n\nfoo();\n",[3736],{"type":17,"tag":91,"props":3737,"children":3738},{"__ignoreMap":8},[3739],{"type":26,"value":3734},{"type":17,"tag":29,"props":3741,"children":3742},{},[3743],{"type":26,"value":43},{"type":17,"tag":29,"props":3745,"children":3746},{},[3747],{"type":26,"value":3748},"foo() 호출하면 안에 코드가 한줄 씩 실행되기 전 자바스크립트 엔진은 x 변수를 선언하고 undefined로 할당한다.",{"type":17,"tag":29,"props":3750,"children":3751},{},[3752],{"type":26,"value":3753},"그후 함수안에 코드들이 한줄 한줄 실행 되면서 x 변수에 local이 할당된다.",{"type":17,"tag":29,"props":3755,"children":3756},{},[3757],{"type":26,"value":3758},"그리고 함수가 종료하면 x 변수도 소멸되어 생명 주기가 종료된다.",{"type":17,"tag":29,"props":3760,"children":3761},{},[3762],{"type":26,"value":3763},"즉, 지역 변수의 생명 주기는 함수의 생명 주기와 일치한다.",{"type":17,"tag":29,"props":3765,"children":3766},{},[3767],{"type":26,"value":43},{"type":17,"tag":84,"props":3769,"children":3772},{"className":3770,"code":3771,"language":11,"meta":8},[87],"var x = 'global';\nfunction foo() {\n    console.log(x); // undefined\n    var x = 'local';\n}\nfoo();\n",[3773],{"type":17,"tag":91,"props":3774,"children":3775},{"__ignoreMap":8},[3776],{"type":26,"value":3771},{"type":17,"tag":29,"props":3778,"children":3779},{},[3780],{"type":26,"value":3781},"위 코드를 보면 global이 출력될거 같지만 undefined로 출력된다. 그 이유는 지역 변수는 함수 전체에서 유효하기 때문이다. 변수 할당문이 실행되기 전에 undefined로 할당되었기 때문에 undefined가 출력 되는 것이다.",{"type":17,"tag":29,"props":3783,"children":3784},{},[3785],{"type":26,"value":3786},"호이스팅은 스코프를 단위로 동작한다.",{"type":17,"tag":29,"props":3788,"children":3789},{},[3790],{"type":26,"value":43},{"type":17,"tag":29,"props":3792,"children":3793},{},[3794],{"type":26,"value":3795},"전역 객체: 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체. 브라우저에서는 window, Nodejs에서는 global 객체를 의미. 전역 객체는 빌트인 객체와 호스트 객체, 그리고 var 키워드로 선언한 전역 변수와 전역 함수를 프로퍼티로 갖는다.",{"type":17,"tag":29,"props":3797,"children":3798},{},[3799],{"type":26,"value":43},{"type":17,"tag":429,"props":3801,"children":3802},{},[],{"type":17,"tag":433,"props":3804,"children":3805},{"id":435},[3806],{"type":26,"value":435},{"type":17,"tag":439,"props":3808,"children":3809},{},[3810],{"type":17,"tag":217,"props":3811,"children":3812},{},[3813],{"type":17,"tag":64,"props":3814,"children":3815},{},[3816],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":3818},[3819],{"id":435,"depth":451,"text":435},"content:posts:bd0acd00-ce9b-41ec-9a85-ef3e1d671c1c.md","posts/bd0acd00-ce9b-41ec-9a85-ef3e1d671c1c.md",{"_path":3823,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":3824,"description":3825,"tags":3826,"date":3827,"body":3828,"_type":454,"_id":4068,"_source":456,"_file":4069,"_extension":458},"/posts/dd772cec-2501-4d07-b897-2626c54be01e","자바스크립트 - 10. 스코프","스코프 (유효범위)",[11],"2024-02-17T00:00:00.000Z",{"type":14,"children":3829,"toc":4065},[3830,3836,3840,3844,3849,3854,3858,3863,3867,3872,3876,3881,3887,3892,3900,3906,3917,3925,3930,3936,3941,3950,3954,3959,3963,3967,3976,3980,3985,3998,4002,4007,4011,4016,4039,4044,4048,4051,4055],{"type":17,"tag":72,"props":3831,"children":3833},{"id":3832},"스코프란",[3834],{"type":26,"value":3835},"스코프란?",{"type":17,"tag":29,"props":3837,"children":3838},{},[3839],{"type":26,"value":3825},{"type":17,"tag":29,"props":3841,"children":3842},{},[3843],{"type":26,"value":43},{"type":17,"tag":29,"props":3845,"children":3846},{},[3847],{"type":26,"value":3848},"모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정 된다.",{"type":17,"tag":29,"props":3850,"children":3851},{},[3852],{"type":26,"value":3853},"이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위다.",{"type":17,"tag":29,"props":3855,"children":3856},{},[3857],{"type":26,"value":43},{"type":17,"tag":29,"props":3859,"children":3860},{},[3861],{"type":26,"value":3862},"자바스크립트 엔진은 이름이 같은 두 개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정한다. 이를 식별자 결정이라 한다. 스코프란 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다.",{"type":17,"tag":29,"props":3864,"children":3865},{},[3866],{"type":26,"value":43},{"type":17,"tag":29,"props":3868,"children":3869},{},[3870],{"type":26,"value":3871},"스코프란 개념이 없다면 같은 이름을 갖는 변수는 충돌을 일으키므로 프로그램 전체에서 하나밖에 사용할 수 없다.",{"type":17,"tag":29,"props":3873,"children":3874},{},[3875],{"type":26,"value":43},{"type":17,"tag":1858,"props":3877,"children":3878},{"emogi":1860,"color":1861},[3879],{"type":26,"value":3880},"코드가 어디서 실행되며 주변에 어떤 코드가 있는지를 “렉시컬 환경(lexical environment)”이라고 부른다.",{"type":17,"tag":72,"props":3882,"children":3884},{"id":3883},"스코프의-종류",[3885],{"type":26,"value":3886},"스코프의 종류",{"type":17,"tag":29,"props":3888,"children":3889},{},[3890],{"type":26,"value":3891},"변수는 자신이 선언된 위치에 의해 자신이 유효한 범위인 스코프가 결정된다.",{"type":17,"tag":439,"props":3893,"children":3894},{},[3895],{"type":17,"tag":217,"props":3896,"children":3897},{},[3898],{"type":26,"value":3899},"전역 스코프, 지역 스코프",{"type":17,"tag":72,"props":3901,"children":3903},{"id":3902},"스코프-체인",[3904],{"type":26,"value":3905},"스코프 체인",{"type":17,"tag":29,"props":3907,"children":3908},{},[3909,3911,3915],{"type":26,"value":3910},"모든 스코프는 계층적으로 연결된다. 모든 지역 스코프의 최상위는 전역 스코프다. 이렇게 스코프가 계층적으로 연결된 것을 ",{"type":17,"tag":64,"props":3912,"children":3913},{},[3914],{"type":26,"value":3905},{"type":26,"value":3916},"이라 한다.",{"type":17,"tag":439,"props":3918,"children":3919},{},[3920],{"type":17,"tag":217,"props":3921,"children":3922},{},[3923],{"type":26,"value":3924},"예를 들어 a라는 변수를 어떤 스코프에서 호출할 때 해당 스코프에 a가 없으면 스코프 체인을 통해 상위 스코프로 이동하여 검색을 한다.",{"type":17,"tag":1858,"props":3926,"children":3927},{"emogi":1860,"color":1861},[3928],{"type":26,"value":3929},"스코프 체인은 실행 컨텍스트의 렉시컬 환경을 단방향을 연결(chaining)한 것이다. 전역 렉시컬 환경은 코드가 로드되면 곧바로 생성되고 함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다.",{"type":17,"tag":72,"props":3931,"children":3933},{"id":3932},"함수-레벨-스코프",[3934],{"type":26,"value":3935},"함수 레벨 스코프",{"type":17,"tag":29,"props":3937,"children":3938},{},[3939],{"type":26,"value":3940},"var 키워드를 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정",{"type":17,"tag":84,"props":3942,"children":3945},{"className":3943,"code":3944,"language":11,"meta":8},[87],"var x = 1;\nif (true) {\n    var x = 10;\n}\n\nconsole.log(x); // 10\n\nfunction test() {\n    var x = 20;\n    console.log(x); // 20\n}\nconsole.log(x); // 10;\n",[3946],{"type":17,"tag":91,"props":3947,"children":3948},{"__ignoreMap":8},[3949],{"type":26,"value":3944},{"type":17,"tag":29,"props":3951,"children":3952},{},[3953],{"type":26,"value":43},{"type":17,"tag":29,"props":3955,"children":3956},{},[3957],{"type":26,"value":3958},"let, const는 블록 레벨 스코프를 지원한다.",{"type":17,"tag":29,"props":3960,"children":3961},{},[3962],{"type":26,"value":43},{"type":17,"tag":72,"props":3964,"children":3965},{"id":74},[3966],{"type":26,"value":77},{"type":17,"tag":84,"props":3968,"children":3971},{"className":3969,"code":3970,"language":11,"meta":8},[87],"var x = 1;\n\nfunction foo() {\n    var x = 10;\n    bar();\n}\n\nfunction bar() {\n    console.log(x);\n}\n\nfoo(); //\nbar(); //\n",[3972],{"type":17,"tag":91,"props":3973,"children":3974},{"__ignoreMap":8},[3975],{"type":26,"value":3970},{"type":17,"tag":29,"props":3977,"children":3978},{},[3979],{"type":26,"value":43},{"type":17,"tag":29,"props":3981,"children":3982},{},[3983],{"type":26,"value":3984},"프로그래밍 언어는 일반적으로 2가지 방식 중 한 가지 방식으로 함수의 상위 스코프를 결정",{"type":17,"tag":213,"props":3986,"children":3987},{},[3988,3993],{"type":17,"tag":217,"props":3989,"children":3990},{},[3991],{"type":26,"value":3992},"함수를 어디서 호출 했는지 (동적 스코프)",{"type":17,"tag":217,"props":3994,"children":3995},{},[3996],{"type":26,"value":3997},"함수를 어디서 정의 했는지 (정적 스코프, 렉시컬 스코프)",{"type":17,"tag":29,"props":3999,"children":4000},{},[4001],{"type":26,"value":43},{"type":17,"tag":29,"props":4003,"children":4004},{},[4005],{"type":26,"value":4006},"자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다.",{"type":17,"tag":29,"props":4008,"children":4009},{},[4010],{"type":26,"value":43},{"type":17,"tag":29,"props":4012,"children":4013},{},[4014],{"type":26,"value":4015},"동적 스코프(dynamic scoping)를 사용하는 프로그래밍 언어는 상대적으로 드뭅니다. 대부분의 현대 프로그래밍 언어는 정적 스코프(lexical scoping)를 사용합니다. 그러나 여전히 동적 스코프를 사용하거나 지원하는 언어들이 있습니다:",{"type":17,"tag":213,"props":4017,"children":4018},{},[4019,4024,4029,4034],{"type":17,"tag":217,"props":4020,"children":4021},{},[4022],{"type":26,"value":4023},"Bash 스크립팅 언어: Bash와 같은 쉘 스크립팅 언어는 동적 스코프를 사용합니다. 예를 들어, 함수 내에서 선언된 변수는 그 함수가 호출된 컨텍스트에 따라 다른 값을 가질 수 있습니다.",{"type":17,"tag":217,"props":4025,"children":4026},{},[4027],{"type":26,"value":4028},"Emacs Lisp: Emacs 텍스트 에디터의 확장 언어인 Emacs Lisp는 기본적으로 동적 스코프를 사용하지만, 정적 스코프도 선택적으로 사용할 수 있습니다.",{"type":17,"tag":217,"props":4030,"children":4031},{},[4032],{"type":26,"value":4033},"Perl: Perl은 기본적으로 정적 스코프를 사용하지만, 특별한 키워드와 문법을 사용하여 동적 스코프를 사용할 수 있습니다.",{"type":17,"tag":217,"props":4035,"children":4036},{},[4037],{"type":26,"value":4038},"Common Lisp: Common Lisp는 동적 스코프와 정적 스코프를 모두 지원합니다. 프로그래머는 변수를 선언할 때 스코프 유형을 선택할 수 있습니다.",{"type":17,"tag":29,"props":4040,"children":4041},{},[4042],{"type":26,"value":4043},"동적 스코프는 실행 시점에 변수의 바인딩이 결정되며, 이는 호출 스택의 컨텍스트에 따라 달라집니다. 반면, 정적 스코프(lexical scoping)는 코드를 작성하는 시점에서 변수의 범위가 결정되며, 함수나 블록의 위치에 의존합니다. 동적 스코프는 특정 유형의 문제를 해결하는 데 유용할 수 있지만, 프로그램의 동작을 예측하고 이해하기 어렵게 만들 수 있기 때문에 현대 언어에서는 일반적으로 정적 스코프가 선호됩니다.",{"type":17,"tag":29,"props":4045,"children":4046},{},[4047],{"type":26,"value":43},{"type":17,"tag":429,"props":4049,"children":4050},{},[],{"type":17,"tag":433,"props":4052,"children":4053},{"id":435},[4054],{"type":26,"value":435},{"type":17,"tag":439,"props":4056,"children":4057},{},[4058],{"type":17,"tag":217,"props":4059,"children":4060},{},[4061],{"type":17,"tag":64,"props":4062,"children":4063},{},[4064],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":4066},[4067],{"id":435,"depth":451,"text":435},"content:posts:dd772cec-2501-4d07-b897-2626c54be01e.md","posts/dd772cec-2501-4d07-b897-2626c54be01e.md",{"_path":4071,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":4072,"description":43,"tags":4073,"date":4074,"body":4075,"_type":454,"_id":4838,"_source":456,"_file":4839,"_extension":458},"/posts/96c9d4b7-fef3-492c-aedb-b53a58deebb1","자바스크립트 - 9. 함수",[11],"2024-02-16T00:00:00.000Z",{"type":14,"children":4076,"toc":4823},[4077,4081,4087,4092,4101,4106,4119,4124,4129,4133,4138,4143,4147,4159,4163,4169,4175,4181,4194,4203,4207,4217,4222,4231,4236,4240,4259,4270,4274,4279,4292,4296,4301,4310,4321,4329,4333,4338,4343,4352,4356,4364,4368,4377,4382,4395,4404,4408,4420,4424,4436,4440,4446,4455,4459,4464,4469,4473,4481,4490,4496,4505,4510,4515,4520,4524,4529,4547,4551,4556,4560,4565,4594,4598,4603,4607,4613,4622,4626,4631,4635,4648,4660,4664,4670,4676,4685,4691,4696,4701,4706,4711,4730,4735,4740,4745,4750,4759,4768,4774,4779,4784,4793,4802,4806,4809,4813],{"type":17,"tag":29,"props":4078,"children":4079},{},[4080],{"type":26,"value":43},{"type":17,"tag":433,"props":4082,"children":4084},{"id":4083},"함수-리터럴",[4085],{"type":26,"value":4086},"함수 리터럴",{"type":17,"tag":29,"props":4088,"children":4089},{},[4090],{"type":26,"value":4091},"함수 리터럴은 function 키워드, 함수 이름, 매개 변수 목록, 함수 몸체로 구성된다.",{"type":17,"tag":84,"props":4093,"children":4096},{"className":4094,"code":4095,"language":11,"meta":8},[87],"var f = function add(x, y) {\n    return x + y;\n}\n",[4097],{"type":17,"tag":91,"props":4098,"children":4099},{"__ignoreMap":8},[4100],{"type":26,"value":4095},{"type":17,"tag":29,"props":4102,"children":4103},{},[4104],{"type":26,"value":4105},"함수이름: add",{"type":17,"tag":439,"props":4107,"children":4108},{},[4109,4114],{"type":17,"tag":217,"props":4110,"children":4111},{},[4112],{"type":26,"value":4113},"함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자 (중요!)",{"type":17,"tag":217,"props":4115,"children":4116},{},[4117],{"type":26,"value":4118},"함수 이름은 생략할 수 있다. 이름이 있는 함수를 기명 함수, 이름이 없는 함수를 무명/익명 함수라 한다.",{"type":17,"tag":29,"props":4120,"children":4121},{},[4122],{"type":26,"value":4123},"매개변수: x, y",{"type":17,"tag":29,"props":4125,"children":4126},{},[4127],{"type":26,"value":4128},"몸체: return x + y;",{"type":17,"tag":29,"props":4130,"children":4131},{},[4132],{"type":26,"value":43},{"type":17,"tag":29,"props":4134,"children":4135},{},[4136],{"type":26,"value":4137},"리터럴: 사람이 이해할 수 있는 문자나 약속된 기호를 사용해 값을 생성하는 표기 방식, 즉 리터럴은 값을 생성하기 위한 표기법 (용어 계속 숙지)",{"type":17,"tag":29,"props":4139,"children":4140},{},[4141],{"type":26,"value":4142},"함수 리터럴도 평가되어 값을 생성하며, 이 값은 객체다.",{"type":17,"tag":29,"props":4144,"children":4145},{},[4146],{"type":26,"value":43},{"type":17,"tag":29,"props":4148,"children":4149},{},[4150,4152,4157],{"type":26,"value":4151},"즉, ",{"type":17,"tag":64,"props":4153,"children":4154},{},[4155],{"type":26,"value":4156},"함수는 객체다!",{"type":26,"value":4158}," (다른 프로그래밍 언어와 구별되는 자바스크립트의 중요한 특징)",{"type":17,"tag":29,"props":4160,"children":4161},{},[4162],{"type":26,"value":43},{"type":17,"tag":72,"props":4164,"children":4166},{"id":4165},"함수-정의",[4167],{"type":26,"value":4168},"함수 정의",{"type":17,"tag":1858,"props":4170,"children":4172},{"emogi":4171,"color":1861},"✏️",[4173],{"type":26,"value":4174},"변수 선언과 함수 정의\n변수는 선언(declaration)한다고 했지만 함수는 정의(definition)한다고 표현했다.\n함수 선언문이 평가되면 식별자가 암묵적으로 생성되고 함수 객체가 할당된다.\n따라서 ECMAScript 사양에서도 변수에는 선언(variable declration), 함수에는 정의(function definition)라고 표현한다.",{"type":17,"tag":433,"props":4176,"children":4178},{"id":4177},"함수-선언문-표현식이-아닌-문",[4179],{"type":26,"value":4180},"함수 선언문 (표현식이 아닌 문)",{"type":17,"tag":439,"props":4182,"children":4183},{},[4184,4189],{"type":17,"tag":217,"props":4185,"children":4186},{},[4187],{"type":26,"value":4188},"함수 선언문은 함수리터럴과 형태가 동일하다.",{"type":17,"tag":217,"props":4190,"children":4191},{},[4192],{"type":26,"value":4193},"단, 함수 선언문은 함수 이름 생략 불가",{"type":17,"tag":84,"props":4195,"children":4198},{"className":4196,"code":4197,"language":11,"meta":8},[87],"// 함수 선언문\nfunction add(x, y) {\n    return x + y;\n}\n",[4199],{"type":17,"tag":91,"props":4200,"children":4201},{"__ignoreMap":8},[4202],{"type":26,"value":4197},{"type":17,"tag":29,"props":4204,"children":4205},{},[4206],{"type":26,"value":43},{"type":17,"tag":29,"props":4208,"children":4209},{},[4210,4212],{"type":26,"value":4211},"함수 선언문은 ",{"type":17,"tag":64,"props":4213,"children":4214},{},[4215],{"type":26,"value":4216},"표현식이 아닌 문",{"type":17,"tag":29,"props":4218,"children":4219},{},[4220],{"type":26,"value":4221},"표현식이 아닌 문은 변수에 할당할 수 없다고 했는데",{"type":17,"tag":84,"props":4223,"children":4226},{"className":4224,"code":4225,"language":11,"meta":8},[87],"var add = function add(x, y) {\n    return x + y;\n}\n",[4227],{"type":17,"tag":91,"props":4228,"children":4229},{"__ignoreMap":8},[4230],{"type":26,"value":4225},{"type":17,"tag":29,"props":4232,"children":4233},{},[4234],{"type":26,"value":4235},"하지만 위 코드를 보면 함수 선언문이 변수에 할당되는 것처럼 보인다.",{"type":17,"tag":29,"props":4237,"children":4238},{},[4239],{"type":26,"value":43},{"type":17,"tag":29,"props":4241,"children":4242},{},[4243,4245,4250,4252,4257],{"type":26,"value":4244},"이는 자바스크립트 엔진이 코드의 문맥에 따라 ",{"type":17,"tag":91,"props":4246,"children":4247},{},[4248],{"type":26,"value":4249},"함수 선언문",{"type":26,"value":4251},"으로 해석하거나 ",{"type":17,"tag":91,"props":4253,"children":4254},{},[4255],{"type":26,"value":4256},"함수 리터럴 표현식",{"type":26,"value":4258},"으로 해석하는 경우가 있기 때문. 코드 문맥에 따라 해석이 달라짐",{"type":17,"tag":29,"props":4260,"children":4261},{},[4262,4264,4268],{"type":26,"value":4263},"위와 같은 경우는 표현식인 문인 ",{"type":17,"tag":91,"props":4265,"children":4266},{},[4267],{"type":26,"value":4256},{"type":26,"value":4269},"으로 해석 되었기 때문에 가능",{"type":17,"tag":29,"props":4271,"children":4272},{},[4273],{"type":26,"value":43},{"type":17,"tag":29,"props":4275,"children":4276},{},[4277],{"type":26,"value":4278},"기명 함수 리터럴은 중의적인 코드다.",{"type":17,"tag":213,"props":4280,"children":4281},{},[4282,4287],{"type":17,"tag":217,"props":4283,"children":4284},{},[4285],{"type":26,"value":4286},"단독으로 사용하면 함수 선언문으로 해석",{"type":17,"tag":217,"props":4288,"children":4289},{},[4290],{"type":26,"value":4291},"값으로 평가되어야 하는 문맥 (할당, 피연산자)에서는 함수 리터럴 표현식으로 해석",{"type":17,"tag":29,"props":4293,"children":4294},{},[4295],{"type":26,"value":43},{"type":17,"tag":29,"props":4297,"children":4298},{},[4299],{"type":26,"value":4300},"아래 코드를 보자",{"type":17,"tag":84,"props":4302,"children":4305},{"className":4303,"code":4304,"language":11,"meta":8},[87],"**//** 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석\nfunction foo() {\n    console.log('foo');\n}\n\nfoo(); // foo\n\n// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석\n// 그룹연산자()안에 피연산자 함수 리터럴은 함수 리터럴 표현식으로 해석\n(function bar() { console.log('bar')});\nbar(); // RefefenceError: bar is not defined\n",[4306],{"type":17,"tag":91,"props":4307,"children":4308},{"__ignoreMap":8},[4309],{"type":26,"value":4304},{"type":17,"tag":29,"props":4311,"children":4312},{},[4313,4315,4319],{"type":26,"value":4314},"bar()를 왜 호출을 못할까? 그 이유는 ",{"type":17,"tag":91,"props":4316,"children":4317},{},[4318],{"type":26,"value":4256},{"type":26,"value":4320},"으로 해석되기 때문이다. 위 함수 리터럴에서 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자라고 했다. 그래서 함수 내부가 아닌 외부에서는 호출이 불가능한 것이다.",{"type":17,"tag":1530,"props":4322,"children":4323},{},[4324],{"type":17,"tag":29,"props":4325,"children":4326},{},[4327],{"type":26,"value":4328},"함수 리터럴과 함수 리터럴 표현식 헷갈리지 말기",{"type":17,"tag":29,"props":4330,"children":4331},{},[4332],{"type":26,"value":43},{"type":17,"tag":29,"props":4334,"children":4335},{},[4336],{"type":26,"value":4337},"위 예제에서 함수 선언문으로 정의된 함수는 foo라는 이름으로 호출할 수 있었다. foo는 함수 몸체 내부에서만 유효한 식별자인데 그러면 foo()는 어떻게 호출이 가능한걸까? 그 이유는 자바스크립트 엔진이 암묵적으로 식별자를 생성하기 때문이다.",{"type":17,"tag":29,"props":4339,"children":4340},{},[4341],{"type":26,"value":4342},"즉 자바스크립트 엔진은 함수 선언문을 해석해 함수 객체를 생성한다.",{"type":17,"tag":84,"props":4344,"children":4347},{"className":4345,"code":4346,"language":11,"meta":8},[87],"function foo() {\n    console.log('foo');\n}\n\n// 자바스크립트 엔진이 암묵적으로 아래와 같이 생성한다. (아래와 같이 동작하는건 알수 없으나 식별자가 생성된다는 것을 보여주기 위한 예제)\nvar foo = function foo() {\n    console.log('foo');\n}\n\n// 그래서 함수 표현식은 함수 이름 생략이 불가능하구나?\n",[4348],{"type":17,"tag":91,"props":4349,"children":4350},{"__ignoreMap":8},[4351],{"type":26,"value":4346},{"type":17,"tag":29,"props":4353,"children":4354},{},[4355],{"type":26,"value":43},{"type":17,"tag":29,"props":4357,"children":4358},{},[4359],{"type":17,"tag":64,"props":4360,"children":4361},{},[4362],{"type":26,"value":4363},"함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다!",{"type":17,"tag":29,"props":4365,"children":4366},{},[4367],{"type":26,"value":43},{"type":17,"tag":84,"props":4369,"children":4372},{"className":4370,"code":4371,"language":11,"meta":8},[87],"var foo = function bar(n) {\n    bar(); // 함수이름은 함수 몸체 내에서만 사용 가능\n}\n",[4373],{"type":17,"tag":91,"props":4374,"children":4375},{"__ignoreMap":8},[4376],{"type":26,"value":4371},{"type":17,"tag":29,"props":4378,"children":4379},{},[4380],{"type":26,"value":4381},"용어 구분",{"type":17,"tag":439,"props":4383,"children":4384},{},[4385,4390],{"type":17,"tag":217,"props":4386,"children":4387},{},[4388],{"type":26,"value":4389},"식별자: foo",{"type":17,"tag":217,"props":4391,"children":4392},{},[4393],{"type":26,"value":4394},"함수이름 bar",{"type":17,"tag":84,"props":4396,"children":4399},{"className":4397,"code":4398,"language":11,"meta":8},[87],"var foo = function () {}\n",[4400],{"type":17,"tag":91,"props":4401,"children":4402},{"__ignoreMap":8},[4403],{"type":26,"value":4398},{"type":17,"tag":29,"props":4405,"children":4406},{},[4407],{"type":26,"value":4381},{"type":17,"tag":439,"props":4409,"children":4410},{},[4411,4415],{"type":17,"tag":217,"props":4412,"children":4413},{},[4414],{"type":26,"value":4389},{"type":17,"tag":217,"props":4416,"children":4417},{},[4418],{"type":26,"value":4419},"함수이름: 없음 (익명함수)",{"type":17,"tag":29,"props":4421,"children":4422},{},[4423],{"type":26,"value":43},{"type":17,"tag":29,"props":4425,"children":4426},{},[4427],{"type":17,"tag":4428,"props":4429,"children":4433},"a",{"href":4430,"rel":4431},"https://chat.openai.com/share/512948d1-1316-4bba-afaf-42e41498d5c8",[4432],"nofollow",[4434],{"type":26,"value":4435},"bookmark",{"type":17,"tag":29,"props":4437,"children":4438},{},[4439],{"type":26,"value":43},{"type":17,"tag":433,"props":4441,"children":4443},{"id":4442},"함수-표현식표현식인-문",[4444],{"type":26,"value":4445},"함수 표현식(표현식인 문)",{"type":17,"tag":84,"props":4447,"children":4450},{"className":4448,"code":4449,"language":11,"meta":8},[87],"var add = function(x, y) {\n    return x + y;\n}\n",[4451],{"type":17,"tag":91,"props":4452,"children":4453},{"__ignoreMap":8},[4454],{"type":26,"value":4449},{"type":17,"tag":29,"props":4456,"children":4457},{},[4458],{"type":26,"value":43},{"type":17,"tag":29,"props":4460,"children":4461},{},[4462],{"type":26,"value":4463},"자바스크립트는 함수는 일급 객체다.",{"type":17,"tag":29,"props":4465,"children":4466},{},[4467],{"type":26,"value":4468},"함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다. 이러한 함수 정의 방식을 함수 표현식(function expression)이라 한다.",{"type":17,"tag":29,"props":4470,"children":4471},{},[4472],{"type":26,"value":43},{"type":17,"tag":1530,"props":4474,"children":4475},{},[4476],{"type":17,"tag":29,"props":4477,"children":4478},{},[4479],{"type":26,"value":4480},"함수 선언문, 함수 표현식으로 선언한 함수는 Function 객체의 인스턴스다, Function은 Object 객체의 인스턴스다.",{"type":17,"tag":84,"props":4482,"children":4485},{"className":4483,"code":4484,"language":11,"meta":8},[87],"function testFunction() {\n}\nlet testInstance = new testFunction();\nconsole.log(testInstance instanceof testFunction);\nconsole.log(testFunction instanceof Function);\nconsole.log(Function instanceof Object);\n",[4486],{"type":17,"tag":91,"props":4487,"children":4488},{"__ignoreMap":8},[4489],{"type":26,"value":4484},{"type":17,"tag":433,"props":4491,"children":4493},{"id":4492},"함수-생성-시점과-함수-호이스팅",[4494],{"type":26,"value":4495},"함수 생성 시점과 함수 호이스팅",{"type":17,"tag":84,"props":4497,"children":4500},{"className":4498,"code":4499,"language":11,"meta":8},[87],"// 함수 참조\nconsole.log(add); // f add(a, b)\nconsole.log(sub); // undefined\n\n// 함수 호출\nconsole.log(add(2, 5)); // 7\nconsole.log(sub(2, 5)); // TypeError: sub is not a function\n\n// 함수 선언문\nfunction add(a, b) {\n    return a + b;\n}\n\n// 함수 표현식\nvar sub = function(a, b) {\n    return a - b;\n}\n\n",[4501],{"type":17,"tag":91,"props":4502,"children":4503},{"__ignoreMap":8},[4504],{"type":26,"value":4499},{"type":17,"tag":29,"props":4506,"children":4507},{},[4508],{"type":26,"value":4509},"함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.",{"type":17,"tag":29,"props":4511,"children":4512},{},[4513],{"type":26,"value":4514},"함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다.",{"type":17,"tag":29,"props":4516,"children":4517},{},[4518],{"type":26,"value":4519},"이는 각 함수의 생성 시점이 다르기 때문이다.",{"type":17,"tag":29,"props":4521,"children":4522},{},[4523],{"type":26,"value":43},{"type":17,"tag":29,"props":4525,"children":4526},{},[4527],{"type":26,"value":4528},"함수선언문은 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행된다.",{"type":17,"tag":213,"props":4530,"children":4531},{},[4532,4537,4542],{"type":17,"tag":217,"props":4533,"children":4534},{},[4535],{"type":26,"value":4536},"함수 객체 생성",{"type":17,"tag":217,"props":4538,"children":4539},{},[4540],{"type":26,"value":4541},"함수 이름과 동일한 이름의 식별자 생성",{"type":17,"tag":217,"props":4543,"children":4544},{},[4545],{"type":26,"value":4546},"함수 객체를 식별자에 할당",{"type":17,"tag":29,"props":4548,"children":4549},{},[4550],{"type":26,"value":43},{"type":17,"tag":29,"props":4552,"children":4553},{},[4554],{"type":26,"value":4555},"이처럼 함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅이라 한다.",{"type":17,"tag":29,"props":4557,"children":4558},{},[4559],{"type":26,"value":43},{"type":17,"tag":29,"props":4561,"children":4562},{},[4563],{"type":26,"value":4564},"함수 호이스팅과 변수 호이스팅 차이",{"type":17,"tag":213,"props":4566,"children":4567},{},[4568,4581],{"type":17,"tag":217,"props":4569,"children":4570},{},[4571,4573],{"type":26,"value":4572},"변수 호이스팅은 undefined로 초기화\n",{"type":17,"tag":213,"props":4574,"children":4575},{},[4576],{"type":17,"tag":217,"props":4577,"children":4578},{},[4579],{"type":26,"value":4580},"변수 호이스팅은 선언 이전에 호출하면 undefined로 평가 됨",{"type":17,"tag":217,"props":4582,"children":4583},{},[4584,4586],{"type":26,"value":4585},"함수 호이스팅은 함수 객체로 초기화\n",{"type":17,"tag":213,"props":4587,"children":4588},{},[4589],{"type":17,"tag":217,"props":4590,"children":4591},{},[4592],{"type":26,"value":4593},"함수 호이스팅은 함수 선언문 이전에 호출하면 호출이 가능",{"type":17,"tag":29,"props":4595,"children":4596},{},[4597],{"type":26,"value":43},{"type":17,"tag":29,"props":4599,"children":4600},{},[4601],{"type":26,"value":4602},"함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.",{"type":17,"tag":29,"props":4604,"children":4605},{},[4606],{"type":26,"value":43},{"type":17,"tag":1144,"props":4608,"children":4610},{"id":4609},"참조에-의한-전달과-외부-상태의-변경",[4611],{"type":26,"value":4612},"참조에 의한 전달과 외부 상태의 변경",{"type":17,"tag":84,"props":4614,"children":4617},{"className":4615,"code":4616,"language":11,"meta":8},[87],"function test(primitive, obj) {\n    primitive += 100;\n    obj.name = 'kim';\n}\n\nvar num = 100;\nvar person = {\n    name: 'lee';\n};\n\nconsole.log(num); // 100;\nconsole.log(person.name); // lee;\n\ntest(num, person);\n\nconsole.log(num); // 100\nconsole.log(person.name); // kim\n",[4618],{"type":17,"tag":91,"props":4619,"children":4620},{"__ignoreMap":8},[4621],{"type":26,"value":4616},{"type":17,"tag":29,"props":4623,"children":4624},{},[4625],{"type":26,"value":43},{"type":17,"tag":29,"props":4627,"children":4628},{},[4629],{"type":26,"value":4630},"함수 외부에서 함수 몸체 내부로 전달한 참조 값에 의해 원본 객체가 변경되는 부수 효과가 발생",{"type":17,"tag":29,"props":4632,"children":4633},{},[4634],{"type":26,"value":43},{"type":17,"tag":439,"props":4636,"children":4637},{},[4638,4643],{"type":17,"tag":217,"props":4639,"children":4640},{},[4641],{"type":26,"value":4642},"객체의 변경을 추적하려면 옵저버 패턴 등을 통해 객체를 참조를 공유하는 모든 이들에게 변경 사실을 통지하고 이에 대처하는 추가 대응이 필요",{"type":17,"tag":217,"props":4644,"children":4645},{},[4646],{"type":26,"value":4647},"객체를 불변 객체로 만들어 사용하는것도 하나의 방법",{"type":17,"tag":29,"props":4649,"children":4650},{},[4651,4653,4658],{"type":26,"value":4652},"외부 상태를 변경하지 않고 외부 상태에 의존하지도 않는 함수를 ",{"type":17,"tag":91,"props":4654,"children":4655},{},[4656],{"type":26,"value":4657},"순수 함수",{"type":26,"value":4659}," 라 한다.",{"type":17,"tag":29,"props":4661,"children":4662},{},[4663],{"type":26,"value":43},{"type":17,"tag":433,"props":4665,"children":4667},{"id":4666},"다양한-함수의-형태",[4668],{"type":26,"value":4669},"다양한 함수의 형태",{"type":17,"tag":1144,"props":4671,"children":4673},{"id":4672},"즉시-실행-함수",[4674],{"type":26,"value":4675},"즉시 실행 함수",{"type":17,"tag":84,"props":4677,"children":4680},{"className":4678,"code":4679,"language":11,"meta":8},[87],"(function() {}());\n// 그룹 연산자()로 함수를 묶은 이유는 먼저 함수 리터럴을 평가해서 함수 객체를 생성하기 위해서다.\n\n// 따라서 먼저 함수 리터럴을 평가해서 함수 객체를 생성할 수 있다면 그룹 연산자 이외의 연산자를 사용해도 좋다.\n(function(){})();\n!function(){}()\n+function(){}()\n",[4681],{"type":17,"tag":91,"props":4682,"children":4683},{"__ignoreMap":8},[4684],{"type":26,"value":4679},{"type":17,"tag":1144,"props":4686,"children":4688},{"id":4687},"중첩-함수",[4689],{"type":26,"value":4690},"중첩 함수",{"type":17,"tag":29,"props":4692,"children":4693},{},[4694],{"type":26,"value":4695},"함수 내부에 정의된 함수를 중첩 함수 또는 내부 함수라 한다.",{"type":17,"tag":29,"props":4697,"children":4698},{},[4699],{"type":26,"value":4700},"중첩 함수를 포함하는 함수를 외부 함수라 부른다.",{"type":17,"tag":29,"props":4702,"children":4703},{},[4704],{"type":26,"value":4705},"일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수의 역할을 한다.",{"type":17,"tag":1144,"props":4707,"children":4709},{"id":4708},"콜백함수",[4710],{"type":26,"value":4708},{"type":17,"tag":29,"props":4712,"children":4713},{},[4714,4716,4721,4723,4728],{"type":26,"value":4715},"함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 ",{"type":17,"tag":64,"props":4717,"children":4718},{},[4719],{"type":26,"value":4720},"콜백 함수",{"type":26,"value":4722},"라고 하며, 매개 변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수를 ",{"type":17,"tag":64,"props":4724,"children":4725},{},[4726],{"type":26,"value":4727},"고차 함수",{"type":26,"value":4729},"라고 한다.",{"type":17,"tag":29,"props":4731,"children":4732},{},[4733],{"type":26,"value":4734},"콜백함수도 고차 함수에 전달되어 헬퍼 함수의 역할을 한다.",{"type":17,"tag":29,"props":4736,"children":4737},{},[4738],{"type":26,"value":4739},"고차 함수는 콜백 함수를 자신의 일부분으로 합성한다.",{"type":17,"tag":29,"props":4741,"children":4742},{},[4743],{"type":26,"value":4744},"고차 함수는 매개변수를 통해 전달받은 콜백 함수의 호출 시점을 결정해서 호출한다.",{"type":17,"tag":29,"props":4746,"children":4747},{},[4748],{"type":26,"value":4749},"콜백 함수는 고차 함수에 의해 호출되며 이때 고차 함수는 필요에 따라 콜백 함수에 인수를 전달할 수 있다.",{"type":17,"tag":84,"props":4751,"children":4754},{"className":4752,"code":4753,"language":11,"meta":8},[87],"// 고차함수\nfunction repeat(n, f) {\n    for (var i = 0; i \u003C n; i++) {\n        // 콜백 함수\n        f(i);\n    }\n}\n\nvar logAll = function(i) {\n    console.log(i);\n}\n",[4755],{"type":17,"tag":91,"props":4756,"children":4757},{"__ignoreMap":8},[4758],{"type":26,"value":4753},{"type":17,"tag":84,"props":4760,"children":4763},{"className":4761,"code":4762,"language":11,"meta":8},[87],"// 고차 함수 map\n[1, 2, 3].map(function (item) {});\n",[4764],{"type":17,"tag":91,"props":4765,"children":4766},{"__ignoreMap":8},[4767],{"type":26,"value":4762},{"type":17,"tag":1144,"props":4769,"children":4771},{"id":4770},"순수-함수와-비순수-함수",[4772],{"type":26,"value":4773},"순수 함수와 비순수 함수",{"type":17,"tag":29,"props":4775,"children":4776},{},[4777],{"type":26,"value":4778},"어떤 외부 상태에 의존하지도 않고 변경하지도 않는, 즉 부수 효과가 없는 함수를 순수 함수라 하고",{"type":17,"tag":29,"props":4780,"children":4781},{},[4782],{"type":26,"value":4783},"외부 상태에 의존하거나 외부 상태를 변경하는, 즉 부수 효과가 있는 함수를 비순수 함수라고 한다.",{"type":17,"tag":84,"props":4785,"children":4788},{"className":4786,"code":4787,"language":11,"meta":8},[87],"var count = 0;\n\n// 순수 함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.\nfunction increase(n) {\n    return ++n;\n}\n// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경\ncount = increase(count);\nconsole.log(count); // 1;\n",[4789],{"type":17,"tag":91,"props":4790,"children":4791},{"__ignoreMap":8},[4792],{"type":26,"value":4787},{"type":17,"tag":84,"props":4794,"children":4797},{"className":4795,"code":4796,"language":11,"meta":8},[87],"var count = 0;\n\n// 비순수 함수\nfunction increase() {\n    return ++count; // 외부 상태에 의존하며 외부 상태를 변경한다.\n}\n\n// 비순수 함수는 외부 상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.\nincrease(count);\nconsole.log(count); // 1;\n",[4798],{"type":17,"tag":91,"props":4799,"children":4800},{"__ignoreMap":8},[4801],{"type":26,"value":4796},{"type":17,"tag":29,"props":4803,"children":4804},{},[4805],{"type":26,"value":43},{"type":17,"tag":429,"props":4807,"children":4808},{},[],{"type":17,"tag":433,"props":4810,"children":4811},{"id":435},[4812],{"type":26,"value":435},{"type":17,"tag":439,"props":4814,"children":4815},{},[4816],{"type":17,"tag":217,"props":4817,"children":4818},{},[4819],{"type":17,"tag":64,"props":4820,"children":4821},{},[4822],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":4824},[4825,4826,4827,4828,4831,4837],{"id":4083,"depth":451,"text":4086},{"id":4177,"depth":451,"text":4180},{"id":4442,"depth":451,"text":4445},{"id":4492,"depth":451,"text":4495,"children":4829},[4830],{"id":4609,"depth":1405,"text":4612},{"id":4666,"depth":451,"text":4669,"children":4832},[4833,4834,4835,4836],{"id":4672,"depth":1405,"text":4675},{"id":4687,"depth":1405,"text":4690},{"id":4708,"depth":1405,"text":4708},{"id":4770,"depth":1405,"text":4773},{"id":435,"depth":451,"text":435},"content:posts:96c9d4b7-fef3-492c-aedb-b53a58deebb1.md","posts/96c9d4b7-fef3-492c-aedb-b53a58deebb1.md",{"_path":4841,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":4842,"description":4843,"tags":4844,"date":4845,"body":4846,"_type":454,"_id":5380,"_source":456,"_file":5381,"_extension":458},"/posts/8285cee9-dfcd-4a53-8b73-3ae542a267a9","자바스크립트 - 8. 원시 값과 객체의 비교","데이터 타입은 크게 원시 타입과 객체 타입으로 구분",[11],"2024-02-15T00:00:00.000Z",{"type":14,"children":4847,"toc":5370},[4848,4867,4871,4883,4895,4899,5029,5155,5161,5166,5175,5180,5185,5189,5194,5198,5204,5213,5221,5225,5234,5238,5244,5249,5258,5269,5273,5278,5287,5291,5295,5300,5304,5309,5322,5328,5337,5341,5346,5350,5353,5360],{"type":17,"tag":29,"props":4849,"children":4850},{},[4851,4853,4858,4860,4865],{"type":26,"value":4852},"데이터 타입은 크게 ",{"type":17,"tag":64,"props":4854,"children":4855},{},[4856],{"type":26,"value":4857},"원시 타입",{"type":26,"value":4859},"과 ",{"type":17,"tag":64,"props":4861,"children":4862},{},[4863],{"type":26,"value":4864},"객체 타입",{"type":26,"value":4866},"으로 구분",{"type":17,"tag":29,"props":4868,"children":4869},{},[4870],{"type":26,"value":43},{"type":17,"tag":29,"props":4872,"children":4873},{},[4874,4876,4881],{"type":26,"value":4875},"원시값은 식별자 메모리 주소에 ",{"type":17,"tag":64,"props":4877,"children":4878},{},[4879],{"type":26,"value":4880},"값",{"type":26,"value":4882},"이 저장되어있고",{"type":17,"tag":29,"props":4884,"children":4885},{},[4886,4888,4893],{"type":26,"value":4887},"객체는 식별자 메모리 주소에 해당 ",{"type":17,"tag":64,"props":4889,"children":4890},{},[4891],{"type":26,"value":4892},"객체 메모리 주소",{"type":26,"value":4894},"가 저장되어 있다",{"type":17,"tag":29,"props":4896,"children":4897},{},[4898],{"type":26,"value":43},{"type":17,"tag":18,"props":4900,"children":4901},{},[4902,4907,4922,4992,5024],{"type":17,"tag":22,"props":4903,"children":4904},{},[4905],{"type":26,"value":4906},"메모리 주소가 'a1', 'a2'가 있다고 할게\n그리고 코드는 let str = \"string\"이야 자바스크립트 엔진은 런타임 이전에 'a1'이나 'a2'중에 메모리 공간을 확보해 (여기서는 'a1'을 확보 했다고 할게\n그리고 식별자 str을 메모리 주소 'a1'에 연결을 한다? (이 문장이 맞는지 모르겠어)\n그리고 런타임시 a1에 \"string\"을 저장한다\n이게 맞을까?",{"type":17,"tag":29,"props":4908,"children":4909},{},[4910,4912,4920],{"type":26,"value":4911},"네, 맞습니다. JavaScript에서 ",{"type":17,"tag":91,"props":4913,"children":4914},{},[4915],{"type":17,"tag":64,"props":4916,"children":4917},{},[4918],{"type":26,"value":4919},"let str = \"string\";",{"type":26,"value":4921}," 코드에 대한 처리를 단순화하여 설명하면 다음과 같습니다:",{"type":17,"tag":213,"props":4923,"children":4924},{},[4925,4943,4967],{"type":17,"tag":217,"props":4926,"children":4927},{},[4928,4933,4935,4941],{"type":17,"tag":64,"props":4929,"children":4930},{},[4931],{"type":26,"value":4932},"메모리 공간 확보",{"type":26,"value":4934},": JavaScript 엔진은 변수 **",{"type":17,"tag":91,"props":4936,"children":4938},{"className":4937},[],[4939],{"type":26,"value":4940},"str",{"type":26,"value":4942},"**에 대한 메모리 공간을 확보합니다. 이를 위해 메모리 주소 'a1'을 할당한다고 가정할 수 있습니다.",{"type":17,"tag":217,"props":4944,"children":4945},{},[4946,4951,4953,4958,4960,4965],{"type":17,"tag":64,"props":4947,"children":4948},{},[4949],{"type":26,"value":4950},"식별자와 메모리 주소 연결",{"type":26,"value":4952},": 식별자 **",{"type":17,"tag":91,"props":4954,"children":4956},{"className":4955},[],[4957],{"type":26,"value":4940},{"type":26,"value":4959},"**은 이 메모리 주소 'a1'에 연결됩니다. 이는 **",{"type":17,"tag":91,"props":4961,"children":4963},{"className":4962},[],[4964],{"type":26,"value":4940},{"type":26,"value":4966},"**이라는 이름을 사용할 때, JavaScript 엔진이 메모리 주소 'a1'을 참조하도록 합니다.",{"type":17,"tag":217,"props":4968,"children":4969},{},[4970,4975,4977,4983,4985,4990],{"type":17,"tag":64,"props":4971,"children":4972},{},[4973],{"type":26,"value":4974},"런타임 시 값 저장",{"type":26,"value":4976},": 코드가 런타임에 실행될 때, 문자열 **",{"type":17,"tag":91,"props":4978,"children":4980},{"className":4979},[],[4981],{"type":26,"value":4982},"\"string\"",{"type":26,"value":4984},"**은 메모리 주소 'a1'에 저장됩니다. 이 경우, **",{"type":17,"tag":91,"props":4986,"children":4988},{"className":4987},[],[4989],{"type":26,"value":4940},{"type":26,"value":4991},"**은 이 문자열 값을 직접적으로 가리키게 됩니다.",{"type":17,"tag":29,"props":4993,"children":4994},{},[4995,4997,5004,5006,5013,5015,5022],{"type":26,"value":4996},"이 과정에서 중요한 점은 문자열 ",{"type":17,"tag":91,"props":4998,"children":4999},{},[5000],{"type":17,"tag":64,"props":5001,"children":5002},{},[5003],{"type":26,"value":4982},{"type":26,"value":5005},"이 원시 타입의 값으로 취급된다는 것입니다. JavaScript에서 문자열은 불변의 원시 타입으로, 변수에 직접 저장됩니다 (복잡한 내부 최적화나 문자열 인터닝을 고려하지 않을 때). 따라서 ",{"type":17,"tag":91,"props":5007,"children":5008},{},[5009],{"type":17,"tag":64,"props":5010,"children":5011},{},[5012],{"type":26,"value":4940},{"type":26,"value":5014}," 변수는 문자열 ",{"type":17,"tag":91,"props":5016,"children":5017},{},[5018],{"type":17,"tag":64,"props":5019,"children":5020},{},[5021],{"type":26,"value":4982},{"type":26,"value":5023},"을 직접적으로 가지고 있으며, 이 값은 메모리 주소 'a1'에 위치하게 됩니다.",{"type":17,"tag":29,"props":5025,"children":5026},{},[5027],{"type":26,"value":5028},"이 설명은 JavaScript 엔진의 메모리 할당과 관리를 단순화한 것이며, 실제 엔진의 구현은 이보다 훨씬 복잡할 수 있습니다. 하지만 기본적인 개념은 위와 같습니다.",{"type":17,"tag":18,"props":5030,"children":5031},{},[5032,5037,5050,5119,5133],{"type":17,"tag":22,"props":5033,"children":5034},{},[5035],{"type":26,"value":5036},"식별자 `str`은 이 메모리 주소 'a1'에 연결됩니다. 이 문장에서\n이 때 str은 메모리에 어디 있는걸까? 내가 이상하게 생각하고 있는건가?",{"type":17,"tag":29,"props":5038,"children":5039},{},[5040,5041,5048],{"type":26,"value":3043},{"type":17,"tag":91,"props":5042,"children":5043},{},[5044],{"type":17,"tag":64,"props":5045,"children":5046},{},[5047],{"type":26,"value":4919},{"type":26,"value":5049}," 코드의 처리 과정에 대해 질문하셨군요. 이 과정을 단계별로 살펴보겠습니다:",{"type":17,"tag":213,"props":5051,"children":5052},{},[5053,5070,5094],{"type":17,"tag":217,"props":5054,"children":5055},{},[5056,5061,5063,5068],{"type":17,"tag":64,"props":5057,"children":5058},{},[5059],{"type":26,"value":5060},"메모리 공간 할당",{"type":26,"value":5062},": JavaScript 엔진이 코드를 실행하기 전에, **",{"type":17,"tag":91,"props":5064,"children":5066},{"className":5065},[],[5067],{"type":26,"value":4940},{"type":26,"value":5069},"**이라는 변수를 위한 메모리 공간을 확보합니다. 이 공간을 메모리 주소 'a1'이라고 가정해 봅시다.",{"type":17,"tag":217,"props":5071,"children":5072},{},[5073,5078,5080,5085,5087,5092],{"type":17,"tag":64,"props":5074,"children":5075},{},[5076],{"type":26,"value":5077},"식별자 연결",{"type":26,"value":5079},": **",{"type":17,"tag":91,"props":5081,"children":5083},{"className":5082},[],[5084],{"type":26,"value":4940},{"type":26,"value":5086},"**이라는 식별자는 메모리 주소 'a1'에 연결됩니다. 즉, **",{"type":17,"tag":91,"props":5088,"children":5090},{"className":5089},[],[5091],{"type":26,"value":4940},{"type":26,"value":5093},"**이라는 이름을 사용할 때 JavaScript 엔진은 'a1'이라는 메모리 주소를 참조하게 됩니다.",{"type":17,"tag":217,"props":5095,"children":5096},{},[5097,5102,5104,5110,5112,5117],{"type":17,"tag":64,"props":5098,"children":5099},{},[5100],{"type":26,"value":5101},"런타임시 값 할당",{"type":26,"value":5103},": 런타임에 이르러 **",{"type":17,"tag":91,"props":5105,"children":5107},{"className":5106},[],[5108],{"type":26,"value":5109},"str = \"string\";",{"type":26,"value":5111},"**이 실행되면, 문자열 **",{"type":17,"tag":91,"props":5113,"children":5115},{"className":5114},[],[5116],{"type":26,"value":4982},{"type":26,"value":5118},"**은 메모리 주소 'a1'에 저장됩니다.",{"type":17,"tag":29,"props":5120,"children":5121},{},[5122,5124,5131],{"type":26,"value":5123},"이 과정에서 ",{"type":17,"tag":91,"props":5125,"children":5126},{},[5127],{"type":17,"tag":64,"props":5128,"children":5129},{},[5130],{"type":26,"value":4940},{"type":26,"value":5132},"이라는 식별자는 실행 컨텍스트의 환경 레코드에 있습니다. 이 환경 레코드는 메모리의 어떤 부분에 있으며, JavaScript 엔진이 변수 이름과 해당 메모리 주소를 매핑하는 데 사용합니다. 환경 레코드의 정확한 저장 위치는 JavaScript 엔진의 구현 세부 사항에 따라 다르며, 개발자가 직접적으로 접근하거나 확인할 수 있는 부분은 아닙니다.",{"type":17,"tag":29,"props":5134,"children":5135},{},[5136,5137,5144,5146,5153],{"type":26,"value":4151},{"type":17,"tag":91,"props":5138,"children":5139},{},[5140],{"type":17,"tag":64,"props":5141,"children":5142},{},[5143],{"type":26,"value":4940},{"type":26,"value":5145},"이라는 식별자는 메모리상의 특정 위치에 있으나, 이 위치는 엔진 내부의 구현에 의존적이며, 식별자는 메모리 주소 'a1'을 참조하여 실제 값 ",{"type":17,"tag":91,"props":5147,"children":5148},{},[5149],{"type":17,"tag":64,"props":5150,"children":5151},{},[5152],{"type":26,"value":4982},{"type":26,"value":5154},"에 접근할 수 있게 됩니다.",{"type":17,"tag":433,"props":5156,"children":5158},{"id":5157},"원시-값",[5159],{"type":26,"value":5160},"원시 값",{"type":17,"tag":29,"props":5162,"children":5163},{},[5164],{"type":26,"value":5165},"원시 타입의 값, 즉 원시 값은 변경 불가능한 값",{"type":17,"tag":84,"props":5167,"children":5170},{"className":5168,"code":5169,"language":11,"meta":8},[87],"var score;\nscore = 80;\nscore = 90;\n",[5171],{"type":17,"tag":91,"props":5172,"children":5173},{"__ignoreMap":8},[5174],{"type":26,"value":5169},{"type":17,"tag":29,"props":5176,"children":5177},{},[5178],{"type":26,"value":5179},"undefined가 80으로 바뀌고 80이 90으로 바뀌는게 아니라",{"type":17,"tag":29,"props":5181,"children":5182},{},[5183],{"type":26,"value":5184},"값은 새로운 메모리 공간을 확보하고 값을 저장한 후, 변수는 원시 값을 가리킨다.",{"type":17,"tag":110,"props":5186,"children":5188},{"src":5187},"/blog/images/fbafac7e-94da-4242-9183-c10db9ee058b.png",[],{"type":17,"tag":29,"props":5190,"children":5191},{},[5192],{"type":26,"value":5193},"불변성을 갖는 원시 값을 할당한 변수는 재할당 이외에 변수 값을 변경할 수 있는 방법이 없다.",{"type":17,"tag":29,"props":5195,"children":5196},{},[5197],{"type":26,"value":43},{"type":17,"tag":1144,"props":5199,"children":5201},{"id":5200},"값에-의한-전달",[5202],{"type":26,"value":5203},"값에 의한 전달",{"type":17,"tag":84,"props":5205,"children":5208},{"className":5206,"code":5207,"language":11,"meta":8},[87],"var score = 80;\n\n// copy 변수에는 score 변수의 값 80이 복사되어 할당된다.\nvar copy = score;\n\nconsole.log(score, copy); // 80 80\nconsole.log(score === copy); // true\n",[5209],{"type":17,"tag":91,"props":5210,"children":5211},{"__ignoreMap":8},[5212],{"type":26,"value":5207},{"type":17,"tag":29,"props":5214,"children":5215},{},[5216],{"type":17,"tag":64,"props":5217,"children":5218},{},[5219],{"type":26,"value":5220},"score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.",{"type":17,"tag":29,"props":5222,"children":5223},{},[5224],{"type":26,"value":43},{"type":17,"tag":84,"props":5226,"children":5229},{"className":5227,"code":5228,"language":11,"meta":8},[87],"score = 100;\nconsole.log(score, copy); // 100 80\nconsole.log(score === copy); // false\n",[5230],{"type":17,"tag":91,"props":5231,"children":5232},{"__ignoreMap":8},[5233],{"type":26,"value":5228},{"type":17,"tag":29,"props":5235,"children":5236},{},[5237],{"type":26,"value":43},{"type":17,"tag":1144,"props":5239,"children":5241},{"id":5240},"원시-값인-문자열은-다른-원시-값과-비교할-때-독특한-특징이-있음",[5242],{"type":26,"value":5243},"원시 값인 문자열은 다른 원시 값과 비교할 때 독특한 특징이 있음",{"type":17,"tag":29,"props":5245,"children":5246},{},[5247],{"type":26,"value":5248},"문자열은 유사 배열 객체이면서 이터러블이므로 배열과 유사하게 각 문자에 접근할 수 있다.",{"type":17,"tag":84,"props":5250,"children":5253},{"className":5251,"code":5252,"language":11,"meta":8},[87],"var str = 'string';\n\n// 배열처럼 인덱스를 사용해 각 문자에 접근할 수 있다.\nconsole.log(str[0]); // s\n\n// 원시 값인 문자열이 객체처럼 동작한다.\nconsole.log(str.length);\nconsole.log(str.toUpperCase());\n",[5254],{"type":17,"tag":91,"props":5255,"children":5256},{"__ignoreMap":8},[5257],{"type":26,"value":5252},{"type":17,"tag":29,"props":5259,"children":5260},{},[5261,5263,5267],{"type":26,"value":5262},"어떻게 원시 값이 객체처럼 동작할까? 그 이유는 원시 값을 감싸는 ",{"type":17,"tag":64,"props":5264,"children":5265},{},[5266],{"type":26,"value":1502},{"type":26,"value":5268},"로 자동 변환되기 때문이다. 자세한건 이후에",{"type":17,"tag":29,"props":5270,"children":5271},{},[5272],{"type":26,"value":43},{"type":17,"tag":29,"props":5274,"children":5275},{},[5276],{"type":26,"value":5277},"여기서 퀴즈!",{"type":17,"tag":84,"props":5279,"children":5282},{"className":5280,"code":5281,"language":11,"meta":8},[87],"var arr = [1, 2, 3];\narr[0] = 4;\nconsole.log(arr) // ??\n\nvar str = 'string';\nstr[0] = 'S';\nconsole.log(str); // ??\n",[5283],{"type":17,"tag":91,"props":5284,"children":5285},{"__ignoreMap":8},[5286],{"type":26,"value":5281},{"type":17,"tag":29,"props":5288,"children":5289},{},[5290],{"type":26,"value":43},{"type":17,"tag":433,"props":5292,"children":5293},{"id":3151},[5294],{"type":26,"value":3151},{"type":17,"tag":29,"props":5296,"children":5297},{},[5298],{"type":26,"value":5299},"객체 타입의 값, 즉 객체는 변경 가능한 값이다.",{"type":17,"tag":29,"props":5301,"children":5302},{},[5303],{"type":26,"value":43},{"type":17,"tag":29,"props":5305,"children":5306},{},[5307],{"type":26,"value":5308},"용어정리",{"type":17,"tag":439,"props":5310,"children":5311},{},[5312,5317],{"type":17,"tag":217,"props":5313,"children":5314},{},[5315],{"type":26,"value":5316},"일반적으로 원시 값을 할당한 경우 “변수는 O값을 갖는다” 또는 “변수의 값은 O다”라고 표현하고",{"type":17,"tag":217,"props":5318,"children":5319},{},[5320],{"type":26,"value":5321},"객체를 할당한 변수의 경우 “변수는 객체를 참조하고 있다” 또는 “변수는 객체를 가리키고 있다”라고 표현",{"type":17,"tag":1144,"props":5323,"children":5325},{"id":5324},"참조에-의한-전달",[5326],{"type":26,"value":5327},"참조에 의한 전달",{"type":17,"tag":84,"props":5329,"children":5332},{"className":5330,"code":5331,"language":11,"meta":8},[87],"var person = {\n    name: 'Lee'\n}\n\nvar copy = person;\n\ncopy.name = 'kim';\n\nconsole.log(person.name); // kim;\nconsole.log(copy.name); // kim;\n",[5333],{"type":17,"tag":91,"props":5334,"children":5335},{"__ignoreMap":8},[5336],{"type":26,"value":5331},{"type":17,"tag":29,"props":5338,"children":5339},{},[5340],{"type":26,"value":43},{"type":17,"tag":29,"props":5342,"children":5343},{},[5344],{"type":26,"value":5345},"정확한 용어는 존재하지 않지만 전달되는 값의 종류에 원시 값인지 참조 값인지 구별해서 강조하는 의미에서 “값에 의한 전달”, “참조에 의한 전달”로 구분하여 부르기 함.",{"type":17,"tag":29,"props":5347,"children":5348},{},[5349],{"type":26,"value":43},{"type":17,"tag":429,"props":5351,"children":5352},{},[],{"type":17,"tag":433,"props":5354,"children":5355},{"id":435},[5356],{"type":17,"tag":64,"props":5357,"children":5358},{},[5359],{"type":26,"value":435},{"type":17,"tag":439,"props":5361,"children":5362},{},[5363],{"type":17,"tag":217,"props":5364,"children":5365},{},[5366],{"type":17,"tag":64,"props":5367,"children":5368},{},[5369],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":5371},[5372,5376,5379],{"id":5157,"depth":451,"text":5160,"children":5373},[5374,5375],{"id":5200,"depth":1405,"text":5203},{"id":5240,"depth":1405,"text":5243},{"id":3151,"depth":451,"text":3151,"children":5377},[5378],{"id":5324,"depth":1405,"text":5327},{"id":435,"depth":451,"text":435},"content:posts:8285cee9-dfcd-4a53-8b73-3ae542a267a9.md","posts/8285cee9-dfcd-4a53-8b73-3ae542a267a9.md",{"_path":5383,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":5384,"description":5385,"tags":5386,"date":5387,"body":5388,"_type":454,"_id":5531,"_source":456,"_file":5532,"_extension":458},"/posts/8a8bd47c-ecd1-42d9-b1ee-efbff20134e8","자바스크립트 - 7. 객체 리터럴","자바스크립트는 객체 기반의 프로그래밍 언어이다!",[11],"2024-02-14T00:00:00.000Z",{"type":14,"children":5389,"toc":5527},[5390,5394,5405,5411,5420,5432,5436,5441,5445,5450,5476,5485,5489,5494,5503,5507,5510,5517],{"type":17,"tag":29,"props":5391,"children":5392},{},[5393],{"type":26,"value":5385},{"type":17,"tag":29,"props":5395,"children":5396},{},[5397,5399,5403],{"type":26,"value":5398},"원시 값을 제외한 나머지 값(함수, 배열, 정규 표현식 등)은 모두 ",{"type":17,"tag":64,"props":5400,"children":5401},{},[5402],{"type":26,"value":3151},{"type":26,"value":5404},"다",{"type":17,"tag":433,"props":5406,"children":5408},{"id":5407},"객체-리터럴에-의한-객체-생성",[5409],{"type":26,"value":5410},"객체 리터럴에 의한 객체 생성",{"type":17,"tag":84,"props":5412,"children":5415},{"className":5413,"code":5414,"language":11,"meta":8},[87],"var person = {\n    name: 'Lee',\n    sayHello: function() {\n        console.log(`Hello! My name is ${this.name}`);\n    }\n};\n",[5416],{"type":17,"tag":91,"props":5417,"children":5418},{"__ignoreMap":8},[5419],{"type":26,"value":5414},{"type":17,"tag":29,"props":5421,"children":5422},{},[5423,5425,5430],{"type":26,"value":5424},"객체 리터럴의 중괄호는 코드 블록을 의미하지 않는다. 코드 블록의 닫는 중괄호 뒤에는 세미콜론을 붙이지 않는다. 하지만 객체 리터럴은 ",{"type":17,"tag":64,"props":5426,"children":5427},{},[5428],{"type":26,"value":5429},"값으로 평가되는 표현식",{"type":26,"value":5431},"이다. 따라서 뒤에 세미콜론을 붙인다.",{"type":17,"tag":29,"props":5433,"children":5434},{},[5435],{"type":26,"value":43},{"type":17,"tag":29,"props":5437,"children":5438},{},[5439],{"type":26,"value":5440},"객체 리터럴 외의 객체 생성 방식은 모두 함수를 사용해 객체를 생선한다. (뒤에 함수에서 자세히)",{"type":17,"tag":29,"props":5442,"children":5443},{},[5444],{"type":26,"value":43},{"type":17,"tag":29,"props":5446,"children":5447},{},[5448],{"type":26,"value":5449},"용어 정리",{"type":17,"tag":439,"props":5451,"children":5452},{},[5453,5471],{"type":17,"tag":217,"props":5454,"children":5455},{},[5456,5458],{"type":26,"value":5457},"프로퍼티\n",{"type":17,"tag":439,"props":5459,"children":5460},{},[5461,5466],{"type":17,"tag":217,"props":5462,"children":5463},{},[5464],{"type":26,"value":5465},"프로퍼티 키",{"type":17,"tag":217,"props":5467,"children":5468},{},[5469],{"type":26,"value":5470},"프로퍼티 값",{"type":17,"tag":217,"props":5472,"children":5473},{},[5474],{"type":26,"value":5475},"메서드: 객체에 묶여 있는 함수 (일반 함수와 구분하기 위해 메서드라 부른다.)",{"type":17,"tag":84,"props":5477,"children":5480},{"className":5478,"code":5479,"language":11,"meta":8},[87],"var circle = {\n    radius: 5, // \u003C- 프로퍼티: radious(프로퍼티 키), 5(프로퍼티 값)\n    getDiameter: function () { // \u003C- 메서드\n        return 2 * this.radius; \n    }\n}\n",[5481],{"type":17,"tag":91,"props":5482,"children":5483},{"__ignoreMap":8},[5484],{"type":26,"value":5479},{"type":17,"tag":29,"props":5486,"children":5487},{},[5488],{"type":26,"value":43},{"type":17,"tag":29,"props":5490,"children":5491},{},[5492],{"type":26,"value":5493},"객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환하다. 이때 ReferenceError가 발생하지 않는데 주의",{"type":17,"tag":84,"props":5495,"children":5498},{"className":5496,"code":5497,"language":11,"meta":8},[87],"circle.name; // undefined\n",[5499],{"type":17,"tag":91,"props":5500,"children":5501},{"__ignoreMap":8},[5502],{"type":26,"value":5497},{"type":17,"tag":29,"props":5504,"children":5505},{},[5506],{"type":26,"value":43},{"type":17,"tag":429,"props":5508,"children":5509},{},[],{"type":17,"tag":433,"props":5511,"children":5512},{"id":435},[5513],{"type":17,"tag":64,"props":5514,"children":5515},{},[5516],{"type":26,"value":435},{"type":17,"tag":439,"props":5518,"children":5519},{},[5520],{"type":17,"tag":217,"props":5521,"children":5522},{},[5523],{"type":17,"tag":64,"props":5524,"children":5525},{},[5526],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":5528},[5529,5530],{"id":5407,"depth":451,"text":5410},{"id":435,"depth":451,"text":435},"content:posts:8a8bd47c-ecd1-42d9-b1ee-efbff20134e8.md","posts/8a8bd47c-ecd1-42d9-b1ee-efbff20134e8.md",{"_path":5534,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":5535,"description":8,"tags":5536,"date":5537,"body":5538,"_type":454,"_id":5798,"_source":456,"_file":5799,"_extension":458},"/posts/22bcd32f-2a8d-404b-a78c-914d58c369bb","자바스크립트 - 6. 타입 변환과 단축 평가",[11],"2024-02-13T00:00:00.000Z",{"type":14,"children":5539,"toc":5787},[5540,5546,5554,5563,5571,5580,5584,5592,5596,5602,5610,5619,5623,5629,5638,5642,5648,5681,5685,5690,5695,5704,5708,5713,5722,5726,5732,5737,5746,5752,5757,5766,5770,5773,5777],{"type":17,"tag":433,"props":5541,"children":5543},{"id":5542},"타입-변환",[5544],{"type":26,"value":5545},"타입 변환",{"type":17,"tag":439,"props":5547,"children":5548},{},[5549],{"type":17,"tag":217,"props":5550,"children":5551},{},[5552],{"type":26,"value":5553},"명시적 타입 변환(explicit coercion), 타입 캐스팅(type casting)",{"type":17,"tag":84,"props":5555,"children":5558},{"className":5556,"code":5557,"language":11,"meta":8},[87],"var x = 10;\nvar str = x.toString() // \u003C- 명시적\n",[5559],{"type":17,"tag":91,"props":5560,"children":5561},{"__ignoreMap":8},[5562],{"type":26,"value":5557},{"type":17,"tag":439,"props":5564,"children":5565},{},[5566],{"type":17,"tag":217,"props":5567,"children":5568},{},[5569],{"type":26,"value":5570},"암묵적 타입 변환(implicit coercion), 타입 강제 변환(type coercion)",{"type":17,"tag":84,"props":5572,"children":5575},{"className":5573,"code":5574,"language":11,"meta":8},[87],"var x = 10;\nvar str = x + ''; // \u003C- 암묵적\n",[5576],{"type":17,"tag":91,"props":5577,"children":5578},{"__ignoreMap":8},[5579],{"type":26,"value":5574},{"type":17,"tag":29,"props":5581,"children":5582},{},[5583],{"type":26,"value":43},{"type":17,"tag":1530,"props":5585,"children":5586},{},[5587],{"type":17,"tag":29,"props":5588,"children":5589},{},[5590],{"type":26,"value":5591},"둘다 기존 원시 값을 직접 변경하는 것은 아님\n원시값은 변경 불가능한 값(immutable value)\n타입 변환이란 기존 원시 값을 사용해 다른 타입의 새로운 원시 값을 생성",{"type":17,"tag":29,"props":5593,"children":5594},{},[5595],{"type":26,"value":43},{"type":17,"tag":1144,"props":5597,"children":5599},{"id":5598},"는-문자열-연결-연산자-산술-연산자-두-연산-역할을-함",[5600],{"type":26,"value":5601},"+는 문자열 연결 연산자, 산술 연산자 두 연산 역할을 함",{"type":17,"tag":439,"props":5603,"children":5604},{},[5605],{"type":17,"tag":217,"props":5606,"children":5607},{},[5608],{"type":26,"value":5609},"피 연산자중 하나 이상이 문자열이면 문자열 연결 연산자로 동작",{"type":17,"tag":84,"props":5611,"children":5614},{"className":5612,"code":5613,"language":11,"meta":8},[87],"1 + '10' // 110 (string)\n'10' + 2 // 102 (string)\n[10, 20] + '' // 10,20\n",[5615],{"type":17,"tag":91,"props":5616,"children":5617},{"__ignoreMap":8},[5618],{"type":26,"value":5613},{"type":17,"tag":29,"props":5620,"children":5621},{},[5622],{"type":26,"value":43},{"type":17,"tag":1144,"props":5624,"children":5626},{"id":5625},"단항-연산자는-피연산자가-숫자-타입의-값이-아니면-숫자-타입의-값으로-암묵적-타입-변환을-수행",[5627],{"type":26,"value":5628},"+단항 연산자는 피연산자가 숫자 타입의 값이 아니면 숫자 타입의 값으로 암묵적 타입 변환을 수행",{"type":17,"tag":84,"props":5630,"children":5633},{"className":5631,"code":5632,"language":11,"meta":8},[87],"+'' // -> 0\n+'0' // -> 0\n+'1' // 1\n",[5634],{"type":17,"tag":91,"props":5635,"children":5636},{"__ignoreMap":8},[5637],{"type":26,"value":5632},{"type":17,"tag":29,"props":5639,"children":5640},{},[5641],{"type":26,"value":43},{"type":17,"tag":433,"props":5643,"children":5645},{"id":5644},"falsy-값",[5646],{"type":26,"value":5647},"Falsy 값",{"type":17,"tag":439,"props":5649,"children":5650},{},[5651,5656,5661,5666,5671,5676],{"type":17,"tag":217,"props":5652,"children":5653},{},[5654],{"type":26,"value":5655},"false",{"type":17,"tag":217,"props":5657,"children":5658},{},[5659],{"type":26,"value":5660},"undefined",{"type":17,"tag":217,"props":5662,"children":5663},{},[5664],{"type":26,"value":5665},"null",{"type":17,"tag":217,"props":5667,"children":5668},{},[5669],{"type":26,"value":5670},"0, -0",{"type":17,"tag":217,"props":5672,"children":5673},{},[5674],{"type":26,"value":5675},"NaN",{"type":17,"tag":217,"props":5677,"children":5678},{},[5679],{"type":26,"value":5680},"‘’(빈 문자열)",{"type":17,"tag":29,"props":5682,"children":5683},{},[5684],{"type":26,"value":43},{"type":17,"tag":433,"props":5686,"children":5688},{"id":5687},"단축평가",[5689],{"type":26,"value":5687},{"type":17,"tag":29,"props":5691,"children":5692},{},[5693],{"type":26,"value":5694},"&&: 앞이 true여야 뒤를 평가, 아니면 앞을 평가",{"type":17,"tag":84,"props":5696,"children":5699},{"className":5697,"code":5698,"language":11,"meta":8},[87],"false && 'DOG' // false\ntrue && 'DOG' // true\n",[5700],{"type":17,"tag":91,"props":5701,"children":5702},{"__ignoreMap":8},[5703],{"type":26,"value":5698},{"type":17,"tag":29,"props":5705,"children":5706},{},[5707],{"type":26,"value":43},{"type":17,"tag":29,"props":5709,"children":5710},{},[5711],{"type":26,"value":5712},"||: 앞이 true이면 앞을 평가, 앞이 false이면 뒤를평가",{"type":17,"tag":84,"props":5714,"children":5717},{"className":5715,"code":5716,"language":11,"meta":8},[87],"'Cat' || true // 'Cat'\nfalse || 'Cat' // 'Cat'\n",[5718],{"type":17,"tag":91,"props":5719,"children":5720},{"__ignoreMap":8},[5721],{"type":26,"value":5716},{"type":17,"tag":29,"props":5723,"children":5724},{},[5725],{"type":26,"value":43},{"type":17,"tag":433,"props":5727,"children":5729},{"id":5728},"옵셔널-체이닝-연산자",[5730],{"type":26,"value":5731},"옵셔널 체이닝 연산자(?.)",{"type":17,"tag":29,"props":5733,"children":5734},{},[5735],{"type":26,"value":5736},"좌항의 피연산자가 null 또는 undeinfed인 경우 undefined를 반환, 그렇지 않으면 우항의 프로퍼티 참조",{"type":17,"tag":84,"props":5738,"children":5741},{"className":5739,"code":5740,"language":11,"meta":8},[87],"var elem = null;\n\nvar value = elem?.value;\nconsole.log(valule); // undefined\n",[5742],{"type":17,"tag":91,"props":5743,"children":5744},{"__ignoreMap":8},[5745],{"type":26,"value":5740},{"type":17,"tag":433,"props":5747,"children":5749},{"id":5748},"null-병합-연산자",[5750],{"type":26,"value":5751},"null 병합 연산자(??)",{"type":17,"tag":29,"props":5753,"children":5754},{},[5755],{"type":26,"value":5756},"좌항의 피연산자가 null 또는 undefined인 경우 우항의 피 연산자를 반환, 그렇지 않으면 좌항의 피연산자를 반환",{"type":17,"tag":84,"props":5758,"children":5761},{"className":5759,"code":5760,"language":11,"meta":8},[87],"var foo = null ?? 'default string';\nconsole.log(foo); // 'default string';\n",[5762],{"type":17,"tag":91,"props":5763,"children":5764},{"__ignoreMap":8},[5765],{"type":26,"value":5760},{"type":17,"tag":29,"props":5767,"children":5768},{},[5769],{"type":26,"value":43},{"type":17,"tag":429,"props":5771,"children":5772},{},[],{"type":17,"tag":433,"props":5774,"children":5775},{"id":435},[5776],{"type":26,"value":435},{"type":17,"tag":439,"props":5778,"children":5779},{},[5780],{"type":17,"tag":217,"props":5781,"children":5782},{},[5783],{"type":17,"tag":64,"props":5784,"children":5785},{},[5786],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":5788},[5789,5793,5794,5795,5796,5797],{"id":5542,"depth":451,"text":5545,"children":5790},[5791,5792],{"id":5598,"depth":1405,"text":5601},{"id":5625,"depth":1405,"text":5628},{"id":5644,"depth":451,"text":5647},{"id":5687,"depth":451,"text":5687},{"id":5728,"depth":451,"text":5731},{"id":5748,"depth":451,"text":5751},{"id":435,"depth":451,"text":435},"content:posts:22bcd32f-2a8d-404b-a78c-914d58c369bb.md","posts/22bcd32f-2a8d-404b-a78c-914d58c369bb.md",{"_path":5801,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":5802,"description":43,"tags":5803,"date":5804,"body":5805,"_type":454,"_id":5894,"_source":456,"_file":5895,"_extension":458},"/posts/a853b817-57ee-4f1d-99a6-81eb4cade7c4","자바스크립트 - 5. 제어문",[11],"2024-02-12T00:00:00.000Z",{"type":14,"children":5806,"toc":5890},[5807,5811,5816,5821,5825,5830,5834,5842,5851,5855,5864,5869,5873,5876,5880],{"type":17,"tag":29,"props":5808,"children":5809},{},[5810],{"type":26,"value":43},{"type":17,"tag":433,"props":5812,"children":5814},{"id":5813},"break문",[5815],{"type":26,"value":5813},{"type":17,"tag":29,"props":5817,"children":5818},{},[5819],{"type":26,"value":5820},"레이블 문, 반복문, switch 문의 코드 블록을 탈출한다.",{"type":17,"tag":29,"props":5822,"children":5823},{},[5824],{"type":26,"value":43},{"type":17,"tag":29,"props":5826,"children":5827},{},[5828],{"type":26,"value":5829},"그외에 사용하면 SyntaxError",{"type":17,"tag":29,"props":5831,"children":5832},{},[5833],{"type":26,"value":43},{"type":17,"tag":1530,"props":5835,"children":5836},{},[5837],{"type":17,"tag":29,"props":5838,"children":5839},{},[5840],{"type":26,"value":5841},"레이블 문이란 식별자가 붙은 문",{"type":17,"tag":84,"props":5843,"children":5846},{"className":5844,"code":5845,"language":11,"meta":8},[87],"foo: console.log('foo');\n",[5847],{"type":17,"tag":91,"props":5848,"children":5849},{"__ignoreMap":8},[5850],{"type":26,"value":5845},{"type":17,"tag":29,"props":5852,"children":5853},{},[5854],{"type":26,"value":43},{"type":17,"tag":84,"props":5856,"children":5859},{"className":5857,"code":5858,"language":11,"meta":8},[87],"outer: for (var i = 0; i \u003C 3; i++) {\n  for (var j = 0; j \u003C 3; j++) {\n    if (i + j === 3) break outer;\n    console.log(`inner [${i}, ${j}]`)\n  }\n}\n",[5860],{"type":17,"tag":91,"props":5861,"children":5862},{"__ignoreMap":8},[5863],{"type":26,"value":5858},{"type":17,"tag":29,"props":5865,"children":5866},{},[5867],{"type":26,"value":5868},"레이블 문은 중첩된 for 문 외부로 탈출할 때 유용, 그 밖의 경우에는 일반적으로 권장하지 않음",{"type":17,"tag":29,"props":5870,"children":5871},{},[5872],{"type":26,"value":43},{"type":17,"tag":429,"props":5874,"children":5875},{},[],{"type":17,"tag":433,"props":5877,"children":5878},{"id":435},[5879],{"type":26,"value":435},{"type":17,"tag":439,"props":5881,"children":5882},{},[5883],{"type":17,"tag":217,"props":5884,"children":5885},{},[5886],{"type":17,"tag":64,"props":5887,"children":5888},{},[5889],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":5891},[5892,5893],{"id":5813,"depth":451,"text":5813},{"id":435,"depth":451,"text":435},"content:posts:a853b817-57ee-4f1d-99a6-81eb4cade7c4.md","posts/a853b817-57ee-4f1d-99a6-81eb4cade7c4.md",{"_path":5897,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":5898,"description":8,"tags":5899,"date":5900,"body":5901,"_type":454,"_id":6054,"_source":456,"_file":6055,"_extension":458},"/posts/a588f6bc-0a00-4de2-b05b-f7d7d37bc029","자바스크립트 - 4. 연산자",[11],"2024-02-10T00:00:00.000Z",{"type":14,"children":5902,"toc":6048},[5903,5912,5916,5922,5927,5932,5941,5947,5952,5961,5967,5972,5977,5981,5986,5995,6000,6009,6013,6018,6027,6031,6034,6038],{"type":17,"tag":84,"props":5904,"children":5907},{"className":5905,"code":5906,"language":11,"meta":8},[87],"// 산술 연산자\n5 * 4 \n\n// 문자열 연결 연산자\n'My name is ' + 'kim'\n\n// 할당 연산자\ncolor = 'red'\n\n// 비교 연산자\n3 > 5\n\n// 논리 연산자\ntrue && false\n\n// 타입 연산자\ntypeof 'hi'\n",[5908],{"type":17,"tag":91,"props":5909,"children":5910},{"__ignoreMap":8},[5911],{"type":26,"value":5906},{"type":17,"tag":29,"props":5913,"children":5914},{},[5915],{"type":26,"value":43},{"type":17,"tag":433,"props":5917,"children":5919},{"id":5918},"산술-연산자",[5920],{"type":26,"value":5921},"산술 연산자",{"type":17,"tag":29,"props":5923,"children":5924},{},[5925],{"type":26,"value":5926},"전위 증가/감소 연산자(++x)",{"type":17,"tag":29,"props":5928,"children":5929},{},[5930],{"type":26,"value":5931},"후위 증가/감소 연산자(x++);",{"type":17,"tag":84,"props":5933,"children":5936},{"className":5934,"code":5935,"language":11,"meta":8},[87],"var x = 1;\nvar result = ++x; // 산술 연산 후 할당 연산 실행\n\nresult = x++; // 할당 연산 후 산술 연산 실행\n",[5937],{"type":17,"tag":91,"props":5938,"children":5939},{"__ignoreMap":8},[5940],{"type":26,"value":5935},{"type":17,"tag":433,"props":5942,"children":5944},{"id":5943},"할당-연산자",[5945],{"type":26,"value":5946},"할당 연산자",{"type":17,"tag":29,"props":5948,"children":5949},{},[5950],{"type":26,"value":5951},"할당문은 값으로 평가되는 표현식인 문으로서 할당된 값으로 평가된다.",{"type":17,"tag":84,"props":5953,"children":5956},{"className":5954,"code":5955,"language":11,"meta":8},[87],"var a, b, c;\na = b = c = 0;\n\nconsole.log(a, b, c);\n",[5957],{"type":17,"tag":91,"props":5958,"children":5959},{"__ignoreMap":8},[5960],{"type":26,"value":5955},{"type":17,"tag":433,"props":5962,"children":5964},{"id":5963},"비교-연산자",[5965],{"type":26,"value":5966},"비교 연산자",{"type":17,"tag":29,"props":5968,"children":5969},{},[5970],{"type":26,"value":5971},"== : 값을 비교",{"type":17,"tag":29,"props":5973,"children":5974},{},[5975],{"type":26,"value":5976},"===: 값과 타입을 비교",{"type":17,"tag":29,"props":5978,"children":5979},{},[5980],{"type":26,"value":43},{"type":17,"tag":29,"props":5982,"children":5983},{},[5984],{"type":26,"value":5985},"비교 연산자에서 주의할것은 NaN",{"type":17,"tag":84,"props":5987,"children":5990},{"className":5988,"code":5989,"language":11,"meta":8},[87],"NaN === NaN // false\n\nisNaN(NaN); // true\n",[5991],{"type":17,"tag":91,"props":5992,"children":5993},{"__ignoreMap":8},[5994],{"type":26,"value":5989},{"type":17,"tag":29,"props":5996,"children":5997},{},[5998],{"type":26,"value":5999},"숫자 0도 주의",{"type":17,"tag":84,"props":6001,"children":6004},{"className":6002,"code":6003,"language":11,"meta":8},[87],"-0 === +0 // true\n",[6005],{"type":17,"tag":91,"props":6006,"children":6007},{"__ignoreMap":8},[6008],{"type":26,"value":6003},{"type":17,"tag":29,"props":6010,"children":6011},{},[6012],{"type":26,"value":43},{"type":17,"tag":29,"props":6014,"children":6015},{},[6016],{"type":26,"value":6017},"가장 베스트는 ES6에 도입된 Object.is 사용하면 됨",{"type":17,"tag":84,"props":6019,"children":6022},{"className":6020,"code":6021,"language":11,"meta":8},[87],"Object.is(NaN, NaN); // true\nObject.is(-0, +0); // true\n",[6023],{"type":17,"tag":91,"props":6024,"children":6025},{"__ignoreMap":8},[6026],{"type":26,"value":6021},{"type":17,"tag":29,"props":6028,"children":6029},{},[6030],{"type":26,"value":43},{"type":17,"tag":429,"props":6032,"children":6033},{},[],{"type":17,"tag":433,"props":6035,"children":6036},{"id":435},[6037],{"type":26,"value":435},{"type":17,"tag":439,"props":6039,"children":6040},{},[6041],{"type":17,"tag":217,"props":6042,"children":6043},{},[6044],{"type":17,"tag":64,"props":6045,"children":6046},{},[6047],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":6049},[6050,6051,6052,6053],{"id":5918,"depth":451,"text":5921},{"id":5943,"depth":451,"text":5946},{"id":5963,"depth":451,"text":5966},{"id":435,"depth":451,"text":435},"content:posts:a588f6bc-0a00-4de2-b05b-f7d7d37bc029.md","posts/a588f6bc-0a00-4de2-b05b-f7d7d37bc029.md",{"_path":6057,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":6058,"description":6059,"tags":6060,"date":6061,"body":6062,"_type":454,"_id":6223,"_source":456,"_file":6224,"_extension":458},"/posts/c9451712-95a0-44ad-b31e-dc36c9d5bec3","자바스크립트 - 3. 데이터 타입","데이터 타입: 값의 종류",[11],"2024-02-08T00:00:00.000Z",{"type":14,"children":6063,"toc":6216},[6064,6068,6073,6077,6082,6088,6093,6098,6103,6108,6113,6118,6124,6129,6133,6138,6143,6148,6152,6158,6171,6175,6181,6186,6190,6195,6199,6202,6206],{"type":17,"tag":29,"props":6065,"children":6066},{},[6067],{"type":26,"value":6059},{"type":17,"tag":29,"props":6069,"children":6070},{},[6071],{"type":26,"value":6072},"자바스크립트의 모든 값은 데이터 타입을 갖는다.",{"type":17,"tag":29,"props":6074,"children":6075},{},[6076],{"type":26,"value":43},{"type":17,"tag":29,"props":6078,"children":6079},{},[6080],{"type":26,"value":6081},"ES6는 7개의 데이터 타입을 제공",{"type":17,"tag":433,"props":6083,"children":6085},{"id":6084},"원시-타입primitive-type",[6086],{"type":26,"value":6087},"원시 타입(primitive type)",{"type":17,"tag":29,"props":6089,"children":6090},{},[6091],{"type":26,"value":6092},"숫자(number) 타입",{"type":17,"tag":29,"props":6094,"children":6095},{},[6096],{"type":26,"value":6097},"문자열(string) 타입",{"type":17,"tag":29,"props":6099,"children":6100},{},[6101],{"type":26,"value":6102},"불리언(boolean) 타입",{"type":17,"tag":29,"props":6104,"children":6105},{},[6106],{"type":26,"value":6107},"undefined 타입",{"type":17,"tag":29,"props":6109,"children":6110},{},[6111],{"type":26,"value":6112},"null 타입",{"type":17,"tag":29,"props":6114,"children":6115},{},[6116],{"type":26,"value":6117},"심벌(symbol) 타입",{"type":17,"tag":433,"props":6119,"children":6121},{"id":6120},"객체-타입objectreference-type",[6122],{"type":26,"value":6123},"객체 타입(object/reference type)",{"type":17,"tag":29,"props":6125,"children":6126},{},[6127],{"type":26,"value":6128},"객체, 함수, 배열 등",{"type":17,"tag":29,"props":6130,"children":6131},{},[6132],{"type":26,"value":43},{"type":17,"tag":29,"props":6134,"children":6135},{},[6136],{"type":26,"value":6137},"var 키워드는 선언한 변수는 암묵적으로 undefined로 초기화된다.",{"type":17,"tag":29,"props":6139,"children":6140},{},[6141],{"type":26,"value":6142},"undefined가 반환된다면 참조한 변수가 선언 이후 값이 할당된적이 없는, 즉 초기화되지 않은 변수라는 것을 간파할 수 있다.",{"type":17,"tag":29,"props":6144,"children":6145},{},[6146],{"type":26,"value":6147},"tip: undefined를 의도적으로 할당하지말자! null을 쓰자",{"type":17,"tag":29,"props":6149,"children":6150},{},[6151],{"type":26,"value":43},{"type":17,"tag":433,"props":6153,"children":6155},{"id":6154},"데이터-타입의-필요성",[6156],{"type":26,"value":6157},"데이터 타입의 필요성",{"type":17,"tag":439,"props":6159,"children":6160},{},[6161,6166],{"type":17,"tag":217,"props":6162,"children":6163},{},[6164],{"type":26,"value":6165},"값을 저장하거나 참조할 때 메모리 공간의 크기를 결정",{"type":17,"tag":217,"props":6167,"children":6168},{},[6169],{"type":26,"value":6170},"2진수를 어떻게 해석할지 결정",{"type":17,"tag":29,"props":6172,"children":6173},{},[6174],{"type":26,"value":43},{"type":17,"tag":433,"props":6176,"children":6178},{"id":6177},"자바스크립트는-동적-타입-언어",[6179],{"type":26,"value":6180},"자바스크립트는 동적 타입 언어",{"type":17,"tag":29,"props":6182,"children":6183},{},[6184],{"type":26,"value":6185},"자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정(타입 추론type interface)된다.\n그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다. 이러한 특징을 동적 타이핑이라 한다.",{"type":17,"tag":29,"props":6187,"children":6188},{},[6189],{"type":26,"value":43},{"type":17,"tag":29,"props":6191,"children":6192},{},[6193],{"type":26,"value":6194},"그래서 정적타입을 지원하는 typescript를 사용하는게 추세이다.",{"type":17,"tag":29,"props":6196,"children":6197},{},[6198],{"type":26,"value":43},{"type":17,"tag":429,"props":6200,"children":6201},{},[],{"type":17,"tag":433,"props":6203,"children":6204},{"id":435},[6205],{"type":26,"value":435},{"type":17,"tag":439,"props":6207,"children":6208},{},[6209],{"type":17,"tag":217,"props":6210,"children":6211},{},[6212],{"type":17,"tag":64,"props":6213,"children":6214},{},[6215],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":6217},[6218,6219,6220,6221,6222],{"id":6084,"depth":451,"text":6087},{"id":6120,"depth":451,"text":6123},{"id":6154,"depth":451,"text":6157},{"id":6177,"depth":451,"text":6180},{"id":435,"depth":451,"text":435},"content:posts:c9451712-95a0-44ad-b31e-dc36c9d5bec3.md","posts/c9451712-95a0-44ad-b31e-dc36c9d5bec3.md",{"_path":6226,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":6227,"description":8,"tags":6228,"date":6229,"body":6230,"_type":454,"_id":6426,"_source":456,"_file":6427,"_extension":458},"/posts/1c1fa102-7f33-48ab-8077-31865e9dd7bc","자바스크립트 - 2. 표현식과 문",[11],"2024-01-31T00:00:00.000Z",{"type":14,"children":6231,"toc":6418},[6232,6236,6240,6245,6250,6255,6264,6276,6281,6292,6297,6302,6307,6316,6321,6326,6331,6336,6340,6346,6365,6369,6374,6383,6387,6392,6401,6404,6408],{"type":17,"tag":72,"props":6233,"children":6234},{"id":5308},[6235],{"type":26,"value":5308},{"type":17,"tag":433,"props":6237,"children":6238},{"id":4880},[6239],{"type":26,"value":4880},{"type":17,"tag":29,"props":6241,"children":6242},{},[6243],{"type":26,"value":6244},"값은 식(표현식expression)이 평가(evaluate)되어 생성된 결과.",{"type":17,"tag":29,"props":6246,"children":6247},{},[6248],{"type":26,"value":6249},"평가란 식을 해석해서 값을 생성하거나 참조하는 것을 의미.",{"type":17,"tag":29,"props":6251,"children":6252},{},[6253],{"type":26,"value":6254},"그냥 쉽게 메모리에 저장되는 값이라고 생각",{"type":17,"tag":84,"props":6256,"children":6259},{"className":6257,"code":6258,"language":11,"meta":8},[87],"var sum = 10 + 20;\n\n// sum에 10 + 20이 할당되는게 아닌 30이 할당되는것이다. \n// 따라서 10 + 20은 할당 이전에 평가(30)되어 값을 생성해야 한다.\n\n\n5 * 5\n// 5*5가 평가되어 메모리에 25가 저장 (but.이 값은 어느 변수에도 할당이 안되어 있기 때문에 가비지 컬렉터에 의해서 지워짐)\n",[6260],{"type":17,"tag":91,"props":6261,"children":6262},{"__ignoreMap":8},[6263],{"type":26,"value":6258},{"type":17,"tag":29,"props":6265,"children":6266},{},[6267,6269,6274],{"type":26,"value":6268},"변수는 ",{"type":17,"tag":64,"props":6270,"children":6271},{},[6272],{"type":26,"value":6273},"하나의 값",{"type":26,"value":6275},"을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름이라고 했다. 따라서 변수에 할당되는 것은 값이다.",{"type":17,"tag":433,"props":6277,"children":6279},{"id":6278},"리터럴",[6280],{"type":26,"value":6278},{"type":17,"tag":29,"props":6282,"children":6283},{},[6284,6286,6290],{"type":26,"value":6285},"리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 ",{"type":17,"tag":64,"props":6287,"children":6288},{},[6289],{"type":26,"value":4880},{"type":26,"value":6291},"을 생성하는 표기법(notation)",{"type":17,"tag":29,"props":6293,"children":6294},{},[6295],{"type":26,"value":6296},"자바스크립트 엔진은 코드가 실행되는 시점인 런타임에 리터럴을 평가해 값을 생성한다. 즉, 리터럴은 값을 생성하기 위해 미리 약속한 표기법이라고 할 수 있다.",{"type":17,"tag":433,"props":6298,"children":6300},{"id":6299},"표현식",[6301],{"type":26,"value":6299},{"type":17,"tag":29,"props":6303,"children":6304},{},[6305],{"type":26,"value":6306},"표현식은 값으로 평가될 수 있는 문이다. 즉, 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조.",{"type":17,"tag":84,"props":6308,"children":6311},{"className":6309,"code":6310,"language":11,"meta":8},[87],"var score = 50 + 50;\n// 50 + 50은 평가되어 100을 생성 (메모리에 기억)하였으므로 표현식이다.\n\nscore; // 식별자 참조는 값을 생성하지는 않지만 메모리에서 불러와 값으로 평가되므로 표현식이다.\n",[6312],{"type":17,"tag":91,"props":6313,"children":6314},{"__ignoreMap":8},[6315],{"type":26,"value":6310},{"type":17,"tag":433,"props":6317,"children":6319},{"id":6318},"문",[6320],{"type":26,"value":6318},{"type":17,"tag":29,"props":6322,"children":6323},{},[6324],{"type":26,"value":6325},"프로그램을 구성하는 기본 단위이자 최소 실행 단위.",{"type":17,"tag":29,"props":6327,"children":6328},{},[6329],{"type":26,"value":6330},"문을 명령문이라고도 부른다. 즉 문은 컴퓨터에 내리는 명령이다.",{"type":17,"tag":29,"props":6332,"children":6333},{},[6334],{"type":26,"value":6335},"문은 선언문, 할당문, 조건문, 반복문 등으로 구분",{"type":17,"tag":29,"props":6337,"children":6338},{},[6339],{"type":26,"value":43},{"type":17,"tag":433,"props":6341,"children":6343},{"id":6342},"표현식인-문과-표현식이-아닌-문",[6344],{"type":26,"value":6345},"표현식인 문과 표현식이 아닌 문",{"type":17,"tag":29,"props":6347,"children":6348},{},[6349,6351,6356,6358,6363],{"type":26,"value":6350},"문에는 ",{"type":17,"tag":91,"props":6352,"children":6353},{},[6354],{"type":26,"value":6355},"표현식인 문",{"type":26,"value":6357}," 과 ",{"type":17,"tag":91,"props":6359,"children":6360},{},[6361],{"type":26,"value":6362},"표현식이 아닌문",{"type":26,"value":6364}," 이 있다.",{"type":17,"tag":29,"props":6366,"children":6367},{},[6368],{"type":26,"value":43},{"type":17,"tag":29,"props":6370,"children":6371},{},[6372],{"type":26,"value":6373},"할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.",{"type":17,"tag":84,"props":6375,"children":6378},{"className":6376,"code":6377,"language":11,"meta":8},[87],"var x; // 선언문은 표현식이 아닌 문\n\nx = 100; // 할당문은 표현식인 문\n",[6379],{"type":17,"tag":91,"props":6380,"children":6381},{"__ignoreMap":8},[6382],{"type":26,"value":6377},{"type":17,"tag":29,"props":6384,"children":6385},{},[6386],{"type":26,"value":43},{"type":17,"tag":29,"props":6388,"children":6389},{},[6390],{"type":26,"value":6391},"표현식인 문은 변수에 할당 가능하지만 표현식이 아닌 문은 변수에 할당이 불가하다.",{"type":17,"tag":84,"props":6393,"children":6396},{"className":6394,"code":6395,"language":11,"meta":8},[87],"var x = 100; // 가능\n\nvar x = var foo; // 불가능\n",[6397],{"type":17,"tag":91,"props":6398,"children":6399},{"__ignoreMap":8},[6400],{"type":26,"value":6395},{"type":17,"tag":429,"props":6402,"children":6403},{},[],{"type":17,"tag":433,"props":6405,"children":6406},{"id":435},[6407],{"type":26,"value":435},{"type":17,"tag":439,"props":6409,"children":6410},{},[6411],{"type":17,"tag":217,"props":6412,"children":6413},{},[6414],{"type":17,"tag":64,"props":6415,"children":6416},{},[6417],{"type":26,"value":449},{"title":8,"searchDepth":451,"depth":451,"links":6419},[6420,6421,6422,6423,6424,6425],{"id":4880,"depth":451,"text":4880},{"id":6278,"depth":451,"text":6278},{"id":6299,"depth":451,"text":6299},{"id":6318,"depth":451,"text":6318},{"id":6342,"depth":451,"text":6345},{"id":435,"depth":451,"text":435},"content:posts:1c1fa102-7f33-48ab-8077-31865e9dd7bc.md","posts/1c1fa102-7f33-48ab-8077-31865e9dd7bc.md",{"_path":6429,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":6430,"description":6431,"tags":6432,"date":6433,"body":6434,"_type":454,"_id":6845,"_source":456,"_file":6846,"_extension":458},"/posts/cbbee657-7850-46ab-b52b-43341e800d37","자바스크립트 - 1. 변수","사상누각이라고 토대나 기초가 튼튼하지 않으면 금방 무너지게 되어 있다. 이번에 쉬면서 javascript 기본부터 토대를 다져야겠다.",[11],"2024-01-26T00:00:00.000Z",{"type":14,"children":6435,"toc":6836},[6436,6440,6446,6455,6460,6465,6469,6474,6478,6483,6487,6492,6497,6509,6521,6539,6543,6547,6551,6556,6573,6581,6585,6591,6596,6608,6614,6618,6623,6636,6640,6645,6654,6658,6664,6673,6677,6682,6687,6695,6699,6710,6714,6720,6729,6738,6758,6762,6768,6773,6782,6790,6794,6799,6811,6815,6818,6822,6832],{"type":17,"tag":29,"props":6437,"children":6438},{},[6439],{"type":26,"value":6431},{"type":17,"tag":433,"props":6441,"children":6443},{"id":6442},"변수란",[6444],{"type":26,"value":6445},"변수란?",{"type":17,"tag":84,"props":6447,"children":6450},{"className":6448,"code":6449,"language":11,"meta":8},[87],"10 + 20\n",[6451],{"type":17,"tag":91,"props":6452,"children":6453},{"__ignoreMap":8},[6454],{"type":26,"value":6449},{"type":17,"tag":29,"props":6456,"children":6457},{},[6458],{"type":26,"value":6459},"위 코드는 javascript에서 어떻게 동작할까? 우선 각 임의의 메모리 셀에 10, 20으로 저장(기억) 되고 CPU는 이 값을 읽어들여 연산을 수행한다. 임의의 메모리 셀에 30으로 저장(기억)된다.",{"type":17,"tag":29,"props":6461,"children":6462},{},[6463],{"type":26,"value":6464},"이때 우리는 10 + 20의 결과를 재사용 하고 싶다면 메모리 주소에 직접 접근하는 것외에는 방법이 없다. 하지만 메모리 주소를 통해 직접 접근하는 것은 치명적 오류를 발생시킬 가능성이 높다. 자바스크립트는 개발자가 직접적으로 메모리 제어를 허용하지 않는다.",{"type":17,"tag":29,"props":6466,"children":6467},{},[6468],{"type":26,"value":43},{"type":17,"tag":29,"props":6470,"children":6471},{},[6472],{"type":26,"value":6473},"이때 프로그래밍 언어는 기억하고 싶은 값을 메모리에 저장하고, 저장된 값을 읽어 들여 재사용하기 위해 변수라는 메커니즘을 제공한다.",{"type":17,"tag":29,"props":6475,"children":6476},{},[6477],{"type":26,"value":43},{"type":17,"tag":29,"props":6479,"children":6480},{},[6481],{"type":26,"value":6482},"변수는 메모리에 접근하기 위해 사용되는 식별자다.",{"type":17,"tag":29,"props":6484,"children":6485},{},[6486],{"type":26,"value":43},{"type":17,"tag":29,"props":6488,"children":6489},{},[6490],{"type":26,"value":6491},"변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.",{"type":17,"tag":29,"props":6493,"children":6494},{},[6495],{"type":26,"value":6496},"값의 위치를 가리키는 상징적인 이름",{"type":17,"tag":29,"props":6498,"children":6499},{},[6500,6502,6507],{"type":26,"value":6501},"메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름을 ",{"type":17,"tag":64,"props":6503,"children":6504},{},[6505],{"type":26,"value":6506},"변수 이름(또는 변수명)",{"type":26,"value":6508},"이라하고",{"type":17,"tag":29,"props":6510,"children":6511},{},[6512,6514,6519],{"type":26,"value":6513},"변수에 저장된 값을 ",{"type":17,"tag":64,"props":6515,"children":6516},{},[6517],{"type":26,"value":6518},"변수 값",{"type":26,"value":6520},"이라고 한다.",{"type":17,"tag":29,"props":6522,"children":6523},{},[6524,6526,6531,6533,6538],{"type":26,"value":6525},"변수에 값을 저장하는 것을 ",{"type":17,"tag":64,"props":6527,"children":6528},{},[6529],{"type":26,"value":6530},"할당(대입, 저장)",{"type":26,"value":6532},"이라고 하고, 변수에 저장된 값을 읽어 들이는 것을 ",{"type":17,"tag":64,"props":6534,"children":6535},{},[6536],{"type":26,"value":6537},"참조",{"type":26,"value":1504},{"type":17,"tag":110,"props":6540,"children":6542},{"src":6541},"/blog/images/32be2175-68c5-4475-bfba-d574c4c2391d.png",[],{"type":17,"tag":110,"props":6544,"children":6546},{"src":6545},"/blog/images/27d0e045-0693-43f2-8ede-dc32b3f37b19.png",[],{"type":17,"tag":29,"props":6548,"children":6549},{},[6550],{"type":26,"value":43},{"type":17,"tag":433,"props":6552,"children":6554},{"id":6553},"식별자",[6555],{"type":26,"value":6553},{"type":17,"tag":29,"props":6557,"children":6558},{},[6559,6561,6565,6567,6571],{"type":26,"value":6560},"변수 이름을 ",{"type":17,"tag":64,"props":6562,"children":6563},{},[6564],{"type":26,"value":6553},{"type":26,"value":6566},"라고도 한다. ",{"type":17,"tag":64,"props":6568,"children":6569},{},[6570],{"type":26,"value":6553},{"type":26,"value":6572},"는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.",{"type":17,"tag":1530,"props":6574,"children":6575},{},[6576],{"type":17,"tag":29,"props":6577,"children":6578},{},[6579],{"type":26,"value":6580},"식별자라는 용어는 변수 이름에만 국한해서 사용하지 않음. 예를 들어, 변수, 함수, 클래스 등의 이름은 모두 식별자",{"type":17,"tag":29,"props":6582,"children":6583},{},[6584],{"type":26,"value":43},{"type":17,"tag":433,"props":6586,"children":6588},{"id":6587},"변수-선언",[6589],{"type":26,"value":6590},"변수 선언",{"type":17,"tag":29,"props":6592,"children":6593},{},[6594],{"type":26,"value":6595},"변수를 생성하는 것을 말함. 더 자세히는 메모리 공간을 확보하고 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있게 준비. 변수 선언에 의해 확보된 메모리 공간은 누구도 확보된 메모리 공간을 사용할 수 없도록 보호 됨.",{"type":17,"tag":29,"props":6597,"children":6598},{},[6599,6601,6606],{"type":26,"value":6600},"변수 선언은 ",{"type":17,"tag":91,"props":6602,"children":6603},{},[6604],{"type":26,"value":6605},"var, let ,const",{"type":26,"value":6607}," 키워드를 사용",{"type":17,"tag":1858,"props":6609,"children":6611},{"emogi":6610,"color":1861},"⛔",[6612],{"type":26,"value":6613},"var 키워드는 여러 단점이 있음. 대표적으로 블록 레벨 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다는 것. 때문에 의도치 않게 전역 변수로 선언이 되어 심각한 부작용이 발생하기도 함.",{"type":17,"tag":29,"props":6615,"children":6616},{},[6617],{"type":26,"value":43},{"type":17,"tag":29,"props":6619,"children":6620},{},[6621],{"type":26,"value":6622},"자바스크립트 엔진은 변수 선언을 다음과 같은 2단계에 거쳐 수행",{"type":17,"tag":439,"props":6624,"children":6625},{},[6626,6631],{"type":17,"tag":217,"props":6627,"children":6628},{},[6629],{"type":26,"value":6630},"선언 단계: 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.",{"type":17,"tag":217,"props":6632,"children":6633},{},[6634],{"type":26,"value":6635},"초기화 단계: 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.",{"type":17,"tag":29,"props":6637,"children":6638},{},[6639],{"type":26,"value":43},{"type":17,"tag":29,"props":6641,"children":6642},{},[6643],{"type":26,"value":6644},"var 키워드는 선언 단계와 초기화 단계가 동시에 진행 됨.",{"type":17,"tag":84,"props":6646,"children":6649},{"className":6647,"code":6648,"language":11,"meta":8},[87],"var score;\n// 선언 단계를 통해 변수 이름 score를 등록하고 (메모리 공간을 확보하고)\n// 초기화 단계를 통해 암묵적으로 undefined를 할당해 초기화\n",[6650],{"type":17,"tag":91,"props":6651,"children":6652},{"__ignoreMap":8},[6653],{"type":26,"value":6648},{"type":17,"tag":29,"props":6655,"children":6656},{},[6657],{"type":26,"value":43},{"type":17,"tag":433,"props":6659,"children":6661},{"id":6660},"변수-선언의-실행-시점과-변수-호이스팅",[6662],{"type":26,"value":6663},"변수 선언의 실행 시점과 변수 호이스팅",{"type":17,"tag":84,"props":6665,"children":6668},{"className":6666,"code":6667,"language":11,"meta":8},[87],"console.log(score); // undefined\nvar score = 1;\n",[6669],{"type":17,"tag":91,"props":6670,"children":6671},{"__ignoreMap":8},[6672],{"type":26,"value":6667},{"type":17,"tag":29,"props":6674,"children":6675},{},[6676],{"type":26,"value":43},{"type":17,"tag":29,"props":6678,"children":6679},{},[6680],{"type":26,"value":6681},"참조 에러가 발생해야 하는데 undefined가 출력이 된다.",{"type":17,"tag":29,"props":6683,"children":6684},{},[6685],{"type":26,"value":6686},"자바스크립트 엔진은 소스코드를 한 줄씩 순차적으로 실행하기에 앞서 먼저 소스코드의 평가 과정을 거친다. 이 과정에서 var 키워드는 선언 단계와 초기화 단계가 동시에 진행되기 때문에 undefined가 할당이 된다.",{"type":17,"tag":1530,"props":6688,"children":6689},{},[6690],{"type":17,"tag":29,"props":6691,"children":6692},{},[6693],{"type":26,"value":6694},"변수 선언(선언 단계와 초기화 단계)이 소스코드가 순차적으로 실행되는 런타임 이전 단계에서 먼저 실행된다는 증거다.",{"type":17,"tag":29,"props":6696,"children":6697},{},[6698],{"type":26,"value":43},{"type":17,"tag":29,"props":6700,"children":6701},{},[6702,6704,6709],{"type":26,"value":6703},"변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 ",{"type":17,"tag":64,"props":6705,"children":6706},{},[6707],{"type":26,"value":6708},"변수 호이스팅",{"type":26,"value":3916},{"type":17,"tag":29,"props":6711,"children":6712},{},[6713],{"type":26,"value":43},{"type":17,"tag":433,"props":6715,"children":6717},{"id":6716},"값의-할당",[6718],{"type":26,"value":6719},"값의 할당",{"type":17,"tag":84,"props":6721,"children":6724},{"className":6722,"code":6723,"language":11,"meta":8},[87],"var score; // 변수 선언\nscore = 80; // 값의 할당\n",[6725],{"type":17,"tag":91,"props":6726,"children":6727},{"__ignoreMap":8},[6728],{"type":26,"value":6723},{"type":17,"tag":84,"props":6730,"children":6733},{"className":6731,"code":6732,"language":11,"meta":8},[87],"var score = 80; // 변수 선언과 값의 할당 \n\n// 자바스크립트 엔진은 \nvar score;\nscore = 80; // 으로 해석\n",[6734],{"type":17,"tag":91,"props":6735,"children":6736},{"__ignoreMap":8},[6737],{"type":26,"value":6732},{"type":17,"tag":1530,"props":6739,"children":6740},{},[6741],{"type":17,"tag":29,"props":6742,"children":6743},{},[6744,6746,6750,6752,6756],{"type":26,"value":6745},"주의할 점: 변수 선언과 값의 할당의 실행 시점은 다르다.\n런타임: 소스코드가 순차적으로 실행되는 시점\n",{"type":17,"tag":64,"props":6747,"children":6748},{},[6749],{"type":26,"value":6590},{"type":26,"value":6751},"은 런타임 이전\n",{"type":17,"tag":64,"props":6753,"children":6754},{},[6755],{"type":26,"value":6719},{"type":26,"value":6757},"은 런타임에 실행",{"type":17,"tag":110,"props":6759,"children":6761},{"src":6760},"/blog/images/dbab1493-1b4e-4ef7-aaa3-86111023d657.png",[],{"type":17,"tag":433,"props":6763,"children":6765},{"id":6764},"값의-재할당",[6766],{"type":26,"value":6767},"값의 재할당",{"type":17,"tag":29,"props":6769,"children":6770},{},[6771],{"type":26,"value":6772},"이미 할당되어 있는 변수에 새로운 값을 또다시 할당",{"type":17,"tag":84,"props":6774,"children":6777},{"className":6775,"code":6776,"language":11,"meta":8},[87],"var score = 80; // 변수 선언과 값의 할당\nscore = 90; // 값의 재할당\n",[6778],{"type":17,"tag":91,"props":6779,"children":6780},{"__ignoreMap":8},[6781],{"type":26,"value":6776},{"type":17,"tag":1530,"props":6783,"children":6784},{},[6785],{"type":17,"tag":29,"props":6786,"children":6787},{},[6788],{"type":26,"value":6789},"var 키워드로 선언한 변수는 선언과 동시에 undefined로 초기화되기 때문에 엄밀히 말하자면 재할당이다.",{"type":17,"tag":110,"props":6791,"children":6793},{"src":6792},"/blog/images/4f2e0e3b-119e-4257-b3f3-37bcdd7727ba.png",[],{"type":17,"tag":29,"props":6795,"children":6796},{},[6797],{"type":26,"value":6798},"undefined와 80은 어떤 식별자와도 연결 되어 있지 않기 때문에 가비지 콜렉터에 의해 메모리에서 자동 해제된다.",{"type":17,"tag":1858,"props":6800,"children":6801},{"emogi":1860,"color":1861},[6802,6804,6809],{"type":26,"value":6803},"위 ",{"type":17,"tag":91,"props":6805,"children":6806},{},[6807],{"type":26,"value":6808},"var result = 10 + 20",{"type":26,"value":6810}," 에서 10과 20도 가비지 콜렉터에 의해 메모리에서 자동 해제 된다.",{"type":17,"tag":29,"props":6812,"children":6813},{},[6814],{"type":26,"value":43},{"type":17,"tag":429,"props":6816,"children":6817},{},[],{"type":17,"tag":433,"props":6819,"children":6820},{"id":435},[6821],{"type":26,"value":435},{"type":17,"tag":439,"props":6823,"children":6824},{},[6825],{"type":17,"tag":217,"props":6826,"children":6827},{},[6828],{"type":17,"tag":64,"props":6829,"children":6830},{},[6831],{"type":26,"value":449},{"type":17,"tag":29,"props":6833,"children":6834},{},[6835],{"type":26,"value":43},{"title":8,"searchDepth":451,"depth":451,"links":6837},[6838,6839,6840,6841,6842,6843,6844],{"id":6442,"depth":451,"text":6445},{"id":6553,"depth":451,"text":6553},{"id":6587,"depth":451,"text":6590},{"id":6660,"depth":451,"text":6663},{"id":6716,"depth":451,"text":6719},{"id":6764,"depth":451,"text":6767},{"id":435,"depth":451,"text":435},"content:posts:cbbee657-7850-46ab-b52b-43341e800d37.md","posts/cbbee657-7850-46ab-b52b-43341e800d37.md",{"_path":6848,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":6849,"description":6850,"tags":6851,"date":6852,"body":6853,"_type":454,"_id":6893,"_source":456,"_file":6894,"_extension":458},"/posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0","javascript this","자신이 속한 객체 또는 자신이 생성할 인스턴스를 가르키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.",[11],"2024-01-23T00:00:00.000Z",{"type":14,"children":6854,"toc":6891},[6855,6859,6863,6868,6877,6882],{"type":17,"tag":29,"props":6856,"children":6857},{},[6858],{"type":26,"value":6850},{"type":17,"tag":29,"props":6860,"children":6861},{},[6862],{"type":26,"value":43},{"type":17,"tag":29,"props":6864,"children":6865},{},[6866],{"type":26,"value":6867},"this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.",{"type":17,"tag":84,"props":6869,"children":6872},{"className":6870,"code":6871,"language":11,"meta":8},[87],"// 객체 리터럴\nconst circle = {\n    redius: 5,\n    getDiameter() {\n        // this는 메서드를 호출한 객체를 가리킨다.\n        return 2 * this.radius\n    }\n}\nconsole.log(circle.getDiameter()); // 10\n\n\n// 생성자 함수\nfunction Circle(radius) {\n    // this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    this.radius = radius;\n}\n\nCircle.prototype.getDiameter = function() {\n    //this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    return 2 * this.radius;\n}\n\n\n// 인스턴스 생성\nconst circle = new Circe(5);\nconsole.log(circle.getDiameter());\n",[6873],{"type":17,"tag":91,"props":6874,"children":6875},{"__ignoreMap":8},[6876],{"type":26,"value":6871},{"type":17,"tag":29,"props":6878,"children":6879},{},[6880],{"type":26,"value":6881},"클래스 기반 언어에서는 this는 언제나 클래스가 생성하는 인스턴스를 가리킨다. 하지만 자바스크립트의 this는 함수가 호출되는 방식에 따라 동적으로 결정된다.",{"type":17,"tag":84,"props":6883,"children":6886},{"className":6884,"code":6885,"language":11,"meta":8},[87],"// this는 함수 호출 방식에 따라 동적으로 결정 됨.\nconst foo = function() {\n    console.log(this);\n}\n\n// 1. 일반 함수 호출\nfoo() // window\n\n\n// 2. 메서드 호출\nconst obj = { foo };\nobj.foo(); // obj\n\n// 3. 생성자 함수 호출\nnew foo(); // foo {}\n\n// 4. apply/call/bind 메서드에 의한 간접 호출\nconst bar = {name: 'bar'};\nfoo.call(bar); // bar\nfoo.apply(bar); //bar\nfoo.bind(bar)(); //bar\n",[6887],{"type":17,"tag":91,"props":6888,"children":6889},{"__ignoreMap":8},[6890],{"type":26,"value":6885},{"title":8,"searchDepth":451,"depth":451,"links":6892},[],"content:posts:79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md","posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md",{"_path":6896,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":6897,"description":6898,"tags":6899,"date":6900,"body":6901,"_type":454,"_id":6982,"_source":456,"_file":6983,"_extension":458},"/posts/7516dc85-4ccc-4f99-afc1-22f8115737df","Call, Apply, Bind","Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 명시적으로 바인딩 시키는 메소드이다.",[11],"2024-01-15T00:00:00.000Z",{"type":14,"children":6902,"toc":6978},[6903,6915,6921,6930,6935,6939,6944,6950,6964,6969],{"type":17,"tag":29,"props":6904,"children":6905},{},[6906,6908,6913],{"type":26,"value":6907},"Call, Apply, Bind는 this와 관련이 있다. this를 특정 객체에 ",{"type":17,"tag":91,"props":6909,"children":6910},{},[6911],{"type":26,"value":6912},"명시적으로 바인딩",{"type":26,"value":6914}," 시키는 메소드이다.",{"type":17,"tag":1144,"props":6916,"children":6918},{"id":6917},"먼저-call-apply를-코드로-살펴-보자",[6919],{"type":26,"value":6920},"먼저 Call, Apply를 코드로 살펴 보자",{"type":17,"tag":84,"props":6922,"children":6925},{"className":6923,"code":6924,"language":11,"meta":8},[87],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\ngreeting('seoul', 'listening to music'); // Hello my name is , I live in seoul. my hobby is listening to music.\ngreeting.apply(seungyoon, ['seoul', 'listening to music']); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music.\ngreeting.call(seungyoon, 'seoul', 'listening to music'); // Hello my name is seungyoon, I live in seoul. my hobby is listening to music\n\n",[6926],{"type":17,"tag":91,"props":6927,"children":6928},{"__ignoreMap":8},[6929],{"type":26,"value":6924},{"type":17,"tag":29,"props":6931,"children":6932},{},[6933],{"type":26,"value":6934},"이렇게 this 특정 객체에 명시적으로 바인딩 시키고 싶을 때 call, apply를 사용하면 된다.",{"type":17,"tag":110,"props":6936,"children":6938},{"src":6937},"/blog/images/4d4685e1-2853-46d0-8556-99b7f4e54223.png",[],{"type":17,"tag":29,"props":6940,"children":6941},{},[6942],{"type":26,"value":6943},"(여기서 call과 apply는 기능은 같지만 넘겨받는 인자의 형식만 다르다. call과 다르게 apply는 인자를 배열 형태로 받는다.)",{"type":17,"tag":1144,"props":6945,"children":6947},{"id":6946},"나머지-bind-함수를-살펴보자",[6948],{"type":26,"value":6949},"나머지 bind 함수를 살펴보자.",{"type":17,"tag":29,"props":6951,"children":6952},{},[6953,6955,6962],{"type":26,"value":6954},"이 함수는 call apply와 ",{"type":17,"tag":6956,"props":6957,"children":6959},"font",{"color":6958},"yellow",[6960],{"type":26,"value":6961},"다르게",{"type":26,"value":6963}," 함수를 즉시 실행하지 않는다.",{"type":17,"tag":29,"props":6965,"children":6966},{},[6967],{"type":26,"value":6968},"아래 코드와 같이 변수에 담아 호출 할 수가 있다.",{"type":17,"tag":84,"props":6970,"children":6973},{"className":6971,"code":6972,"language":11,"meta":8},[87],"const seungyoon = {\n  name: 'seungyoon',\n}\n\nfunction greeting(city, hobby) {\n  console.log(`Hello my name is ${this.name}, I live in ${city}. my hobby is ${hobby}.`);\n}\n\nconst seungyoonGreeting = greeting.bind(seungyoon);\nseungyoonGreeting('seuol', 'listening to music'); // Hello my name is seungyoon, I live in seuol. my hobby is listening to music.\n\n",[6974],{"type":17,"tag":91,"props":6975,"children":6976},{"__ignoreMap":8},[6977],{"type":26,"value":6972},{"title":8,"searchDepth":451,"depth":451,"links":6979},[6980,6981],{"id":6917,"depth":1405,"text":6920},{"id":6946,"depth":1405,"text":6949},"content:posts:7516dc85-4ccc-4f99-afc1-22f8115737df.md","posts/7516dc85-4ccc-4f99-afc1-22f8115737df.md",1719041868609]