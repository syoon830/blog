[{"data":1,"prerenderedAt":271},["Reactive",2],{"content-query-pRJ4xXs7b7":3},[4,80],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":9,"description":10,"tags":11,"date":14,"body":15,"_type":75,"_id":76,"_source":77,"_file":78,"_extension":79},"/posts/38527f39-69f6-4663-ba58-351831ed48b4","posts",false,"","nuxt3 $fetch","nuxt3에서는 $fetch는 ofetch라는 라이브러리를 사용하고 있다. (ofetch는 node, browser 환경 두군데서 같이 사용할 수 있다.)",[12,13],"nuxt","axios","2024-01-22T00:00:00.000Z",{"type":16,"children":17,"toc":71},"root",[18,25,30,35,48,54],{"type":19,"tag":20,"props":21,"children":22},"element","p",{},[23],{"type":24,"value":10},"text",{"type":19,"tag":20,"props":26,"children":27},{},[28],{"type":24,"value":29},"\\n",{"type":19,"tag":20,"props":31,"children":32},{},[33],{"type":24,"value":34},"그래서 기존 axios로 설정된 코드들을 뜯어 고쳤다.",{"type":19,"tag":36,"props":37,"children":42},"pre",{"className":38,"code":40,"language":41,"meta":8},[39],"language-javascript","// 기존\nimport axios from 'axios';\nimport type { AxiosInstance } from 'axios';\nimport {useAuthStore} from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const authStore = useAuthStore();\n    const axiosInstance: AxiosInstance = axios.create({\n        baseURL: config.BASE_URL,\n    });\n\n    axiosInstance.interceptors.request.use((config) => {\n        if (authStore.isAuthenticated) {\n            config.headers.Authorization = `Bearer ${authStore.token}`;\n        } else {\n            config.headers.Authorization = `Basic ${btoaClientInfo}`;\n        }\n        return config;\n    });\n\n    nuxtApp.provide('axios', axiosInstance);\n});\n\n// 수정\nimport { useAuthStore } from \"~/store/auth\";\n\nexport default defineNuxtPlugin(nuxtApp => {\n    const config = useRuntimeConfig().public;\n    const clientId = config.clientId;\n    const clientServer = config.clientServer;\n    const btoaClientInfo = btoa(`${clientId}:${clientServer}`);\n\n    const apiFetch = $fetch.create({\n        baseURL: config.BASE_URL,\n        onRequest({ options }) {\n            const authStore = useAuthStore();\n            if (authStore.isAuthenticated) {\n                options.headers = {\n                    Authorization: `Bearer ${authStore.token}`\n                };\n            } else {\n                options.headers = {\n                    Authorization: `Basic ${btoaClientInfo}`\n                };\n            }\n        }\n    })\n    \n    nuxtApp.provide('apiFetch', apiFetch);\n});\n","javascript",[43],{"type":19,"tag":44,"props":45,"children":46},"code",{"__ignoreMap":8},[47],{"type":24,"value":40},{"type":19,"tag":49,"props":50,"children":52},"h2",{"id":51},"참고",[53],{"type":24,"value":51},{"type":19,"tag":55,"props":56,"children":57},"ul",{},[58],{"type":19,"tag":59,"props":60,"children":61},"li",{},[62],{"type":19,"tag":63,"props":64,"children":68},"a",{"href":65,"rel":66},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-%EC%9D%98-%EC%B0%A8%EC%9D%B4",[67],"nofollow",[69],{"type":24,"value":70},"https://jongmin4943.tistory.com/entry/Nuxt3-fetch-useAsyncData-useFetch-의-차이",{"title":8,"searchDepth":72,"depth":72,"links":73},2,[74],{"id":51,"depth":72,"text":51},"markdown","content:posts:38527f39-69f6-4663-ba58-351831ed48b4.md","content","posts/38527f39-69f6-4663-ba58-351831ed48b4.md","md",{"_path":81,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":82,"description":83,"tags":84,"date":86,"body":87,"_type":75,"_id":269,"_source":77,"_file":270,"_extension":79},"/posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c","formData 전송 방법","axios를 $fetch로 변경하면서 로그인시 문제가 발생하였다.",[13,85],"$fetch","2024-01-18T00:00:00.000Z",{"type":16,"children":88,"toc":259},[89,93,97,102,111,116,121,125,130,139,143,148,154,169,178,192,197,206,210,215,219,242,246],{"type":19,"tag":20,"props":90,"children":91},{},[92],{"type":24,"value":83},{"type":19,"tag":20,"props":94,"children":95},{},[96],{"type":24,"value":29},{"type":19,"tag":20,"props":98,"children":99},{},[100],{"type":24,"value":101},"기존에 axios를 사용할때는 아래와 같이 사용중이고",{"type":19,"tag":36,"props":103,"children":106},{"className":104,"code":105,"language":41,"meta":8},[39],"await axios.post(url, qs.stringfy(payload));\n",[107],{"type":19,"tag":44,"props":108,"children":109},{"__ignoreMap":8},[110],{"type":24,"value":105},{"type":19,"tag":20,"props":112,"children":113},{},[114],{"type":24,"value":115},"전달된 형태를 보니 Form Data로 전송이 되고 있다.",{"type":19,"tag":117,"props":118,"children":120},"img",{"src":119},"/blog/images/259642f0-1b07-4c70-9af2-9912cae63ac2.png",[],{"type":19,"tag":20,"props":122,"children":123},{},[124],{"type":24,"value":29},{"type":19,"tag":20,"props":126,"children":127},{},[128],{"type":24,"value":129},"$fetch는 아래와 같이 사용을 했는데",{"type":19,"tag":36,"props":131,"children":134},{"className":132,"code":133,"language":41,"meta":8},[39],"await apiFetch(url, {\n    method: 'POST',\n    body: qs.stringfy(payload)\n});\n",[135],{"type":19,"tag":44,"props":136,"children":137},{"__ignoreMap":8},[138],{"type":24,"value":133},{"type":19,"tag":117,"props":140,"children":142},{"src":141},"/blog/images/d6901ee5-a964-433e-ba0e-7e4d94fe61a7.png",[],{"type":19,"tag":20,"props":144,"children":145},{},[146],{"type":24,"value":147},"이렇게 전달이 돼서 로그인이 안되는것이다.",{"type":19,"tag":49,"props":149,"children":151},{"id":150},"_2가지-해결법",[152],{"type":24,"value":153},"2가지 해결법",{"type":19,"tag":155,"props":156,"children":158},"h3",{"id":157},"_1-header에-content-type-applicationx-www-form-urlencoded-넣어주기",[159,161,167],{"type":24,"value":160},"1. header에 ",{"type":19,"tag":44,"props":162,"children":164},{"className":163},[],[165],{"type":24,"value":166},"'Content-Type': 'application/x-www-form-urlencoded'",{"type":24,"value":168},"  넣어주기",{"type":19,"tag":36,"props":170,"children":173},{"className":171,"code":172,"language":41,"meta":8},[39],"$fetch(url, {\n    method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        },\n    body: qs.stringfy(payload)\n})\n",[174],{"type":19,"tag":44,"props":175,"children":176},{"__ignoreMap":8},[177],{"type":24,"value":172},{"type":19,"tag":155,"props":179,"children":181},{"id":180},"_2-new-urlsearchparams-사용",[182,184,190],{"type":24,"value":183},"2. ",{"type":19,"tag":44,"props":185,"children":187},{"className":186},[],[188],{"type":24,"value":189},"new URLSearchParams",{"type":24,"value":191}," 사용",{"type":19,"tag":20,"props":193,"children":194},{},[195],{"type":24,"value":196},"원래는 new FormData 만들어서 일일히 append 해줘야하는데 위 함수로 간편하게 만들어준다.",{"type":19,"tag":36,"props":198,"children":201},{"className":199,"code":200,"language":41,"meta":8},[39],"$fetch(url, {\n    method: 'POST',\n    body: new URLSearchParams(qs.stringfy(payload))\n});\n",[202],{"type":19,"tag":44,"props":203,"children":204},{"__ignoreMap":8},[205],{"type":24,"value":200},{"type":19,"tag":20,"props":207,"children":208},{},[209],{"type":24,"value":29},{"type":19,"tag":20,"props":211,"children":212},{},[213],{"type":24,"value":214},"나는 그냥 1번으로 사용하였다.",{"type":19,"tag":20,"props":216,"children":217},{},[218],{"type":24,"value":29},{"type":19,"tag":220,"props":221,"children":222},"blockquote",{},[223],{"type":19,"tag":20,"props":224,"children":225},{},[226,228,233,235,240],{"type":24,"value":227},"Axios를 사용할 때 별도의 설정이 없으면, ",{"type":19,"tag":44,"props":229,"children":230},{},[231],{"type":24,"value":232},"qs.stringify",{"type":24,"value":234},"를 사용하여 변환된 데이터는 ",{"type":19,"tag":44,"props":236,"children":237},{},[238],{"type":24,"value":239},"application/x-www-form-urlencoded",{"type":24,"value":241}," 형식으로 전송된다.",{"type":19,"tag":155,"props":243,"children":244},{"id":51},[245],{"type":24,"value":51},{"type":19,"tag":55,"props":247,"children":248},{},[249],{"type":19,"tag":59,"props":250,"children":251},{},[252],{"type":19,"tag":63,"props":253,"children":256},{"href":254,"rel":255},"https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-FormData-%EC%A0%95%EB%A6%AC-fetch-api",[67],[257],{"type":24,"value":258},"https://inpa.tistory.com/entry/JS-📚-FormData-정리-fetch-api",{"title":8,"searchDepth":72,"depth":72,"links":260},[261],{"id":150,"depth":72,"text":153,"children":262},[263,266,268],{"id":157,"depth":264,"text":265},3,"1. header에 'Content-Type': 'application/x-www-form-urlencoded'  넣어주기",{"id":180,"depth":264,"text":267},"2. new URLSearchParams 사용",{"id":51,"depth":264,"text":51},"content:posts:e9a8a610-ff29-4403-bbb0-55a5438aad7c.md","posts/e9a8a610-ff29-4403-bbb0-55a5438aad7c.md",1719041868611]