{"_path":"/posts/96c9d4b7-fef3-492c-aedb-b53a58deebb1","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"자바스크립트 - 9. 함수","description":"\\n","tags":["javascript"],"date":"2024-02-16T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"함수-리터럴"},"children":[{"type":"text","value":"함수 리터럴"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 리터럴은 function 키워드, 함수 이름, 매개 변수 목록, 함수 몸체로 구성된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var f = function add(x, y) {\n    return x + y;\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var f = function add(x, y) {\n    return x + y;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수이름: add"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자 (중요!)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 이름은 생략할 수 있다. 이름이 있는 함수를 기명 함수, 이름이 없는 함수를 무명/익명 함수라 한다."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"매개변수: x, y"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"몸체: return x + y;"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"리터럴: 사람이 이해할 수 있는 문자나 약속된 기호를 사용해 값을 생성하는 표기 방식, 즉 리터럴은 값을 생성하기 위한 표기법 (용어 계속 숙지)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 리터럴도 평가되어 값을 생성하며, 이 값은 객체다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"즉, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"함수는 객체다!"}]},{"type":"text","value":" (다른 프로그래밍 언어와 구별되는 자바스크립트의 중요한 특징)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h1","props":{"id":"함수-정의"},"children":[{"type":"text","value":"함수 정의"}]},{"type":"element","tag":"aside","props":{"emogi":"✏️","color":"purple"},"children":[{"type":"text","value":"변수 선언과 함수 정의\n변수는 선언(declaration)한다고 했지만 함수는 정의(definition)한다고 표현했다.\n함수 선언문이 평가되면 식별자가 암묵적으로 생성되고 함수 객체가 할당된다.\n따라서 ECMAScript 사양에서도 변수에는 선언(variable declration), 함수에는 정의(function definition)라고 표현한다."}]},{"type":"element","tag":"h2","props":{"id":"함수-선언문-표현식이-아닌-문"},"children":[{"type":"text","value":"함수 선언문 (표현식이 아닌 문)"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 선언문은 함수리터럴과 형태가 동일하다."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"단, 함수 선언문은 함수 이름 생략 불가"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// 함수 선언문\nfunction add(x, y) {\n    return x + y;\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 함수 선언문\nfunction add(x, y) {\n    return x + y;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 선언문은 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"표현식이 아닌 문"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"표현식이 아닌 문은 변수에 할당할 수 없다고 했는데"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var add = function add(x, y) {\n    return x + y;\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var add = function add(x, y) {\n    return x + y;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"하지만 위 코드를 보면 함수 선언문이 변수에 할당되는 것처럼 보인다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이는 자바스크립트 엔진이 코드의 문맥에 따라 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"함수 선언문"}]},{"type":"text","value":"으로 해석하거나 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"함수 리터럴 표현식"}]},{"type":"text","value":"으로 해석하는 경우가 있기 때문. 코드 문맥에 따라 해석이 달라짐"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위와 같은 경우는 표현식인 문인 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"함수 리터럴 표현식"}]},{"type":"text","value":"으로 해석 되었기 때문에 가능"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"기명 함수 리터럴은 중의적인 코드다."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"단독으로 사용하면 함수 선언문으로 해석"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"값으로 평가되어야 하는 문맥 (할당, 피연산자)에서는 함수 리터럴 표현식으로 해석"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"아래 코드를 보자"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"**//** 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석\nfunction foo() {\n    console.log('foo');\n}\n\nfoo(); // foo\n\n// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석\n// 그룹연산자()안에 피연산자 함수 리터럴은 함수 리터럴 표현식으로 해석\n(function bar() { console.log('bar')});\nbar(); // RefefenceError: bar is not defined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"**//** 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석\nfunction foo() {\n    console.log('foo');\n}\n\nfoo(); // foo\n\n// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석\n// 그룹연산자()안에 피연산자 함수 리터럴은 함수 리터럴 표현식으로 해석\n(function bar() { console.log('bar')});\nbar(); // RefefenceError: bar is not defined\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"bar()를 왜 호출을 못할까? 그 이유는 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"함수 리터럴 표현식"}]},{"type":"text","value":"으로 해석되기 때문이다. 위 함수 리터럴에서 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자라고 했다. 그래서 함수 내부가 아닌 외부에서는 호출이 불가능한 것이다."}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 리터럴과 함수 리터럴 표현식 헷갈리지 말기"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위 예제에서 함수 선언문으로 정의된 함수는 foo라는 이름으로 호출할 수 있었다. foo는 함수 몸체 내부에서만 유효한 식별자인데 그러면 foo()는 어떻게 호출이 가능한걸까? 그 이유는 자바스크립트 엔진이 암묵적으로 식별자를 생성하기 때문이다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"즉 자바스크립트 엔진은 함수 선언문을 해석해 함수 객체를 생성한다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function foo() {\n    console.log('foo');\n}\n\n// 자바스크립트 엔진이 암묵적으로 아래와 같이 생성한다. (아래와 같이 동작하는건 알수 없으나 식별자가 생성된다는 것을 보여주기 위한 예제)\nvar foo = function foo() {\n    console.log('foo');\n}\n\n// 그래서 함수 표현식은 함수 이름 생략이 불가능하구나?\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function foo() {\n    console.log('foo');\n}\n\n// 자바스크립트 엔진이 암묵적으로 아래와 같이 생성한다. (아래와 같이 동작하는건 알수 없으나 식별자가 생성된다는 것을 보여주기 위한 예제)\nvar foo = function foo() {\n    console.log('foo');\n}\n\n// 그래서 함수 표현식은 함수 이름 생략이 불가능하구나?\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다!"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var foo = function bar(n) {\n    bar(); // 함수이름은 함수 몸체 내에서만 사용 가능\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var foo = function bar(n) {\n    bar(); // 함수이름은 함수 몸체 내에서만 사용 가능\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"용어 구분"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"식별자: foo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수이름 bar"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var foo = function () {}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var foo = function () {}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"용어 구분"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"식별자: foo"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수이름: 없음 (익명함수)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://chat.openai.com/share/512948d1-1316-4bba-afaf-42e41498d5c8","rel":["nofollow"]},"children":[{"type":"text","value":"bookmark"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"함수-표현식표현식인-문"},"children":[{"type":"text","value":"함수 표현식(표현식인 문)"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var add = function(x, y) {\n    return x + y;\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var add = function(x, y) {\n    return x + y;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"자바스크립트는 함수는 일급 객체다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다. 이러한 함수 정의 방식을 함수 표현식(function expression)이라 한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 선언문, 함수 표현식으로 선언한 함수는 Function 객체의 인스턴스다, Function은 Object 객체의 인스턴스다."}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function testFunction() {\n}\nlet testInstance = new testFunction();\nconsole.log(testInstance instanceof testFunction);\nconsole.log(testFunction instanceof Function);\nconsole.log(Function instanceof Object);\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function testFunction() {\n}\nlet testInstance = new testFunction();\nconsole.log(testInstance instanceof testFunction);\nconsole.log(testFunction instanceof Function);\nconsole.log(Function instanceof Object);\n"}]}]},{"type":"element","tag":"h2","props":{"id":"함수-생성-시점과-함수-호이스팅"},"children":[{"type":"text","value":"함수 생성 시점과 함수 호이스팅"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// 함수 참조\nconsole.log(add); // f add(a, b)\nconsole.log(sub); // undefined\n\n// 함수 호출\nconsole.log(add(2, 5)); // 7\nconsole.log(sub(2, 5)); // TypeError: sub is not a function\n\n// 함수 선언문\nfunction add(a, b) {\n    return a + b;\n}\n\n// 함수 표현식\nvar sub = function(a, b) {\n    return a - b;\n}\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 함수 참조\nconsole.log(add); // f add(a, b)\nconsole.log(sub); // undefined\n\n// 함수 호출\nconsole.log(add(2, 5)); // 7\nconsole.log(sub(2, 5)); // TypeError: sub is not a function\n\n// 함수 선언문\nfunction add(a, b) {\n    return a + b;\n}\n\n// 함수 표현식\nvar sub = function(a, b) {\n    return a - b;\n}\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이는 각 함수의 생성 시점이 다르기 때문이다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수선언문은 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행된다."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 객체 생성"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 이름과 동일한 이름의 식별자 생성"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 객체를 식별자에 할당"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이처럼 함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅이라 한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 호이스팅과 변수 호이스팅 차이"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"변수 호이스팅은 undefined로 초기화\n"},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"변수 호이스팅은 선언 이전에 호출하면 undefined로 평가 됨"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 호이스팅은 함수 객체로 초기화\n"},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 호이스팅은 함수 선언문 이전에 호출하면 호출이 가능"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h3","props":{"id":"참조에-의한-전달과-외부-상태의-변경"},"children":[{"type":"text","value":"참조에 의한 전달과 외부 상태의 변경"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function test(primitive, obj) {\n    primitive += 100;\n    obj.name = 'kim';\n}\n\nvar num = 100;\nvar person = {\n    name: 'lee';\n};\n\nconsole.log(num); // 100;\nconsole.log(person.name); // lee;\n\ntest(num, person);\n\nconsole.log(num); // 100\nconsole.log(person.name); // kim\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function test(primitive, obj) {\n    primitive += 100;\n    obj.name = 'kim';\n}\n\nvar num = 100;\nvar person = {\n    name: 'lee';\n};\n\nconsole.log(num); // 100;\nconsole.log(person.name); // lee;\n\ntest(num, person);\n\nconsole.log(num); // 100\nconsole.log(person.name); // kim\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 외부에서 함수 몸체 내부로 전달한 참조 값에 의해 원본 객체가 변경되는 부수 효과가 발생"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"객체의 변경을 추적하려면 옵저버 패턴 등을 통해 객체를 참조를 공유하는 모든 이들에게 변경 사실을 통지하고 이에 대처하는 추가 대응이 필요"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"객체를 불변 객체로 만들어 사용하는것도 하나의 방법"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"외부 상태를 변경하지 않고 외부 상태에 의존하지도 않는 함수를 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"순수 함수"}]},{"type":"text","value":" 라 한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"다양한-함수의-형태"},"children":[{"type":"text","value":"다양한 함수의 형태"}]},{"type":"element","tag":"h3","props":{"id":"즉시-실행-함수"},"children":[{"type":"text","value":"즉시 실행 함수"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"(function() {}());\n// 그룹 연산자()로 함수를 묶은 이유는 먼저 함수 리터럴을 평가해서 함수 객체를 생성하기 위해서다.\n\n// 따라서 먼저 함수 리터럴을 평가해서 함수 객체를 생성할 수 있다면 그룹 연산자 이외의 연산자를 사용해도 좋다.\n(function(){})();\n!function(){}()\n+function(){}()\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"(function() {}());\n// 그룹 연산자()로 함수를 묶은 이유는 먼저 함수 리터럴을 평가해서 함수 객체를 생성하기 위해서다.\n\n// 따라서 먼저 함수 리터럴을 평가해서 함수 객체를 생성할 수 있다면 그룹 연산자 이외의 연산자를 사용해도 좋다.\n(function(){})();\n!function(){}()\n+function(){}()\n"}]}]},{"type":"element","tag":"h3","props":{"id":"중첩-함수"},"children":[{"type":"text","value":"중첩 함수"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수 내부에 정의된 함수를 중첩 함수 또는 내부 함수라 한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"중첩 함수를 포함하는 함수를 외부 함수라 부른다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수의 역할을 한다."}]},{"type":"element","tag":"h3","props":{"id":"콜백함수"},"children":[{"type":"text","value":"콜백함수"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"콜백 함수"}]},{"type":"text","value":"라고 하며, 매개 변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수를 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"고차 함수"}]},{"type":"text","value":"라고 한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"콜백함수도 고차 함수에 전달되어 헬퍼 함수의 역할을 한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"고차 함수는 콜백 함수를 자신의 일부분으로 합성한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"고차 함수는 매개변수를 통해 전달받은 콜백 함수의 호출 시점을 결정해서 호출한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"콜백 함수는 고차 함수에 의해 호출되며 이때 고차 함수는 필요에 따라 콜백 함수에 인수를 전달할 수 있다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// 고차함수\nfunction repeat(n, f) {\n    for (var i = 0; i < n; i++) {\n        // 콜백 함수\n        f(i);\n    }\n}\n\nvar logAll = function(i) {\n    console.log(i);\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 고차함수\nfunction repeat(n, f) {\n    for (var i = 0; i < n; i++) {\n        // 콜백 함수\n        f(i);\n    }\n}\n\nvar logAll = function(i) {\n    console.log(i);\n}\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// 고차 함수 map\n[1, 2, 3].map(function (item) {});\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 고차 함수 map\n[1, 2, 3].map(function (item) {});\n"}]}]},{"type":"element","tag":"h3","props":{"id":"순수-함수와-비순수-함수"},"children":[{"type":"text","value":"순수 함수와 비순수 함수"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"어떤 외부 상태에 의존하지도 않고 변경하지도 않는, 즉 부수 효과가 없는 함수를 순수 함수라 하고"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"외부 상태에 의존하거나 외부 상태를 변경하는, 즉 부수 효과가 있는 함수를 비순수 함수라고 한다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var count = 0;\n\n// 순수 함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.\nfunction increase(n) {\n    return ++n;\n}\n// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경\ncount = increase(count);\nconsole.log(count); // 1;\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var count = 0;\n\n// 순수 함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.\nfunction increase(n) {\n    return ++n;\n}\n// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경\ncount = increase(count);\nconsole.log(count); // 1;\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var count = 0;\n\n// 비순수 함수\nfunction increase() {\n    return ++count; // 외부 상태에 의존하며 외부 상태를 변경한다.\n}\n\n// 비순수 함수는 외부 상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.\nincrease(count);\nconsole.log(count); // 1;\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var count = 0;\n\n// 비순수 함수\nfunction increase() {\n    return ++count; // 외부 상태에 의존하며 외부 상태를 변경한다.\n}\n\n// 비순수 함수는 외부 상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.\nincrease(count);\nconsole.log(count); // 1;\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"함수-리터럴","depth":2,"text":"함수 리터럴"},{"id":"함수-선언문-표현식이-아닌-문","depth":2,"text":"함수 선언문 (표현식이 아닌 문)"},{"id":"함수-표현식표현식인-문","depth":2,"text":"함수 표현식(표현식인 문)"},{"id":"함수-생성-시점과-함수-호이스팅","depth":2,"text":"함수 생성 시점과 함수 호이스팅","children":[{"id":"참조에-의한-전달과-외부-상태의-변경","depth":3,"text":"참조에 의한 전달과 외부 상태의 변경"}]},{"id":"다양한-함수의-형태","depth":2,"text":"다양한 함수의 형태","children":[{"id":"즉시-실행-함수","depth":3,"text":"즉시 실행 함수"},{"id":"중첩-함수","depth":3,"text":"중첩 함수"},{"id":"콜백함수","depth":3,"text":"콜백함수"},{"id":"순수-함수와-비순수-함수","depth":3,"text":"순수 함수와 비순수 함수"}]}]}},"_type":"markdown","_id":"content:posts:96c9d4b7-fef3-492c-aedb-b53a58deebb1.md","_source":"content","_file":"posts/96c9d4b7-fef3-492c-aedb-b53a58deebb1.md","_extension":"md"}