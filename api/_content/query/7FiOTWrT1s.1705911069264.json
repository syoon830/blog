{"_path":"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"객체지향 프로그래밍 (with. ES6)","description":"프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법","tags":["ES6"],"date":"2023-12-28T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법"}]},{"type":"element","tag":"h3","props":{"id":"클래스와-인스턴스객체"},"children":[{"type":"text","value":"클래스와 인스턴스(객체)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"클래스는 일종의 설계도이고 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"인스턴스는"}]},{"type":"text","value":" 클래스를 사용하여 생성한 실제 물건이다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"무선 전화기(클래스) - 스마트폰(인스턴스)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"이동수단(클래스) - 자동차(인스턴스)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"+ 이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 추상화(Abstarction)라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"가려내어"}]},{"type":"text","value":" "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"포착하는"}]},{"type":"text","value":" 것을 의미한다. (필요한 관점만을 추출하는 행위)"}]}]},{"type":"element","tag":"h2","props":{"id":"객체지향-프로그래밍은-아래의-특징을-가지고-있다"},"children":[{"type":"text","value":"객체지향 프로그래밍은 아래의 특징을 가지고 있다."}]},{"type":"element","tag":"h3","props":{"id":"상속inheritance"},"children":[{"type":"text","value":"상속(inheritance)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"속성 및 기능을 물려받아 확장 할 수 있다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다."}]},{"type":"element","tag":"h3","props":{"id":"다형성polymorphism"},"children":[{"type":"text","value":"다형성(Polymorphism)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n"}]}]},{"type":"element","tag":"h3","props":{"id":"캡슐화encapsulation"},"children":[{"type":"text","value":"캡슐화(Encapsulation)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h3","props":{"id":"참고"},"children":[{"type":"text","value":"참고"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"인사이드 자바스크립트"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/","rel":["nofollow"]},"children":[{"type":"text","value":"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://www.opentutorials.org/module/2495/14037","rel":["nofollow"]},"children":[{"type":"text","value":"www.opentutorials.org/module/2495/14037"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://victorydntmd.tistory.com/117","rel":["nofollow"]},"children":[{"type":"text","value":"https://victorydntmd.tistory.com/117"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"클래스와-인스턴스객체","depth":3,"text":"클래스와 인스턴스(객체)"},{"id":"객체지향-프로그래밍은-아래의-특징을-가지고-있다","depth":2,"text":"객체지향 프로그래밍은 아래의 특징을 가지고 있다.","children":[{"id":"상속inheritance","depth":3,"text":"상속(inheritance)"},{"id":"다형성polymorphism","depth":3,"text":"다형성(Polymorphism)"},{"id":"캡슐화encapsulation","depth":3,"text":"캡슐화(Encapsulation)"},{"id":"참고","depth":3,"text":"참고"}]}]}},"_type":"markdown","_id":"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","_source":"content","_file":"posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","_extension":"md"}