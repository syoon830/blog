{"_path":"/posts/62b25952-eab1-4faf-b3ec-9b0928301bb6","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"자바스크립트 - 18. this","description":"this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다.","tags":["javascript"],"date":"2024-02-26T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"자바스크립트 this는 함수가 호출되는 방식에 따라 this에 바인딩될 값, 즉 this 바인딩이 동적으로 결정된다."}]},{"type":"element","tag":"h1","props":{"id":"함수-호출-방식과-this-바인딩"},"children":[{"type":"text","value":"함수 호출 방식과 this 바인딩"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"렉시컬 스코프와 this 바인딩은 결정 시기가 다르다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수의 상위 스코프를 결정하는 방식인 렉시컬 스코프는 함수 정의가 평가되어 함수 객체가 생성되는 시점에 상위 스코프를 결정한다. 하지만 this 바인딩은 함수 호출 시점에 결정된다."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"일반-함수-호출"},"children":[{"type":"text","value":"일반 함수 호출"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"기본적으로 this에는 전역 객체(global object)가 바인딩된다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"전역 함수는 물론이고 중첩 함수를 일반 함수로 호출하면 함수 내부의 this에는 전역 객체가 바인딩된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function foo() {\n    console.log(\"foo's this: \", this); // window\n    function bar() {\n        console.log(\"bar's this: \", this); // window\n    }\n    bar();\n}\nfoo();\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function foo() {\n    console.log(\"foo's this: \", this); // window\n    function bar() {\n        console.log(\"bar's this: \", this); // window\n    }\n    bar();\n}\nfoo();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"메서드(객체 안에 함수) 내에서 정의한 중첩 함수도 일반 함수로 호출되면 중첩 함수 내부의 this에는 전역 객체가 바인딩된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        consoel.log(this.value); // 100\n\n        function bar() {\n            console.log(this); // window\n            console.log(this.value); // 1\n        }\n        bar();\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        consoel.log(this.value); // 100\n\n        function bar() {\n            console.log(this); // window\n            console.log(this.value); // 1\n        }\n        bar();\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"콜백 함수가 일반 함수로 호출된다면 콜백 함수 내부의 this에도 전역 객체가 바인딩된다. 어떠한 함수라도 일반 함수로 호출되면 this에 전역 객체가 바인딩된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        setTimeout(function() {\n            console.log(this.value); // 1\n        })\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        console.log(this); // {value: 100, foo: f}\n        setTimeout(function() {\n            console.log(this.value); // 1\n        })\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"메서드 내부의 중첩 함수나 콜백 함수의 this 바인딩을 메서드의 this 바인딩과 일치시키기 위한 방법"}]},{"type":"element","tag":"h3","props":{"id":"this를-변수에-할당"},"children":[{"type":"text","value":"this를 변수에 할당"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        var that = this;\n        setTimeout(function() {\n            console.log(that.value); // 100\n        })\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        var that = this;\n        setTimeout(function() {\n            console.log(that.value); // 100\n        })\n    }\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"apply-call-bind"},"children":[{"type":"text","value":"apply, call, bind"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(function() {\n            console.log(this.value); // 100\n        }.bind(this))\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(function() {\n            console.log(this.value); // 100\n        }.bind(this))\n    }\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"화살표-함수"},"children":[{"type":"text","value":"화살표 함수"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(() => {\n            console.log(this.value); // 100\n        })\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var value = 1;\n\nconst obj = {\n    value: 100,\n    foo() {\n        setTimeout(() => {\n            console.log(this.value); // 100\n        })\n    }\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"메서드-호출"},"children":[{"type":"text","value":"메서드 호출"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"메서드 내부의 this에는 메서드를 호출한 객체, 즉 메서드를 호출할 때 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩된다. 주의할 것은 메서드 내부의 this는 메서드를 소유한 객체가 아닌 메서드를 호출한 객체에 바인딩된다는 것이다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const person = {\n    name: 'Lee',\n    getName() {\n        return this.name;\n    }\n}\nconsole.log(person.getName());\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const person = {\n    name: 'Lee',\n    getName() {\n        return this.name;\n    }\n}\nconsole.log(person.getName());\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"오해하면 안되는게 getName의 함수 객체는 person의 포함된게 아니라 독립적으로 존재하는 별도의 객체(메모리에 별도로)다. getName 프로퍼티가 함수 객체를 가리키고 있을 뿐이다."}]},{"type":"element","tag":"img","props":{"src":"/blog/images/1be99fb9-d92b-4c1a-9673-66579147815c.png"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"따라서 getName 프로퍼티가 가리키는 함수 객체, 즉 getName 메서드는 다른 객체의 프로퍼티에 할당하는 것으로 다른 객체의 메서드가 될 수도 있고 일반 변수에 할당하여 일반 함수로 호출될 수도 있다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const person = {\n  name: 'Lee',\n  getName() {\n    return this.name;\n  }\n}\nconst annotherPerson = {\n  name: 'kim'\n}\nannotherPerson.getName = person.getName;\nconsole.log(annotherPerson.getName()); // kim\n\nlet getName = person.getName;\nconsole.log(getName()); // ''\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const person = {\n  name: 'Lee',\n  getName() {\n    return this.name;\n  }\n}\nconst annotherPerson = {\n  name: 'kim'\n}\nannotherPerson.getName = person.getName;\nconsole.log(annotherPerson.getName()); // kim\n\nlet getName = person.getName;\nconsole.log(getName()); // ''\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"프로토타입 메서드 내부에서 사용된 this도 일반 메서드와 마찬가지로 해당 메서드를 호출한 객체에 바인딩된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.getName = funciton() {\n    return this.name;\n};\n\nconst me = new Person('Lee');\n\nconsole.log(me.getName()); // Lee\n\nPerson.prototype.name = \"kim\";\nconsole.log(person.prototype.getName()); // kim\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.getName = funciton() {\n    return this.name;\n};\n\nconst me = new Person('Lee');\n\nconsole.log(me.getName()); // Lee\n\nPerson.prototype.name = \"kim\";\nconsole.log(person.prototype.getName()); // kim\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"생성자-함수-호출"},"children":[{"type":"text","value":"생성자 함수 호출"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"생성자 함수 내부의 this에는 생성자 함수가 (미래에) 생성할 인스턴스가 바인딩된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius) {\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n\nconst circle1 = new Circle(5);\n\n// 만약 new 연산자와 함께 호출하지 않으면 생성자 함수로 동작하지 않는다. 일반적인 함수의 호출이다.\nconst circle2 = Circle(15); // 이때 this는 window이므로 window.radius = 15가 된다.\nconsole.log(radius); // 15\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius) {\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n\nconst circle1 = new Circle(5);\n\n// 만약 new 연산자와 함께 호출하지 않으면 생성자 함수로 동작하지 않는다. 일반적인 함수의 호출이다.\nconst circle2 = Circle(15); // 이때 this는 window이므로 window.radius = 15가 된다.\nconsole.log(radius); // 15\n"}]}]},{"type":"element","tag":"h2","props":{"id":"funcitonprototypeapplycallbind-메서드에-의한-간접-호출"},"children":[{"type":"text","value":"Funciton.prototype.apply/call/bind 메서드에 의한 간접 호출"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function getThisBinding() {\n    return this;\n}\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding()); // window\n\nconsole.log(getThisBinding.call(thisArg)); // {a: 1};\nconsole.log(getThisBinding.apply(thisArg)); // {a: 1};\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function getThisBinding() {\n    return this;\n}\nconst thisArg = { a: 1 };\n\nconsole.log(getThisBinding()); // window\n\nconsole.log(getThisBinding.call(thisArg)); // {a: 1};\nconsole.log(getThisBinding.apply(thisArg)); // {a: 1};\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"apply와 call 메서드의 본질적인 기능은 함수를 호출하는 것이다. apply와 call 메서드는 함수를 호출하면서 첫 번째 인수로 전달한 특정 객체를 호출한 함수의 this에 바인딩한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"apply와 call은 인수를 전달하는 방식만 다를뿐 동일하게 동작한다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function getThisBinding() {\n    console.log(arguments);\n    return this;\n}\n\nconst thisArg = {a: 1};\n\nconsole.log(getThisBinding.apply(thisArg, [1, 2, 3]);\nconsole.log(getThisBinding.call(thisArg, 1, 2, 3);\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function getThisBinding() {\n    console.log(arguments);\n    return this;\n}\n\nconst thisArg = {a: 1};\n\nconsole.log(getThisBinding.apply(thisArg, [1, 2, 3]);\nconsole.log(getThisBinding.call(thisArg, 1, 2, 3);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"대표적인 용도는 arguments 객체와 같은 유사 배열 객체에 배열 메서드를 사용하는 경우다. arguments 객체는 배열이 아니기 때문에 Array.prototype.slice 같은 배열의 메서드를 사용할 수 없으나 apply와 call 메서드를 이용하면 가능하다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function convertArgsToArray() {\n    const arr = Array.prototype.slice.call(arguments);\n\n    return arr;\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function convertArgsToArray() {\n    const arr = Array.prototype.slice.call(arguments);\n\n    return arr;\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"bind 메서드는 apply와 call 메서드와 달리 함수를 호출하지 않고 this로 사용할 객체만 전달한다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function getThisBinding() {\n    return this;\n}\n\nconst thisArg = {a:1};\n\nconsole.log(getThisBinding.bind(thisArg)); // getThisBinding\nconsole.log(getThisBidning.bind(thisArg)()); // {a:1}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function getThisBinding() {\n    return this;\n}\n\nconst thisArg = {a:1};\n\nconsole.log(getThisBinding.bind(thisArg)); // getThisBinding\nconsole.log(getThisBidning.bind(thisArg)()); // {a:1}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"bind 메서드는 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치하는 문제를 해결하기 위해 유용하게 사용된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const person = {\n    name: 'Lee',\n    foo(callback) {\n        setTimeout(callback, 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // window\n})\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const person = {\n    name: 'Lee',\n    foo(callback) {\n        setTimeout(callback, 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // window\n})\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const person = {\n    name: 'Lee',\n    foo(callback) {\n        // callback 함수의 this는 여기 this야\n        // bind는 apply와 call과 달리 호출을 하지 않기 때문에 가능\n        setTimeout(callback.bind(this), 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // {name: 'Lee', foo: f}\n})\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const person = {\n    name: 'Lee',\n    foo(callback) {\n        // callback 함수의 this는 여기 this야\n        // bind는 apply와 call과 달리 호출을 하지 않기 때문에 가능\n        setTimeout(callback.bind(this), 100);\n    }\n}\nperson.foo(function () {\n    console.log(this); // {name: 'Lee', foo: f}\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"참고"},"children":[{"type":"text","value":"참고"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"이웅모, 「모던 자바스크립트 Deep Dive」, 위키북스, 2020"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"일반-함수-호출","depth":2,"text":"일반 함수 호출","children":[{"id":"this를-변수에-할당","depth":3,"text":"this를 변수에 할당"},{"id":"apply-call-bind","depth":3,"text":"apply, call, bind"},{"id":"화살표-함수","depth":3,"text":"화살표 함수"}]},{"id":"메서드-호출","depth":2,"text":"메서드 호출"},{"id":"생성자-함수-호출","depth":2,"text":"생성자 함수 호출"},{"id":"funcitonprototypeapplycallbind-메서드에-의한-간접-호출","depth":2,"text":"Funciton.prototype.apply/call/bind 메서드에 의한 간접 호출"},{"id":"참고","depth":2,"text":"참고"}]}},"_type":"markdown","_id":"content:posts:62b25952-eab1-4faf-b3ec-9b0928301bb6.md","_source":"content","_file":"posts/62b25952-eab1-4faf-b3ec-9b0928301bb6.md","_extension":"md"}