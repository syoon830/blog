{"_path":"/posts/7ada091c-3330-42a3-9990-528ebddc39eb","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"자바스크립트 - 14. 생성자 함수에 의한 객체 생성","description":"뒤에서 this 배울꺼지만 this 바인딩은 함수 호출 방식에 따라 동적으로 결정","tags":["javascript"],"date":"2024-02-21T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"뒤에서 this 배울꺼지만 this 바인딩은 함수 호출 방식에 따라 동적으로 결정"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function foo() {\n    console.log(this)\n}\n\nfoo(); // window\n\nconst obj = { foo };\n\nobj.foo(); // obj\n\nconst inst = new Foo(); // inst\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function foo() {\n    console.log(this)\n}\n\nfoo(); // window\n\nconst obj = { foo };\n\nobj.foo(); // obj\n\nconst inst = new Foo(); // inst\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"생성자 함수는 이름 그대로 객체(인스턴스)를 생성하는 함수다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"new 연산자와 함께 호출하면 해당 함수는 생성자 함수로 동작한다."}]}]},{"type":"element","tag":"h1","props":{"id":"생성자-함수의-인스턴스-생성-과정"},"children":[{"type":"text","value":"생성자 함수의 인스턴스 생성 과정"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius) {\n    // 인스턴스 초기화\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius) {\n    // 인스턴스 초기화\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"생성자 함수 내부의 코드를 살펴보면 this에 프로퍼티를 추가하고 필요에 따라 전달된 인수를 프로퍼티의 초기값으로서 할당하여 인스턴스를 초기화한다. 하지만 인스턴스를 생성하고 반환하는 코드는 보이지 않는다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"자바스크립트 엔진은 암묵적인 처리를 통해 인스턴스를 생성하고 반환한다. new 연산자와 함께 생성자 함수를 호출하면 자바스크립트 엔진은 다음과 같은 과정을 거친다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h3","props":{"id":"_1-인스턴스-생성과-this-바인딩"},"children":[{"type":"text","value":"1. 인스턴스 생성과 this 바인딩"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"암묵적으로 빈 객체가 생성된다. 이 객체가 바로(아직 완성X) 생성자 함수가 생성한 인스턴스"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"이 인스턴스는 this에 바인딩된다.\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"바인딩이란 식별자와 값을 연결하는 과정을 의미한다. 예를 들어, 변수 선언은 변수 이름(식별자)과 확보된 메모리 공간의 주소를 바인딩하는 것이다. this 바인딩은 this와 this가 가리킬 객체를 바인딩하는 것이다."}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수 몸체의 코드가 한 줄씩 실행되는 런타임 이전에 실행된다."}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius) {\n    // 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 된다.\n    console.log(this); // Circle {}\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius) {\n    // 1. 암묵적으로 인스턴스가 생성되고 this에 바인딩 된다.\n    console.log(this); // Circle {}\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-인스턴스-초기화"},"children":[{"type":"text","value":"2. 인스턴스 초기화"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"생성자 함수에 기술되어 있는 코드가 한 줄씩 실행되어 this에 바인딩되어 있는 인스턴스를 초기화한다."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"즉, this에 바인딩되어 있는 인스턴스에 프로퍼티나 메서드를 추가"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius) {\n\n    // 2. this에 바인딩되어 있는 인스턴스를 초기화한다.\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius) {\n\n    // 2. this에 바인딩되어 있는 인스턴스를 초기화한다.\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_3-인스턴스-반환"},"children":[{"type":"text","value":"3. 인스턴스 반환"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"생성자 함수 내부의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다."}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n    // 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(cirlce); // Circle{...}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n    // 3. 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다.\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(cirlce); // Circle{...}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"만약 this가 아닌 다른 객체를 명시적으로 반환하면 this가 반환되지 못하고 return 문에 명시한 객체가 반환된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return {}\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // {}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return {}\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // {}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"하지만 명시적으로 원시 값을 반환하면 원시 값 반환은 무시되고 암묵적으로 this가 반환된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return 100;\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // Circle {}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius) {\n\n    this.radius = radius;\n    this.getDiameter = function() {\n        return 2 * this.radius;\n    }\n\n    return 100;\n}\n\n// 인스턴스 생성. Circle 생성자 함수는 암묵적으로 this를 반환한다.\nconst circle = new Circle(1);\nconsole.log(circle); // Circle {}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h1","props":{"id":"내부-메서드-call과-constructor"},"children":[{"type":"text","value":"내부 메서드 [[Call]]과 [[Constructor]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수는 객체다. 그래서 일반 객체가 가지고 있는 내부 슬롯과 내부 메서드를 모두 가지고 있다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function foo() {}\n\n// 함수는 객체이므로 프로퍼티를 소유할 수 있다.\nfoo.prop = 10;\n\n// 함수는 객체이므로 메서드를 소유할 수 있다.\nfoo.method = function() {\n    console.log(this.prop);\n}\n\nfoo.method(); // 10\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function foo() {}\n\n// 함수는 객체이므로 프로퍼티를 소유할 수 있다.\nfoo.prop = 10;\n\n// 함수는 객체이므로 메서드를 소유할 수 있다.\nfoo.method = function() {\n    console.log(this.prop);\n}\n\nfoo.method(); // 10\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"하지만 함수만에 특징이 있으니 함수는 호출할 수 있다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"그래서 함수 객체만 가지고 있는 내부 슬롯과 내부 메서드를 추가로 가지고 있다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"[[Environment]], [[FormalParameters]] 내부슬롯과"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"[[Call]], [[Construct]] 내부 메서드"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"함수가 일반 함수로서 호출되면 함수 객체의 내부 메서드 [[Call]]이 호출되고"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"new 연산자와 함께 생성자 함수로서 호출되면 내부 메서드 [[Construct]]가 호출된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function foo() {}\n\n// 일반적인 함수로서 호출: [[Call]]이 호출된다.\nfoo();\n\n// 생성자 함수로서 호출: [[Constructor]]가 호출된다.\nnew foo();\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function foo() {}\n\n// 일반적인 함수로서 호출: [[Call]]이 호출된다.\nfoo();\n\n// 생성자 함수로서 호출: [[Constructor]]가 호출된다.\nnew foo();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"[[Call]]을 갖는 함수 객체를 callable"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"[[Construct]]를 갖는 함수 객체를 constructor"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"[[Construct]]를 갖지 않는 함수 객체를 non-constructor"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"모든 함수는 callable이다. 하지만 모든 함수는 constructor아니면 non-constructor이다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"constructor와-non-constructor-구분"},"children":[{"type":"text","value":"constructor와 non-constructor 구분"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"constructor 함수 선언문, 함수 표현식, 클래스(클래스도 함수다)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"non-constructor: 메서드(ES6 메서드 축약 표현), 화살표 함수"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function foo() {};\nconst bar = function() {};\n\nconst baz = {\n    x: function() {}\n}\n\nnew foo(); // -> foo {}\nnew bar(); // -> bar {}\nnew baz.x; // -> x {}\n\nconst arrow = () => {};\n\nnew arrow(); // TypeError: arrow is not a constructor\n\nconst obj = {\n    x() {}\n}\n\nnew obj.x; // TypeError: obj.x is not a constructor\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function foo() {};\nconst bar = function() {};\n\nconst baz = {\n    x: function() {}\n}\n\nnew foo(); // -> foo {}\nnew bar(); // -> bar {}\nnew baz.x; // -> x {}\n\nconst arrow = () => {};\n\nnew arrow(); // TypeError: arrow is not a constructor\n\nconst obj = {\n    x() {}\n}\n\nnew obj.x; // TypeError: obj.x is not a constructor\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"newtarget"},"children":[{"type":"text","value":"new.target"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"생성자 함수가 new 연산자 없이 호출되는 것을 방지하기 위한 프로퍼티"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"new.target은 this와 유사하게 constructor인 모든 함수 내부에서 암묵적인 지역 변수와 같이 사용되며 메타 프로퍼티라고 부른다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"new.target을 사용하면 new 연산자와 함께 생성자 함수로서 호출되었는지 확인할 수 있다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"new 연산자와 함께 생성자 함수로서 호출되면 함수 내부의 new.target은 함수 자신을 가리킨다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"new 연산자 없이 일반 함수로서 호출된 함수 내부의 new.target은 undefined다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Circle(radius){\n    if (!new.target) {\n        return new Cricle(radius);\n    }\n    ....\n}\n\nconst circle = Circle(5);\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Circle(radius){\n    if (!new.target) {\n        return new Cricle(radius);\n    }\n    ....\n}\n\nconst circle = Circle(5);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Function의 생성자는 자기 자신이다"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function func() {\n\n}\n\nlet test = new func();\n\nconsole.log(test.constructor); // Function func...\nconsole.log(Function.constructor); // Function\nconsole.log(Function.constructor.constructor); // Function\nconsole.log(Function.constructor.constructor.constructor); // Function\n\nconsole.log(Function.constructor === Function); // true\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function func() {\n\n}\n\nlet test = new func();\n\nconsole.log(test.constructor); // Function func...\nconsole.log(Function.constructor); // Function\nconsole.log(Function.constructor.constructor); // Function\nconsole.log(Function.constructor.constructor.constructor); // Function\n\nconsole.log(Function.constructor === Function); // true\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"JavaScript에서 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Function"}]},{"type":"text","value":" 객체는 매우 특별한데, 그것은 자기 자신을 생성하는 고유한 특성을 가지고 있습니다. 이는 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Function.constructor"}]},{"type":"text","value":"가 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Function"}]},{"type":"text","value":"을 가리키는 것으로 확인할 수 있습니다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이러한 자기 참조적 특성은 JavaScript에서 "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Function"}]},{"type":"text","value":"이 매우 독특한 역할을 한다는 것을 의미합니다. "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Function"}]},{"type":"text","value":"은 모든 함수의 기본이 되는 생성자 함수이며, 동시에 자신의 인스턴스이기도 합니다. 이는 JavaScript의 프로토타입 기반 상속과 객체 모델의 일부로, 이 언어의 독특한 특성 중 하나입니다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"참고"},"children":[{"type":"text","value":"참고"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"이웅모, 「모던 자바스크립트 Deep Dive」, 위키북스, 2020"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"_1-인스턴스-생성과-this-바인딩","depth":3,"text":"1. 인스턴스 생성과 this 바인딩"},{"id":"_2-인스턴스-초기화","depth":3,"text":"2. 인스턴스 초기화"},{"id":"_3-인스턴스-반환","depth":3,"text":"3. 인스턴스 반환"},{"id":"constructor와-non-constructor-구분","depth":2,"text":"constructor와 non-constructor 구분"},{"id":"newtarget","depth":2,"text":"new.target"},{"id":"참고","depth":2,"text":"참고"}]}},"_type":"markdown","_id":"content:posts:7ada091c-3330-42a3-9990-528ebddc39eb.md","_source":"content","_file":"posts/7ada091c-3330-42a3-9990-528ebddc39eb.md","_extension":"md"}