{"_path":"/posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"javascript this","description":"자신이 속한 객체 또는 자신이 생성할 인스턴스를 가르키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.","tags":["javascript"],"date":"2024-01-23T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"자신이 속한 객체 또는 자신이 생성할 인스턴스를 가르키는 자기 참조 변수(self-referencing variable)다. this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// 객체 리터럴\nconst circle = {\n    redius: 5,\n    getDiameter() {\n        // this는 메서드를 호출한 객체를 가리킨다.\n        return 2 * this.radius\n    }\n}\nconsole.log(circle.getDiameter()); // 10\n\n\n// 생성자 함수\nfunction Circle(radius) {\n    // this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    this.radius = radius;\n}\n\nCircle.prototype.getDiameter = function() {\n    //this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    return 2 * this.radius;\n}\n\n\n// 인스턴스 생성\nconst circle = new Circe(5);\nconsole.log(circle.getDiameter());\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 객체 리터럴\nconst circle = {\n    redius: 5,\n    getDiameter() {\n        // this는 메서드를 호출한 객체를 가리킨다.\n        return 2 * this.radius\n    }\n}\nconsole.log(circle.getDiameter()); // 10\n\n\n// 생성자 함수\nfunction Circle(radius) {\n    // this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    this.radius = radius;\n}\n\nCircle.prototype.getDiameter = function() {\n    //this는 생성자 함수가 생성할 인스턴스를 가르킨다.\n    return 2 * this.radius;\n}\n\n\n// 인스턴스 생성\nconst circle = new Circe(5);\nconsole.log(circle.getDiameter());\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"클래스 기반 언어에서는 this는 언제나 클래스가 생성하는 인스턴스를 가리킨다. 하지만 자바스크립트의 this는 함수가 호출되는 방식에 따라 동적으로 결정된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// this는 함수 호출 방식에 따라 동적으로 결정 됨.\nconst foo = function() {\n    console.log(this);\n}\n\n// 1. 일반 함수 호출\nfoo() // window\n\n\n// 2. 메서드 호출\nconst obj = { foo };\nobj.foo(); // obj\n\n// 3. 생성자 함수 호출\nnew foo(); // foo {}\n\n// 4. apply/call/bind 메서드에 의한 간접 호출\nconst bar = {name: 'bar'};\nfoo.call(bar); // bar\nfoo.apply(bar); //bar\nfoo.bind(bar)(); //bar\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// this는 함수 호출 방식에 따라 동적으로 결정 됨.\nconst foo = function() {\n    console.log(this);\n}\n\n// 1. 일반 함수 호출\nfoo() // window\n\n\n// 2. 메서드 호출\nconst obj = { foo };\nobj.foo(); // obj\n\n// 3. 생성자 함수 호출\nnew foo(); // foo {}\n\n// 4. apply/call/bind 메서드에 의한 간접 호출\nconst bar = {name: 'bar'};\nfoo.call(bar); // bar\nfoo.apply(bar); //bar\nfoo.bind(bar)(); //bar\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:posts:79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md","_source":"content","_file":"posts/79fae84a-5e7f-4cb1-a14f-6f6db7629ec0.md","_extension":"md"}