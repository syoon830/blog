{"_path":"/posts/4820d5e9-d25c-4a0e-b217-82873d3ea748","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"자바스크립트 - 17. 빌트인 객체","description":"자바스크립트 객체는 크게 3개의 객체로 분류","tags":["javascript"],"date":"2024-02-24T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"자바스크립트 객체는 크게 3개의 객체로 분류"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"표준 빌트인 객체: ECMAScript 사양에 정의된 객체"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"호스트 객체: ECMAScript 사양에 정의되어 있지 않지만 자바스크립트 실행 환경(브라우저 또는 Node.js 환경)에서 추가로 제공하는 객체"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"사용자 정의 객체: 사용자가 직접 정의한 객체"}]}]},{"type":"element","tag":"h1","props":{"id":"표준-빌트인-객체"},"children":[{"type":"text","value":"표준 빌트인 객체"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Number는 인스턴스 없이 정적으로 호출할 수 있는 정적 메서드를 제공한다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const numObj = new Number(1.5);\n\n// toFixed는 Number.prototype의 프로토타입 메서드다\nconsole.log(numObj.toFixed());\n\n// isInteger는 Number의 정적 메서드다.\nconsole.log(Number.isInteger(0.5));\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const numObj = new Number(1.5);\n\n// toFixed는 Number.prototype의 프로토타입 메서드다\nconsole.log(numObj.toFixed());\n\n// isInteger는 Number의 정적 메서드다.\nconsole.log(Number.isInteger(0.5));\n"}]}]},{"type":"element","tag":"h1","props":{"id":"원시값과-래퍼-객체"},"children":[{"type":"text","value":"원시값과 래퍼 객체"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"문자열이나 숫자, 불리언 등의 원시값이 있는데도 문자열, 숫자, 불리언 객체를 생성하는 String, Number, Boolean 등의 표준 빌트인 생성자 함수가 존재하는 이유는 무엇일까?"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이는 마침표 표기법으로 접근하면 자바스크립트 엔진이 일시적으로 원시값을 연관된 객체로 변환해 주기 때문이다. 프로퍼티에 접근하거나 메서드를 호출하고 다시 원시값으로 돌린다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이처럼 문자열, 숫자, 불리언 값에 대해 객체처럼 접근하면 생성되는 임시 객체를 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"래퍼 객체"}]},{"type":"text","value":"라 한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n\n// 래퍼 객체로 프로퍼티에 접근하거나 메서드를 호출한 후, 다시 원시값으로 되돌린다.\nconsole.log(typeof str); // string\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const str = 'hello';\n\n// 원시 타입인 문자열이 프로퍼티와 메서드를 갖고 있는 객체처럼 동작한다.\nconsole.log(str.length); // 5\nconsole.log(str.toUpperCase()); // HELLO\n\n// 래퍼 객체로 프로퍼티에 접근하거나 메서드를 호출한 후, 다시 원시값으로 되돌린다.\nconsole.log(typeof str); // string\n"}]}]},{"type":"element","tag":"h1","props":{"id":"전역-객체"},"children":[{"type":"text","value":"전역 객체"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"어떤 객체보다도 먼저 생성되는 특수한 객체. 지칭하는 이름이 제각각. 브라우저 환경에서는 window, "},{"type":"element","tag":"a","props":{"href":"http://node.sj/","rel":["nofollow"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":".js 환경에서는 global"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"ES11부터는 통일된 globalThis 식별자를 사용한다."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"var 키워드로 선언한 전역 변수와 선언하지 않은 변수에 값을 할당한 암묵적 전역"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// var 키워드로 선언한 전역 변수\nvar foo = 1;\nconsole.log(window.foo); // 1\n\n// bar는 전역 변수가 아니라 전역 객체의 프로퍼티다.\nbar = 2;\nconsole.log(window.bar); // 2\n\nfunction baz() {}\nconsole.log(window.baz());\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// var 키워드로 선언한 전역 변수\nvar foo = 1;\nconsole.log(window.foo); // 1\n\n// bar는 전역 변수가 아니라 전역 객체의 프로퍼티다.\nbar = 2;\nconsole.log(window.bar); // 2\n\nfunction baz() {}\nconsole.log(window.baz());\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"let이나 const 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아니다. 즉, window.foo와 같이 접근할 수 없다. let이나 const 키워드로 선언한 전역 변수는 보이지 않는 개념적인 블록(전역 렉시컬 환경의 선언적 레코드) 내에 존재하게 된다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"let foo = 123;\nconsole.log(window.foo); // undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let foo = 123;\nconsole.log(window.foo); // undefined\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h2","props":{"id":"암묵적-전역"},"children":[{"type":"text","value":"암묵적 전역"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var x = 10;\n\nfunction foo() {\n    y = 20;\n}\n\nfoo();\nconsole.log(x + y); // 20\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var x = 10;\n\nfunction foo() {\n    y = 20;\n}\n\nfoo();\nconsole.log(x + y); // 20\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"y는 변수 선언 없이 단지 전역 객체의 프로퍼티로 추가되었을 뿐이다. 따라서 y는 변수가 아니다. y는 변수가 아니므로 변수 호이스팅이 발생하지 않는다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"y는 window의 객체의 프로퍼티이니 삭제가 가능하다. 전역 변수는 삭제 불가"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var x = 10;\ny = 20; \nconsole.log(window.x); // 10\nconsole.log(window.y); // 20\ndelete x;\ndelete y;\nconsole.log(window.x); // 10\nconsole.log(window.y); // undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var x = 10;\ny = 20; \nconsole.log(window.x); // 10\nconsole.log(window.y); // 20\ndelete x;\ndelete y;\nconsole.log(window.x); // 10\nconsole.log(window.y); // undefined\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"암묵적-전역","depth":2,"text":"암묵적 전역"}]}},"_type":"markdown","_id":"content:posts:4820d5e9-d25c-4a0e-b217-82873d3ea748.md","_source":"content","_file":"posts/4820d5e9-d25c-4a0e-b217-82873d3ea748.md","_extension":"md"}