[{"_path":"/posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"객체지향 프로그래밍 (with. ES6)","description":"프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법","tags":["ES6"],"date":"2023-12-06T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"프로그래밍의 설계 패러다임 중 하나로, 현실 세계를 프로그램 설계에 반영한다는 개념을 기반으로 접근하는 방법"}]},{"type":"element","tag":"h3","props":{"id":"클래스와-인스턴스객체"},"children":[{"type":"text","value":"클래스와 인스턴스(객체)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"클래스는 일종의 "},{"type":"element","tag":"font","props":{"color":"purple"},"children":[{"type":"text","value":"설계도이고"}]},{"type":"text","value":" 인스턴스는 클래스를 사용하여 생성한 실제 물건이다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"스마트폰(클래스), 아이폰(인스턴스), 갤럭시(인스턴스)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"자동차(클래스), 소나타(인스턴스), 그랜져(인스턴스)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위 정의가 꼭 클래스, 인스턴스라는 이야기는 아니다. 스마트폰, 자동차 또한 인스턴스가 될 수 있다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"무선 전화기(클래스) - "},{"type":"element","tag":"i","props":{},"children":[{"type":"text","value":"스마트폰"}]},{"type":"text","value":"(인스턴스)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"이동수단(클래스) - 자동차(인스턴스)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"마찬가지로 무선 전화기, 이동수단 또한 꼭 클래스가 아닐 수 있다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class SmartPhone {\n  constructor(name) {\n    this.name = name;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nlet galaxy = new SmartPhone(\"Galaxy\");\nlet iphone = new SmartPhone(\"Iphone\");\n\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"이렇게 상위 개념을 추적하는 행위(아이폰 -> 스마트폰 -> 전화기)를 "},{"type":"element","tag":"b","props":{},"children":[{"type":"text","value":"추상화(Abstarction)"}]},{"type":"text","value":"라고 한다. 추상은 객체가 가지고 있는 여러 가지 속성 중에서 특정한 속성을 가려내어 "},{"type":"element","tag":"i","props":{},"children":[{"type":"element","tag":"font","props":{"color":"pink_background"},"children":[{"type":"text","value":"포착하는 것을 의미한다."}]}]},{"type":"text","value":" (필요한 관점만을 추출하는 행위)"}]}]}]},{"type":"element","tag":"h2","props":{"id":"객체지향-프로그래밍은-아래의-특징을-가지고-있다"},"children":[{"type":"text","value":"객체지향 프로그래밍은 아래의 특징을 가지고 있다."}]},{"type":"element","tag":"h3","props":{"id":"상속inheritance"},"children":[{"type":"text","value":"상속(inheritance)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"속성 및 기능을 물려받아 확장 할 수 있다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class Car {\n  axle() {\n    console.log('이동');\n  }\n  break() {\n    console.log('멈춤');\n  }\n}\n\nclass Hyundai extends Car {\n  // Car의 기능을 물려 받음(axle, break)\n  companyName = '현대';\n  country = '대한민국';\n}\n\nclass Sonata extends Hyundai {\n  // Car의 기능을 물려 받음(axle, break)\n  // Hyundai 속성을 물려 받음(compnayName, country)\n  modelName = '소나타';\n\n}\n\nlet sonata2020 = new Sonata();\nconsole.log(sonata2020.companyName); // 현대\nconsole.log(sonata2020.country); // 대한민국\nsonata2020.axle(); // 이동\nsonata2020.break(); // 멈춤\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이렇게 상속을 하게 되면 중복 코드를 피할 수 있다."}]},{"type":"element","tag":"h3","props":{"id":"다형성polymorphism"},"children":[{"type":"text","value":"다형성(Polymorphism)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"어떤 하나의 변수명이나 함수명이 상황에 따라서 다르게 해석될 수 있는 것을 의미 (형태가 같은데 다른 기능을 하는 것)"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class Animal {\n  sound() {\n    console.log('동물 울음소리를 만들어주세요.');\n  }\n}\n\nclass Cat extends Animal {\n  sound() {\n    console.log('야옹');\n  }\n}\n\nclass Dog extends Animal {\n  sound() {\n    console.log('멍멍');\n  }\n}\n\nlet Leo = new Cat();\nlet Bella = new Dog();\n\nLeo.sound(); // 야옹\nBella.sound(); // 멍멍\n\n"}]}]},{"type":"element","tag":"h3","props":{"id":"캡슐화encapsulation"},"children":[{"type":"text","value":"캡슐화(Encapsulation)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"기본적으로 관련된 여러 가지 정보를 하나의 틀 안에 담는 것을 의미한다. 아래 코드를 보면 변수들과 메서드가 서로 관련된 정보가 되고 클래스(Capsule)이 이것을 담는 하나의 큰 틀이라고 할 수 있다. 여기에서 중요한 것은 은닉화, 정보의 공개 여부이다. 정보 은닉(Information hiding)의 개념이 바로 이 부분을 담당한다."}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 캡슐화 (속성, 메소드)\npublic class Capsule {\n  // 은닉화\n  private String name;\n  private String id;\n\n  // 은닉화한 정보 제어 할 수 있는 메소드\n  // 외부에 공개\n  public String getName() {\n    return this.name;\n  }\n  public String setName(String name) {\n    return this.name = name;\n  }\n  public String getId() {\n    return this.id;\n  }\n  public String setName(String id) {\n    return this.id = id;\n  }\n}\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h3","props":{"id":"참고"},"children":[{"type":"text","value":"참고"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"인사이드 자바스크립트"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"font","props":{"color":"blue"},"children":[{"type":"element","tag":"a","props":{"href":"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/","rel":["nofollow"]},"children":[{"type":"text","value":"https://evan-moon.github.io/2019/08/24/what-is-object-oriented-programming/"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"font","props":{"color":"blue"},"children":[{"type":"element","tag":"a","props":{"href":"http://www.opentutorials.org/module/2495/14037","rel":["nofollow"]},"children":[{"type":"text","value":"www.opentutorials.org/module/2495/14037"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://victorydntmd.tistory.com/117","rel":["nofollow"]},"children":[{"type":"text","value":"https://victorydntmd.tistory.com/117"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"클래스와-인스턴스객체","depth":3,"text":"클래스와 인스턴스(객체)"},{"id":"객체지향-프로그래밍은-아래의-특징을-가지고-있다","depth":2,"text":"객체지향 프로그래밍은 아래의 특징을 가지고 있다.","children":[{"id":"상속inheritance","depth":3,"text":"상속(inheritance)"},{"id":"다형성polymorphism","depth":3,"text":"다형성(Polymorphism)"},{"id":"캡슐화encapsulation","depth":3,"text":"캡슐화(Encapsulation)"},{"id":"참고","depth":3,"text":"참고"}]}]}},"_type":"markdown","_id":"content:posts:b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","_source":"content","_file":"posts/b083a0e2-3166-41dc-ad9c-3e9b6383a6c6.md","_extension":"md"},{"_path":"/posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"nuxt3 정적 사이트 github page에서 js파일들 404에러 날때","description":"githubpage에 generage해서 올렸는데 자꾸 에러가 나는거다… 이유를 몰라서 밤새 검색했는데도 답이 안나오고","tags":["nuxt"],"date":"2024-01-03T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"githubpage에 generage해서 올렸는데 자꾸 에러가 나는거다… 이유를 몰라서 밤새 검색했는데도 답이 안나오고"}]},{"type":"element","tag":"img","props":{"src":"https://prod-files-secure.s3.us-west-2.amazonaws.com/122c4317-821b-493a-85a2-3b119a538ecc/fe6c9a49-b3bc-4656-b606-896c26f1f958/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45HZZMZUHI%2F20240114%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240114T131144Z&X-Amz-Expires=3600&X-Amz-Signature=1eccbb9b7dae672e61ec4d8f42b5a0e18afbd37496857aac8436735782932cfd&X-Amz-SignedHeaders=host&x-id=GetObject"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"결국 nuxt github issue에서 찾았다 ㅠㅠ"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt/nuxt/issues/10113","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/nuxt/nuxt/issues/10113"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":".nojeklly"}]},{"type":"element","tag":"pre","props":{"className":["language-json"],"code":"\"deploy\": \"nuxt generate && touch .output/public/.nojekyll && gh-pages --dotfiles -d .output/public”\n","language":"json","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\"deploy\": \"nuxt generate && touch .output/public/.nojekyll && gh-pages --dotfiles -d .output/public”\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"결론은 generate하고 프로젝트 폴더안에 .nojekyll 파일이 있어야 되는거였다. (github page는 기본적으로 jekyll이라는 정적 사이트 생성기를 사용함)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":".nojekyll 파일이 있으면 github 페이지는 jekyll 처리를 건너뜀."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"오늘의 개발 교훈: github issue를 잘 찾아보자!"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:posts:d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md","_source":"content","_file":"posts/d35aaedb-0f64-4f7f-8c76-97e2069cbadd.md","_extension":"md"},{"_path":"/posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"Property \"query\" was accessed during render but is not defined on instance","description":"","tags":["nuxt"],"date":"2024-01-05T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"pre","props":{"className":["language-css"],"code":"// AS-IS\nconst { query } = defineProps();\n\n// TO-BE\nconst { query } = defineProps(['query']);\n\n","language":"css","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// AS-IS\nconst { query } = defineProps();\n\n// TO-BE\nconst { query } = defineProps(['query']);\n\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:posts:ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md","_source":"content","_file":"posts/ef65e77b-7018-4854-8ba1-e14fc2a8fba9.md","_extension":"md"},{"_path":"/posts/f8128924-3314-4bbc-9acd-4e7fcab8969a","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"화살표 함수(=>)","description":"function 키워드 대신 화살표(=>)를 사용하는 방식의 함수","tags":["ES6"],"date":"2024-01-14T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"function 키워드 대신 화살표(=>)를 사용하는 방식의 함수"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"※ 그렇다고 모든 경우에 화살표 함수를 사용하면 안 됨 (아래에서 확인)"}]},{"type":"element","tag":"h2","props":{"id":"문법"},"children":[{"type":"text","value":"문법"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"일반-함수funciton와-화살표-함수-차이점"},"children":[{"type":"text","value":"일반 함수(funciton)와 화살표 함수(=>) 차이점"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"가장 큰 차이점은 this인데 코드를 보며 확인해 보자."}]},{"type":"element","tag":"h3","props":{"id":"일반-함수function"},"children":[{"type":"text","value":"일반 함수(function)"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위 코드를 보게 되면 map 안에 this를 찍어보면 Window를 가르키고 있다. 기본적으로 내부 함수 this는 Window를 가르킨다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"생성자 함수와 객체의 메소드를 제외한 모든 함수(내부 함수, 콜백 함수 포함) 내부의 this는 전역 객체(Window)를 가르키기 때문이다."}]}]},{"type":"element","tag":"h3","props":{"id":"화살표-함수"},"children":[{"type":"text","value":"화살표 함수(=>)"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위 코드와 다르게 map 안에 this는 Prexier를 가르킨다. 이는 화살표 함수의 this는 언제나 상위 스코프의 this를 가르키기 때문이다."}]},{"type":"element","tag":"h2","props":{"id":"화살표-함수를-사용해서는-안되는-경우"},"children":[{"type":"text","value":"화살표 함수를 사용해서는 안되는 경우"}]},{"type":"element","tag":"h3","props":{"id":"_1-메소드"},"children":[{"type":"text","value":"1. 메소드"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"element","tag":"font","props":{"color":"red"},"children":[{"type":"text","value":"bad"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"element","tag":"font","props":{"color":"green"},"children":[{"type":"text","value":"good"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"element","tag":"font","props":{"color":"blue"},"children":[{"type":"text","value":"best"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-prototype"},"children":[{"type":"text","value":"2. prototype"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"element","tag":"font","props":{"color":"red"},"children":[{"type":"text","value":"bad"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"element","tag":"font","props":{"color":"green"},"children":[{"type":"text","value":"good"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_3-생성자-함수"},"children":[{"type":"text","value":"3. 생성자 함수"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_4-addeventlistener-함수의-콜백-함수"},"children":[{"type":"text","value":"4. addEventListener 함수의 콜백 함수"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"element","tag":"font","props":{"color":"red"},"children":[{"type":"text","value":"bad"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"b","props":{},"children":[{"type":"element","tag":"font","props":{"color":"green"},"children":[{"type":"text","value":"good"}]}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h3","props":{"id":"참고"},"children":[{"type":"text","value":"참고:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://poiemaweb.com/es6-arrow-function","rel":["nofollow"]},"children":[{"type":"text","value":"https://poiemaweb.com/es6-arrow-function"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"문법","depth":2,"text":"문법"},{"id":"일반-함수funciton와-화살표-함수-차이점","depth":2,"text":"일반 함수(funciton)와 화살표 함수(=>) 차이점","children":[{"id":"일반-함수function","depth":3,"text":"일반 함수(function)"},{"id":"화살표-함수","depth":3,"text":"화살표 함수(=>)"}]},{"id":"화살표-함수를-사용해서는-안되는-경우","depth":2,"text":"화살표 함수를 사용해서는 안되는 경우","children":[{"id":"_1-메소드","depth":3,"text":"1. 메소드"},{"id":"_2-prototype","depth":3,"text":"2. prototype"},{"id":"_3-생성자-함수","depth":3,"text":"3. 생성자 함수"},{"id":"_4-addeventlistener-함수의-콜백-함수","depth":3,"text":"4. addEventListener 함수의 콜백 함수"},{"id":"참고","depth":3,"text":"참고:"}]}]}},"_type":"markdown","_id":"content:posts:f8128924-3314-4bbc-9acd-4e7fcab8969a.md","_source":"content","_file":"posts/f8128924-3314-4bbc-9acd-4e7fcab8969a.md","_extension":"md"}]