{"_path":"/posts/dd772cec-2501-4d07-b897-2626c54be01e","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"자바스크립트 - 10. 스코프","description":"스코프 (유효범위)","tags":["javascript"],"date":"2024-02-17T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"스코프란"},"children":[{"type":"text","value":"스코프란?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"스코프 (유효범위)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정 된다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"이를 스코프라 한다. 즉, 스코프는 식별자가 유효한 범위다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"자바스크립트 엔진은 이름이 같은 두 개의 변수 중에서 어떤 변수를 참조해야 할 것인지를 결정한다. 이를 식별자 결정이라 한다. 스코프란 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"스코프란 개념이 없다면 같은 이름을 갖는 변수는 충돌을 일으키므로 프로그램 전체에서 하나밖에 사용할 수 없다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"aside","props":{"emogi":"❗","color":"purple"},"children":[{"type":"text","value":"코드가 어디서 실행되며 주변에 어떤 코드가 있는지를 “렉시컬 환경(lexical environment)”이라고 부른다."}]},{"type":"element","tag":"h1","props":{"id":"스코프의-종류"},"children":[{"type":"text","value":"스코프의 종류"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"변수는 자신이 선언된 위치에 의해 자신이 유효한 범위인 스코프가 결정된다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"전역 스코프, 지역 스코프"}]}]},{"type":"element","tag":"h1","props":{"id":"스코프-체인"},"children":[{"type":"text","value":"스코프 체인"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"모든 스코프는 계층적으로 연결된다. 모든 지역 스코프의 최상위는 전역 스코프다. 이렇게 스코프가 계층적으로 연결된 것을 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"스코프 체인"}]},{"type":"text","value":"이라 한다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"예를 들어 a라는 변수를 어떤 스코프에서 호출할 때 해당 스코프에 a가 없으면 스코프 체인을 통해 상위 스코프로 이동하여 검색을 한다."}]}]},{"type":"element","tag":"aside","props":{"emogi":"❗","color":"purple"},"children":[{"type":"text","value":"스코프 체인은 실행 컨텍스트의 렉시컬 환경을 단방향을 연결(chaining)한 것이다. 전역 렉시컬 환경은 코드가 로드되면 곧바로 생성되고 함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다."}]},{"type":"element","tag":"h1","props":{"id":"함수-레벨-스코프"},"children":[{"type":"text","value":"함수 레벨 스코프"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"var 키워드를 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var x = 1;\nif (true) {\n    var x = 10;\n}\n\nconsole.log(x); // 10\n\nfunction test() {\n    var x = 20;\n    console.log(x); // 20\n}\nconsole.log(x); // 10;\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var x = 1;\nif (true) {\n    var x = 10;\n}\n\nconsole.log(x); // 10\n\nfunction test() {\n    var x = 20;\n    console.log(x); // 20\n}\nconsole.log(x); // 10;\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"let, const는 블록 레벨 스코프를 지원한다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"h1","props":{"id":"렉시컬-스코프"},"children":[{"type":"text","value":"렉시컬 스코프"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var x = 1;\n\nfunction foo() {\n    var x = 10;\n    bar();\n}\n\nfunction bar() {\n    console.log(x);\n}\n\nfoo(); //\nbar(); //\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var x = 1;\n\nfunction foo() {\n    var x = 10;\n    bar();\n}\n\nfunction bar() {\n    console.log(x);\n}\n\nfoo(); //\nbar(); //\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"프로그래밍 언어는 일반적으로 2가지 방식 중 한 가지 방식으로 함수의 상위 스코프를 결정"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수를 어디서 호출 했는지 (동적 스코프)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"함수를 어디서 정의 했는지 (정적 스코프, 렉시컬 스코프)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"동적 스코프(dynamic scoping)를 사용하는 프로그래밍 언어는 상대적으로 드뭅니다. 대부분의 현대 프로그래밍 언어는 정적 스코프(lexical scoping)를 사용합니다. 그러나 여전히 동적 스코프를 사용하거나 지원하는 언어들이 있습니다:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bash 스크립팅 언어: Bash와 같은 쉘 스크립팅 언어는 동적 스코프를 사용합니다. 예를 들어, 함수 내에서 선언된 변수는 그 함수가 호출된 컨텍스트에 따라 다른 값을 가질 수 있습니다."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Emacs Lisp: Emacs 텍스트 에디터의 확장 언어인 Emacs Lisp는 기본적으로 동적 스코프를 사용하지만, 정적 스코프도 선택적으로 사용할 수 있습니다."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Perl: Perl은 기본적으로 정적 스코프를 사용하지만, 특별한 키워드와 문법을 사용하여 동적 스코프를 사용할 수 있습니다."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Common Lisp: Common Lisp는 동적 스코프와 정적 스코프를 모두 지원합니다. 프로그래머는 변수를 선언할 때 스코프 유형을 선택할 수 있습니다."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"동적 스코프는 실행 시점에 변수의 바인딩이 결정되며, 이는 호출 스택의 컨텍스트에 따라 달라집니다. 반면, 정적 스코프(lexical scoping)는 코드를 작성하는 시점에서 변수의 범위가 결정되며, 함수나 블록의 위치에 의존합니다. 동적 스코프는 특정 유형의 문제를 해결하는 데 유용할 수 있지만, 프로그램의 동작을 예측하고 이해하기 어렵게 만들 수 있기 때문에 현대 언어에서는 일반적으로 정적 스코프가 선호됩니다."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:posts:dd772cec-2501-4d07-b897-2626c54be01e.md","_source":"content","_file":"posts/dd772cec-2501-4d07-b897-2626c54be01e.md","_extension":"md"}