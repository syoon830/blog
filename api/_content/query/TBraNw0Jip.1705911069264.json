{"_path":"/posts/f8128924-3314-4bbc-9acd-4e7fcab8969a","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"화살표 함수(=>)","description":"function 키워드 대신 화살표(=>)를 사용하는 방식의 함수","tags":["ES6"],"date":"2024-01-14T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"function 키워드 대신 화살표(=>)를 사용하는 방식의 함수"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// function\nfunction f() {}\n\n// 화살표 함수\nconst f = () => {};\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"※ 그렇다고 모든 경우에 화살표 함수를 사용하면 안 됨 (아래에서 확인)"}]},{"type":"element","tag":"h2","props":{"id":"문법"},"children":[{"type":"text","value":"문법"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"() => {} // 매개변수가 없을 때\nx => {} // 매개변수가 한 개인 경우, 소괄호 생략 가능\n(x, y) => {} // 매개변수가 여러 개인 경우, 소괄호 생략 불가\n\nx => { return x*x } // 일반적인 함수 사용\nx => x*x // 한 줄 구문이라면 중괄호 생략 가능 (암묵적으로 return)\n\n() => { return { a: 1 }} // 일반적인 함수 사용\n() => ({ a: 1 }) // 객체 반환 시 소괄호를 사용\n\n// multi line\n() => {\n    const x = 10;\n    return x*x;\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"일반-함수funciton와-화살표-함수-차이점"},"children":[{"type":"text","value":"일반 함수(funciton)와 화살표 함수(=>) 차이점"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"가장 큰 차이점은 this인데 코드를 보며 확인해 보자."}]},{"type":"element","tag":"h3","props":{"id":"일반-함수function"},"children":[{"type":"text","value":"일반 함수(function)"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map(function (x) {\n    console.log(this); // Window\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"undefined Seungyoon\"]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위 코드를 보게 되면 map 안에 this를 찍어보면 Window를 가르키고 있다. 기본적으로 내부 함수 this는 Window를 가르킨다."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"생성자 함수와 객체의 메소드를 제외한 모든 함수(내부 함수, 콜백 함수 포함) 내부의 this는 전역 객체(Window)를 가르키기 때문이다."}]}]},{"type":"element","tag":"h3","props":{"id":"화살표-함수"},"children":[{"type":"text","value":"화살표 함수(=>)"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function Prefixer(prefix) {\n  this.prefix = prefix;\n}\n\nPrefixer.prototype.prefixArray = function (arr) {\n  console.log(this); // Prefixer\n  return arr.map((x) => {\n    console.log(this); // Prexier\n    return this.prefix + ' ' + x;\n  });\n};\nvar pre = new Prefixer('Hi');\nconsole.log(pre.prefixArray(['Seungyoon'])); // [\"Hi Seungyoon\"]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"위 코드와 다르게 map 안에 this는 Prexier를 가르킨다. 이는 화살표 함수의 this는 언제나 상위 스코프의 this를 가르키기 때문이다."}]},{"type":"element","tag":"h2","props":{"id":"화살표-함수를-사용해서는-안되는-경우"},"children":[{"type":"text","value":"화살표 함수를 사용해서는 안되는 경우"}]},{"type":"element","tag":"h3","props":{"id":"_1-메소드"},"children":[{"type":"text","value":"1. 메소드"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"bad"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: () => {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // undefined\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"good"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName: function () {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"best"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const seungyoon = {\n  firstName: 'kim',\n  lastName: 'seungyoon',\n  getFirstName() {\n    return this.firstName;\n  },\n};\n\nconsole.log(seungyoon.getFirstName()); // kim\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-prototype"},"children":[{"type":"text","value":"2. prototype"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"bad"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"good"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const Person = function (firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n};\n\nPerson.prototype.getFullName = () => {\n  return this.firstName + ' ' + this.lastName;\n};\n\nconst seungyoon = new Person('seungyoon', 'kim');\nconsole.log(seungyoon.getFullName()); // undefined undefined\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_3-생성자-함수"},"children":[{"type":"text","value":"3. 생성자 함수"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const Person1 = () => {};\nconst Person2 = function () {};\n\n// 화살표 함수는 prototype 프로퍼티가 없음\nconsole.log(Person1.prototype); // undefined\n// 일반 함수는 prototype 내 생성자 함수가 있음\nconsole.log(Person2.prototype); // { constructor...}\n\nconst person1 = new Person1(); // TypeError: Person1 is not a constructor\nconst person2 = new Person2();\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_4-addeventlistener-함수의-콜백-함수"},"children":[{"type":"text","value":"4. addEventListener 함수의 콜백 함수"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"bad"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', () => {\n  console.log(this); // window\n  this.innerHTML = 'Clicked Button';\n});\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"good"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var button = document.getElementById('button');\n\nbutton.addEventListener('click', function () {\n  console.log(this); // button\n  this.innerHTML = 'Clicked Button';\n});\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h3","props":{"id":"참고"},"children":[{"type":"text","value":"참고:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://poiemaweb.com/es6-arrow-function","rel":["nofollow"]},"children":[{"type":"text","value":"https://poiemaweb.com/es6-arrow-function"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"문법","depth":2,"text":"문법"},{"id":"일반-함수funciton와-화살표-함수-차이점","depth":2,"text":"일반 함수(funciton)와 화살표 함수(=>) 차이점","children":[{"id":"일반-함수function","depth":3,"text":"일반 함수(function)"},{"id":"화살표-함수","depth":3,"text":"화살표 함수(=>)"}]},{"id":"화살표-함수를-사용해서는-안되는-경우","depth":2,"text":"화살표 함수를 사용해서는 안되는 경우","children":[{"id":"_1-메소드","depth":3,"text":"1. 메소드"},{"id":"_2-prototype","depth":3,"text":"2. prototype"},{"id":"_3-생성자-함수","depth":3,"text":"3. 생성자 함수"},{"id":"_4-addeventlistener-함수의-콜백-함수","depth":3,"text":"4. addEventListener 함수의 콜백 함수"},{"id":"참고","depth":3,"text":"참고:"}]}]}},"_type":"markdown","_id":"content:posts:f8128924-3314-4bbc-9acd-4e7fcab8969a.md","_source":"content","_file":"posts/f8128924-3314-4bbc-9acd-4e7fcab8969a.md","_extension":"md"}